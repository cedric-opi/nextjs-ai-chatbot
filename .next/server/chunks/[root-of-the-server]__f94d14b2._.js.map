{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/db/utils.ts"],"sourcesContent":["import { generateId } from \"ai\";\nimport { genSaltSync, hashSync } from \"bcrypt-ts\";\n\nexport function generateHashedPassword(password: string) {\n  const salt = genSaltSync(10);\n  const hash = hashSync(password, salt);\n\n  return hash;\n}\n\nexport function generateDummyPassword() {\n  const password = generateId();\n  const hashedPassword = generateHashedPassword(password);\n\n  return hashedPassword;\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS,uBAAuB,QAAgB;IACrD,MAAM,OAAO,CAAA,GAAA,wMAAA,CAAA,cAAW,AAAD,EAAE;IACzB,MAAM,OAAO,CAAA,GAAA,wMAAA,CAAA,WAAQ,AAAD,EAAE,UAAU;IAEhC,OAAO;AACT;AAEO,SAAS;IACd,MAAM,WAAW,CAAA,GAAA,sRAAA,CAAA,aAAU,AAAD;IAC1B,MAAM,iBAAiB,uBAAuB;IAE9C,OAAO;AACT","debugId":null}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/constants.ts"],"sourcesContent":["import { generateDummyPassword } from \"./db/utils\";\n\nexport const isProductionEnvironment = process.env.NODE_ENV === \"production\";\nexport const isDevelopmentEnvironment = process.env.NODE_ENV === \"development\";\nexport const isTestEnvironment = Boolean(\n  process.env.PLAYWRIGHT_TEST_BASE_URL ||\n    process.env.PLAYWRIGHT ||\n    process.env.CI_PLAYWRIGHT\n);\n\nexport const guestRegex = /^guest-\\d+$/;\n\nexport const DUMMY_PASSWORD = generateDummyPassword();\n"],"names":[],"mappings":";;;;;;;AAAA;;AAEO,MAAM,0BAA0B,oDAAyB;AACzD,MAAM,2BAA2B,oDAAyB;AAC1D,MAAM,oBAAoB,QAC/B,QAAQ,GAAG,CAAC,wBAAwB,IAClC,QAAQ,GAAG,CAAC,UAAU,IACtB,QAAQ,GAAG,CAAC,aAAa;AAGtB,MAAM,aAAa;AAEnB,MAAM,iBAAiB,CAAA,GAAA,oHAAA,CAAA,wBAAqB,AAAD","debugId":null}},
    {"offset": {"line": 242, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/errors.ts"],"sourcesContent":["export type ErrorType =\n  | \"bad_request\"\n  | \"unauthorized\"\n  | \"forbidden\"\n  | \"not_found\"\n  | \"rate_limit\"\n  | \"offline\";\n\nexport type Surface =\n  | \"chat\"\n  | \"auth\"\n  | \"api\"\n  | \"stream\"\n  | \"database\"\n  | \"history\"\n  | \"vote\"\n  | \"document\"\n  | \"suggestions\"\n  | \"activate_gateway\";\n\nexport type ErrorCode = `${ErrorType}:${Surface}`;\n\nexport type ErrorVisibility = \"response\" | \"log\" | \"none\";\n\nexport const visibilityBySurface: Record<Surface, ErrorVisibility> = {\n  database: \"log\",\n  chat: \"response\",\n  auth: \"response\",\n  stream: \"response\",\n  api: \"response\",\n  history: \"response\",\n  vote: \"response\",\n  document: \"response\",\n  suggestions: \"response\",\n  activate_gateway: \"response\",\n};\n\nexport class ChatSDKError extends Error {\n  type: ErrorType;\n  surface: Surface;\n  statusCode: number;\n\n  constructor(errorCode: ErrorCode, cause?: string) {\n    super();\n\n    const [type, surface] = errorCode.split(\":\");\n\n    this.type = type as ErrorType;\n    this.cause = cause;\n    this.surface = surface as Surface;\n    this.message = getMessageByErrorCode(errorCode);\n    this.statusCode = getStatusCodeByType(this.type);\n  }\n\n  toResponse() {\n    const code: ErrorCode = `${this.type}:${this.surface}`;\n    const visibility = visibilityBySurface[this.surface];\n\n    const { message, cause, statusCode } = this;\n\n    if (visibility === \"log\") {\n      console.error({\n        code,\n        message,\n        cause,\n      });\n\n      return Response.json(\n        { code: \"\", message: \"Something went wrong. Please try again later.\" },\n        { status: statusCode }\n      );\n    }\n\n    return Response.json({ code, message, cause }, { status: statusCode });\n  }\n}\n\nexport function getMessageByErrorCode(errorCode: ErrorCode): string {\n  if (errorCode.includes(\"database\")) {\n    return \"An error occurred while executing a database query.\";\n  }\n\n  switch (errorCode) {\n    case \"bad_request:api\":\n      return \"The request couldn't be processed. Please check your input and try again.\";\n\n    case \"bad_request:activate_gateway\":\n      return \"AI Gateway requires a valid credit card on file to service requests. Please visit https://vercel.com/d?to=%2F%5Bteam%5D%2F%7E%2Fai%3Fmodal%3Dadd-credit-card to add a card and unlock your free credits.\";\n\n    case \"unauthorized:auth\":\n      return \"You need to sign in before continuing.\";\n    case \"forbidden:auth\":\n      return \"Your account does not have access to this feature.\";\n\n    case \"rate_limit:chat\":\n      return \"You have exceeded your maximum number of messages for the day. Please try again later.\";\n    case \"not_found:chat\":\n      return \"The requested chat was not found. Please check the chat ID and try again.\";\n    case \"forbidden:chat\":\n      return \"This chat belongs to another user. Please check the chat ID and try again.\";\n    case \"unauthorized:chat\":\n      return \"You need to sign in to view this chat. Please sign in and try again.\";\n    case \"offline:chat\":\n      return \"We're having trouble sending your message. Please check your internet connection and try again.\";\n\n    case \"not_found:document\":\n      return \"The requested document was not found. Please check the document ID and try again.\";\n    case \"forbidden:document\":\n      return \"This document belongs to another user. Please check the document ID and try again.\";\n    case \"unauthorized:document\":\n      return \"You need to sign in to view this document. Please sign in and try again.\";\n    case \"bad_request:document\":\n      return \"The request to create or update the document was invalid. Please check your input and try again.\";\n\n    default:\n      return \"Something went wrong. Please try again later.\";\n  }\n}\n\nfunction getStatusCodeByType(type: ErrorType) {\n  switch (type) {\n    case \"bad_request\":\n      return 400;\n    case \"unauthorized\":\n      return 401;\n    case \"forbidden\":\n      return 403;\n    case \"not_found\":\n      return 404;\n    case \"rate_limit\":\n      return 429;\n    case \"offline\":\n      return 503;\n    default:\n      return 500;\n  }\n}\n"],"names":[],"mappings":";;;;;AAwBO,MAAM,sBAAwD;IACnE,UAAU;IACV,MAAM;IACN,MAAM;IACN,QAAQ;IACR,KAAK;IACL,SAAS;IACT,MAAM;IACN,UAAU;IACV,aAAa;IACb,kBAAkB;AACpB;AAEO,MAAM,qBAAqB;IAChC,KAAgB;IAChB,QAAiB;IACjB,WAAmB;IAEnB,YAAY,SAAoB,EAAE,KAAc,CAAE;QAChD,KAAK;QAEL,MAAM,CAAC,MAAM,QAAQ,GAAG,UAAU,KAAK,CAAC;QAExC,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,OAAO,GAAG,sBAAsB;QACrC,IAAI,CAAC,UAAU,GAAG,oBAAoB,IAAI,CAAC,IAAI;IACjD;IAEA,aAAa;QACX,MAAM,OAAkB,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,EAAE;QACtD,MAAM,aAAa,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC;QAEpD,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,IAAI;QAE3C,IAAI,eAAe,OAAO;YACxB,QAAQ,KAAK,CAAC;gBACZ;gBACA;gBACA;YACF;YAEA,OAAO,SAAS,IAAI,CAClB;gBAAE,MAAM;gBAAI,SAAS;YAAgD,GACrE;gBAAE,QAAQ;YAAW;QAEzB;QAEA,OAAO,SAAS,IAAI,CAAC;YAAE;YAAM;YAAS;QAAM,GAAG;YAAE,QAAQ;QAAW;IACtE;AACF;AAEO,SAAS,sBAAsB,SAAoB;IACxD,IAAI,UAAU,QAAQ,CAAC,aAAa;QAClC,OAAO;IACT;IAEA,OAAQ;QACN,KAAK;YACH,OAAO;QAET,KAAK;YACH,OAAO;QAET,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QAET,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QAET,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QAET;YACE,OAAO;IACX;AACF;AAEA,SAAS,oBAAoB,IAAe;IAC1C,OAAQ;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF","debugId":null}},
    {"offset": {"line": 357, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/utils.ts"],"sourcesContent":["import type {\n  CoreAssistantMessage,\n  CoreToolMessage,\n  UIMessage,\n  UIMessagePart,\n} from 'ai';\nimport { type ClassValue, clsx } from 'clsx';\nimport { formatISO } from 'date-fns';\nimport { twMerge } from 'tailwind-merge';\nimport type { DBMessage, Document } from '@/lib/db/schema';\nimport { ChatSDKError, type ErrorCode } from './errors';\nimport type { ChatMessage, ChatTools, CustomUIDataTypes } from './types';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport const fetcher = async (url: string) => {\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    const { code, cause } = await response.json();\n    throw new ChatSDKError(code as ErrorCode, cause);\n  }\n\n  return response.json();\n};\n\nexport async function fetchWithErrorHandlers(\n  input: RequestInfo | URL,\n  init?: RequestInit,\n) {\n  try {\n    const response = await fetch(input, init);\n\n    if (!response.ok) {\n      const { code, cause } = await response.json();\n      throw new ChatSDKError(code as ErrorCode, cause);\n    }\n\n    return response;\n  } catch (error: unknown) {\n    if (typeof navigator !== 'undefined' && !navigator.onLine) {\n      throw new ChatSDKError('offline:chat');\n    }\n\n    throw error;\n  }\n}\n\nexport function getLocalStorage(key: string) {\n  if (typeof window !== 'undefined') {\n    return JSON.parse(localStorage.getItem(key) || '[]');\n  }\n  return [];\n}\n\nexport function generateUUID(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\ntype ResponseMessageWithoutId = CoreToolMessage | CoreAssistantMessage;\ntype ResponseMessage = ResponseMessageWithoutId & { id: string };\n\nexport function getMostRecentUserMessage(messages: UIMessage[]) {\n  const userMessages = messages.filter((message) => message.role === 'user');\n  return userMessages.at(-1);\n}\n\nexport function getDocumentTimestampByIndex(\n  documents: Document[],\n  index: number,\n) {\n  if (!documents) { return new Date(); }\n  if (index > documents.length) { return new Date(); }\n\n  return documents[index].createdAt;\n}\n\nexport function getTrailingMessageId({\n  messages,\n}: {\n  messages: ResponseMessage[];\n}): string | null {\n  const trailingMessage = messages.at(-1);\n\n  if (!trailingMessage) { return null; }\n\n  return trailingMessage.id;\n}\n\nexport function sanitizeText(text: string) {\n  return text.replace('<has_function_call>', '');\n}\n\nexport function convertToUIMessages(messages: DBMessage[]): ChatMessage[] {\n  return messages.map((message) => ({\n    id: message.id,\n    role: message.role as 'user' | 'assistant' | 'system',\n    parts: message.parts as UIMessagePart<CustomUIDataTypes, ChatTools>[],\n    metadata: {\n      createdAt: formatISO(message.createdAt),\n    },\n  }));\n}\n\nexport function getTextFromMessage(message: ChatMessage): string {\n  return message.parts\n    .filter((part) => part.type === 'text')\n    .map((part) => part.text)\n    .join('');\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAMA;AACA;AACA;AAEA;;;;;AAGO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2NAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wLAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEO,MAAM,UAAU,OAAO;IAC5B,MAAM,WAAW,MAAM,MAAM;IAE7B,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI;QAC3C,MAAM,IAAI,+GAAA,CAAA,eAAY,CAAC,MAAmB;IAC5C;IAEA,OAAO,SAAS,IAAI;AACtB;AAEO,eAAe,uBACpB,KAAwB,EACxB,IAAkB;IAElB,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,OAAO;QAEpC,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI;YAC3C,MAAM,IAAI,+GAAA,CAAA,eAAY,CAAC,MAAmB;QAC5C;QAEA,OAAO;IACT,EAAE,OAAO,OAAgB;QACvB,IAAI,OAAO,cAAc,eAAe,CAAC,UAAU,MAAM,EAAE;YACzD,MAAM,IAAI,+GAAA,CAAA,eAAY,CAAC;QACzB;QAEA,MAAM;IACR;AACF;AAEO,SAAS,gBAAgB,GAAW;IACzC,uCAAmC;;IAEnC;IACA,OAAO,EAAE;AACX;AAEO,SAAS;IACd,OAAO,uCAAuC,OAAO,CAAC,SAAS,CAAC;QAC9D,MAAM,IAAI,AAAC,KAAK,MAAM,KAAK,KAAM;QACjC,MAAM,IAAI,MAAM,MAAM,IAAI,AAAC,IAAI,MAAO;QACtC,OAAO,EAAE,QAAQ,CAAC;IACpB;AACF;AAKO,SAAS,yBAAyB,QAAqB;IAC5D,MAAM,eAAe,SAAS,MAAM,CAAC,CAAC,UAAY,QAAQ,IAAI,KAAK;IACnE,OAAO,aAAa,EAAE,CAAC,CAAC;AAC1B;AAEO,SAAS,4BACd,SAAqB,EACrB,KAAa;IAEb,IAAI,CAAC,WAAW;QAAE,OAAO,IAAI;IAAQ;IACrC,IAAI,QAAQ,UAAU,MAAM,EAAE;QAAE,OAAO,IAAI;IAAQ;IAEnD,OAAO,SAAS,CAAC,MAAM,CAAC,SAAS;AACnC;AAEO,SAAS,qBAAqB,EACnC,QAAQ,EAGT;IACC,MAAM,kBAAkB,SAAS,EAAE,CAAC,CAAC;IAErC,IAAI,CAAC,iBAAiB;QAAE,OAAO;IAAM;IAErC,OAAO,gBAAgB,EAAE;AAC3B;AAEO,SAAS,aAAa,IAAY;IACvC,OAAO,KAAK,OAAO,CAAC,uBAAuB;AAC7C;AAEO,SAAS,oBAAoB,QAAqB;IACvD,OAAO,SAAS,GAAG,CAAC,CAAC,UAAY,CAAC;YAChC,IAAI,QAAQ,EAAE;YACd,MAAM,QAAQ,IAAI;YAClB,OAAO,QAAQ,KAAK;YACpB,UAAU;gBACR,WAAW,CAAA,GAAA,kMAAA,CAAA,YAAS,AAAD,EAAE,QAAQ,SAAS;YACxC;QACF,CAAC;AACH;AAEO,SAAS,mBAAmB,OAAoB;IACrD,OAAO,QAAQ,KAAK,CACjB,MAAM,CAAC,CAAC,OAAS,KAAK,IAAI,KAAK,QAC/B,GAAG,CAAC,CAAC,OAAS,KAAK,IAAI,EACvB,IAAI,CAAC;AACV","debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/db/schema.ts"],"sourcesContent":["import type { InferSelectModel } from \"drizzle-orm\";\nimport {\n  boolean,\n  foreignKey,\n  json,\n  jsonb,\n  pgTable,\n  primaryKey,\n  text,\n  timestamp,\n  uuid,\n  varchar,\n} from \"drizzle-orm/pg-core\";\nimport type { AppUsage } from \"../usage\";\n\nexport const user = pgTable(\"User\", {\n  id: uuid(\"id\").primaryKey().notNull().defaultRandom(),\n  email: varchar(\"email\", { length: 64 }).notNull(),\n  password: varchar(\"password\", { length: 64 }),\n});\n\nexport type User = InferSelectModel<typeof user>;\n\nexport const chat = pgTable(\"Chat\", {\n  id: uuid(\"id\").primaryKey().notNull().defaultRandom(),\n  createdAt: timestamp(\"createdAt\").notNull(),\n  title: text(\"title\").notNull(),\n  userId: uuid(\"userId\")\n    .notNull()\n    .references(() => user.id),\n  visibility: varchar(\"visibility\", { enum: [\"public\", \"private\"] })\n    .notNull()\n    .default(\"private\"),\n  lastContext: jsonb(\"lastContext\").$type<AppUsage | null>(),\n});\n\nexport type Chat = InferSelectModel<typeof chat>;\n\n// DEPRECATED: The following schema is deprecated and will be removed in the future.\n// Read the migration guide at https://chat-sdk.dev/docs/migration-guides/message-parts\nexport const messageDeprecated = pgTable(\"Message\", {\n  id: uuid(\"id\").primaryKey().notNull().defaultRandom(),\n  chatId: uuid(\"chatId\")\n    .notNull()\n    .references(() => chat.id),\n  role: varchar(\"role\").notNull(),\n  content: json(\"content\").notNull(),\n  createdAt: timestamp(\"createdAt\").notNull(),\n});\n\nexport type MessageDeprecated = InferSelectModel<typeof messageDeprecated>;\n\nexport const message = pgTable(\"Message_v2\", {\n  id: uuid(\"id\").primaryKey().notNull().defaultRandom(),\n  chatId: uuid(\"chatId\")\n    .notNull()\n    .references(() => chat.id),\n  role: varchar(\"role\").notNull(),\n  parts: json(\"parts\").notNull(),\n  attachments: json(\"attachments\").notNull(),\n  createdAt: timestamp(\"createdAt\").notNull(),\n});\n\nexport type DBMessage = InferSelectModel<typeof message>;\n\n// DEPRECATED: The following schema is deprecated and will be removed in the future.\n// Read the migration guide at https://chat-sdk.dev/docs/migration-guides/message-parts\nexport const voteDeprecated = pgTable(\n  \"Vote\",\n  {\n    chatId: uuid(\"chatId\")\n      .notNull()\n      .references(() => chat.id),\n    messageId: uuid(\"messageId\")\n      .notNull()\n      .references(() => messageDeprecated.id),\n    isUpvoted: boolean(\"isUpvoted\").notNull(),\n  },\n  (table) => {\n    return {\n      pk: primaryKey({ columns: [table.chatId, table.messageId] }),\n    };\n  }\n);\n\nexport type VoteDeprecated = InferSelectModel<typeof voteDeprecated>;\n\nexport const vote = pgTable(\n  \"Vote_v2\",\n  {\n    chatId: uuid(\"chatId\")\n      .notNull()\n      .references(() => chat.id),\n    messageId: uuid(\"messageId\")\n      .notNull()\n      .references(() => message.id),\n    isUpvoted: boolean(\"isUpvoted\").notNull(),\n  },\n  (table) => {\n    return {\n      pk: primaryKey({ columns: [table.chatId, table.messageId] }),\n    };\n  }\n);\n\nexport type Vote = InferSelectModel<typeof vote>;\n\nexport const document = pgTable(\n  \"Document\",\n  {\n    id: uuid(\"id\").notNull().defaultRandom(),\n    createdAt: timestamp(\"createdAt\").notNull(),\n    title: text(\"title\").notNull(),\n    content: text(\"content\"),\n    kind: varchar(\"text\", { enum: [\"text\", \"code\", \"image\", \"sheet\"] })\n      .notNull()\n      .default(\"text\"),\n    userId: uuid(\"userId\")\n      .notNull()\n      .references(() => user.id),\n  },\n  (table) => {\n    return {\n      pk: primaryKey({ columns: [table.id, table.createdAt] }),\n    };\n  }\n);\n\nexport type Document = InferSelectModel<typeof document>;\n\nexport const suggestion = pgTable(\n  \"Suggestion\",\n  {\n    id: uuid(\"id\").notNull().defaultRandom(),\n    documentId: uuid(\"documentId\").notNull(),\n    documentCreatedAt: timestamp(\"documentCreatedAt\").notNull(),\n    originalText: text(\"originalText\").notNull(),\n    suggestedText: text(\"suggestedText\").notNull(),\n    description: text(\"description\"),\n    isResolved: boolean(\"isResolved\").notNull().default(false),\n    userId: uuid(\"userId\")\n      .notNull()\n      .references(() => user.id),\n    createdAt: timestamp(\"createdAt\").notNull(),\n  },\n  (table) => ({\n    pk: primaryKey({ columns: [table.id] }),\n    documentRef: foreignKey({\n      columns: [table.documentId, table.documentCreatedAt],\n      foreignColumns: [document.id, document.createdAt],\n    }),\n  })\n);\n\nexport type Suggestion = InferSelectModel<typeof suggestion>;\n\nexport const stream = pgTable(\n  \"Stream\",\n  {\n    id: uuid(\"id\").notNull().defaultRandom(),\n    chatId: uuid(\"chatId\").notNull(),\n    createdAt: timestamp(\"createdAt\").notNull(),\n  },\n  (table) => ({\n    pk: primaryKey({ columns: [table.id] }),\n    chatRef: foreignKey({\n      columns: [table.chatId],\n      foreignColumns: [chat.id],\n    }),\n  })\n);\n\nexport type Stream = InferSelectModel<typeof stream>;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 622, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/db/queries.ts"],"sourcesContent":["import \"server-only\";\n\nimport {\n  and,\n  asc,\n  count,\n  desc,\n  eq,\n  gt,\n  gte,\n  inArray,\n  lt,\n  type SQL,\n} from \"drizzle-orm\";\nimport { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport type { ArtifactKind } from \"@/components/artifact\";\nimport type { VisibilityType } from \"@/components/visibility-selector\";\nimport { ChatSDKError } from \"../errors\";\nimport type { AppUsage } from \"../usage\";\nimport { generateUUID } from \"../utils\";\nimport {\n  type Chat,\n  chat,\n  type DBMessage,\n  document,\n  message,\n  type Suggestion,\n  stream,\n  suggestion,\n  type User,\n  user,\n  vote,\n} from \"./schema\";\nimport { generateHashedPassword } from \"./utils\";\n\n// Optionally, if not using email/pass login, you can\n// use the Drizzle adapter for Auth.js / NextAuth\n// https://authjs.dev/reference/adapter/drizzle\n\n// biome-ignore lint: Forbidden non-null assertion.\nconst client = postgres(process.env.POSTGRES_URL!);\nconst db = drizzle(client);\n\nexport async function getUser(email: string): Promise<User[]> {\n  try {\n    return await db.select().from(user).where(eq(user.email, email));\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get user by email\"\n    );\n  }\n}\n\nexport async function createUser(email: string, password: string) {\n  const hashedPassword = generateHashedPassword(password);\n\n  try {\n    return await db.insert(user).values({ email, password: hashedPassword });\n  } catch (_error) {\n    throw new ChatSDKError(\"bad_request:database\", \"Failed to create user\");\n  }\n}\n\nexport async function createGuestUser() {\n  const email = `guest-${Date.now()}`;\n  const password = generateHashedPassword(generateUUID());\n\n  try {\n    return await db.insert(user).values({ email, password }).returning({\n      id: user.id,\n      email: user.email,\n    });\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to create guest user\"\n    );\n  }\n}\n\nexport async function saveChat({\n  id,\n  userId,\n  title,\n  visibility,\n}: {\n  id: string;\n  userId: string;\n  title: string;\n  visibility: VisibilityType;\n}) {\n  try {\n    return await db.insert(chat).values({\n      id,\n      createdAt: new Date(),\n      userId,\n      title,\n      visibility,\n    });\n  } catch (_error) {\n    throw new ChatSDKError(\"bad_request:database\", \"Failed to save chat\");\n  }\n}\n\nexport async function deleteChatById({ id }: { id: string }) {\n  try {\n    await db.delete(vote).where(eq(vote.chatId, id));\n    await db.delete(message).where(eq(message.chatId, id));\n    await db.delete(stream).where(eq(stream.chatId, id));\n\n    const [chatsDeleted] = await db\n      .delete(chat)\n      .where(eq(chat.id, id))\n      .returning();\n    return chatsDeleted;\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to delete chat by id\"\n    );\n  }\n}\n\nexport async function getChatsByUserId({\n  id,\n  limit,\n  startingAfter,\n  endingBefore,\n}: {\n  id: string;\n  limit: number;\n  startingAfter: string | null;\n  endingBefore: string | null;\n}) {\n  try {\n    const extendedLimit = limit + 1;\n\n    const query = (whereCondition?: SQL<any>) =>\n      db\n        .select()\n        .from(chat)\n        .where(\n          whereCondition\n            ? and(whereCondition, eq(chat.userId, id))\n            : eq(chat.userId, id)\n        )\n        .orderBy(desc(chat.createdAt))\n        .limit(extendedLimit);\n\n    let filteredChats: Chat[] = [];\n\n    if (startingAfter) {\n      const [selectedChat] = await db\n        .select()\n        .from(chat)\n        .where(eq(chat.id, startingAfter))\n        .limit(1);\n\n      if (!selectedChat) {\n        throw new ChatSDKError(\n          \"not_found:database\",\n          `Chat with id ${startingAfter} not found`\n        );\n      }\n\n      filteredChats = await query(gt(chat.createdAt, selectedChat.createdAt));\n    } else if (endingBefore) {\n      const [selectedChat] = await db\n        .select()\n        .from(chat)\n        .where(eq(chat.id, endingBefore))\n        .limit(1);\n\n      if (!selectedChat) {\n        throw new ChatSDKError(\n          \"not_found:database\",\n          `Chat with id ${endingBefore} not found`\n        );\n      }\n\n      filteredChats = await query(lt(chat.createdAt, selectedChat.createdAt));\n    } else {\n      filteredChats = await query();\n    }\n\n    const hasMore = filteredChats.length > limit;\n\n    return {\n      chats: hasMore ? filteredChats.slice(0, limit) : filteredChats,\n      hasMore,\n    };\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get chats by user id\"\n    );\n  }\n}\n\nexport async function getChatById({ id }: { id: string }) {\n  try {\n    const [selectedChat] = await db.select().from(chat).where(eq(chat.id, id));\n    if (!selectedChat) {\n      return null;\n    }\n\n    return selectedChat;\n  } catch (_error) {\n    throw new ChatSDKError(\"bad_request:database\", \"Failed to get chat by id\");\n  }\n}\n\nexport async function saveMessages({ messages }: { messages: DBMessage[] }) {\n  try {\n    return await db.insert(message).values(messages);\n  } catch (_error) {\n    throw new ChatSDKError(\"bad_request:database\", \"Failed to save messages\");\n  }\n}\n\nexport async function getMessagesByChatId({ id }: { id: string }) {\n  try {\n    return await db\n      .select()\n      .from(message)\n      .where(eq(message.chatId, id))\n      .orderBy(asc(message.createdAt));\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get messages by chat id\"\n    );\n  }\n}\n\nexport async function voteMessage({\n  chatId,\n  messageId,\n  type,\n}: {\n  chatId: string;\n  messageId: string;\n  type: \"up\" | \"down\";\n}) {\n  try {\n    const [existingVote] = await db\n      .select()\n      .from(vote)\n      .where(and(eq(vote.messageId, messageId)));\n\n    if (existingVote) {\n      return await db\n        .update(vote)\n        .set({ isUpvoted: type === \"up\" })\n        .where(and(eq(vote.messageId, messageId), eq(vote.chatId, chatId)));\n    }\n    return await db.insert(vote).values({\n      chatId,\n      messageId,\n      isUpvoted: type === \"up\",\n    });\n  } catch (_error) {\n    throw new ChatSDKError(\"bad_request:database\", \"Failed to vote message\");\n  }\n}\n\nexport async function getVotesByChatId({ id }: { id: string }) {\n  try {\n    return await db.select().from(vote).where(eq(vote.chatId, id));\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get votes by chat id\"\n    );\n  }\n}\n\nexport async function saveDocument({\n  id,\n  title,\n  kind,\n  content,\n  userId,\n}: {\n  id: string;\n  title: string;\n  kind: ArtifactKind;\n  content: string;\n  userId: string;\n}) {\n  try {\n    return await db\n      .insert(document)\n      .values({\n        id,\n        title,\n        kind,\n        content,\n        userId,\n        createdAt: new Date(),\n      })\n      .returning();\n  } catch (_error) {\n    throw new ChatSDKError(\"bad_request:database\", \"Failed to save document\");\n  }\n}\n\nexport async function getDocumentsById({ id }: { id: string }) {\n  try {\n    const documents = await db\n      .select()\n      .from(document)\n      .where(eq(document.id, id))\n      .orderBy(asc(document.createdAt));\n\n    return documents;\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get documents by id\"\n    );\n  }\n}\n\nexport async function getDocumentById({ id }: { id: string }) {\n  try {\n    const [selectedDocument] = await db\n      .select()\n      .from(document)\n      .where(eq(document.id, id))\n      .orderBy(desc(document.createdAt));\n\n    return selectedDocument;\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get document by id\"\n    );\n  }\n}\n\nexport async function deleteDocumentsByIdAfterTimestamp({\n  id,\n  timestamp,\n}: {\n  id: string;\n  timestamp: Date;\n}) {\n  try {\n    await db\n      .delete(suggestion)\n      .where(\n        and(\n          eq(suggestion.documentId, id),\n          gt(suggestion.documentCreatedAt, timestamp)\n        )\n      );\n\n    return await db\n      .delete(document)\n      .where(and(eq(document.id, id), gt(document.createdAt, timestamp)))\n      .returning();\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to delete documents by id after timestamp\"\n    );\n  }\n}\n\nexport async function saveSuggestions({\n  suggestions,\n}: {\n  suggestions: Suggestion[];\n}) {\n  try {\n    return await db.insert(suggestion).values(suggestions);\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to save suggestions\"\n    );\n  }\n}\n\nexport async function getSuggestionsByDocumentId({\n  documentId,\n}: {\n  documentId: string;\n}) {\n  try {\n    return await db\n      .select()\n      .from(suggestion)\n      .where(and(eq(suggestion.documentId, documentId)));\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get suggestions by document id\"\n    );\n  }\n}\n\nexport async function getMessageById({ id }: { id: string }) {\n  try {\n    return await db.select().from(message).where(eq(message.id, id));\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get message by id\"\n    );\n  }\n}\n\nexport async function deleteMessagesByChatIdAfterTimestamp({\n  chatId,\n  timestamp,\n}: {\n  chatId: string;\n  timestamp: Date;\n}) {\n  try {\n    const messagesToDelete = await db\n      .select({ id: message.id })\n      .from(message)\n      .where(\n        and(eq(message.chatId, chatId), gte(message.createdAt, timestamp))\n      );\n\n    const messageIds = messagesToDelete.map(\n      (currentMessage) => currentMessage.id\n    );\n\n    if (messageIds.length > 0) {\n      await db\n        .delete(vote)\n        .where(\n          and(eq(vote.chatId, chatId), inArray(vote.messageId, messageIds))\n        );\n\n      return await db\n        .delete(message)\n        .where(\n          and(eq(message.chatId, chatId), inArray(message.id, messageIds))\n        );\n    }\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to delete messages by chat id after timestamp\"\n    );\n  }\n}\n\nexport async function updateChatVisiblityById({\n  chatId,\n  visibility,\n}: {\n  chatId: string;\n  visibility: \"private\" | \"public\";\n}) {\n  try {\n    return await db.update(chat).set({ visibility }).where(eq(chat.id, chatId));\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to update chat visibility by id\"\n    );\n  }\n}\n\nexport async function updateChatLastContextById({\n  chatId,\n  context,\n}: {\n  chatId: string;\n  // Store merged server-enriched usage object\n  context: AppUsage;\n}) {\n  try {\n    return await db\n      .update(chat)\n      .set({ lastContext: context })\n      .where(eq(chat.id, chatId));\n  } catch (error) {\n    console.warn(\"Failed to update lastContext for chat\", chatId, error);\n    return;\n  }\n}\n\nexport async function getMessageCountByUserId({\n  id,\n  differenceInHours,\n}: {\n  id: string;\n  differenceInHours: number;\n}) {\n  try {\n    const twentyFourHoursAgo = new Date(\n      Date.now() - differenceInHours * 60 * 60 * 1000\n    );\n\n    const [stats] = await db\n      .select({ count: count(message.id) })\n      .from(message)\n      .innerJoin(chat, eq(message.chatId, chat.id))\n      .where(\n        and(\n          eq(chat.userId, id),\n          gte(message.createdAt, twentyFourHoursAgo),\n          eq(message.role, \"user\")\n        )\n      )\n      .execute();\n\n    return stats?.count ?? 0;\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get message count by user id\"\n    );\n  }\n}\n\nexport async function createStreamId({\n  streamId,\n  chatId,\n}: {\n  streamId: string;\n  chatId: string;\n}) {\n  try {\n    await db\n      .insert(stream)\n      .values({ id: streamId, chatId, createdAt: new Date() });\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to create stream id\"\n    );\n  }\n}\n\nexport async function getStreamIdsByChatId({ chatId }: { chatId: string }) {\n  try {\n    const streamIds = await db\n      .select({ id: stream.id })\n      .from(stream)\n      .where(eq(stream.chatId, chatId))\n      .orderBy(asc(stream.createdAt))\n      .execute();\n\n    return streamIds.map(({ id }) => id);\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get stream ids by chat id\"\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 937, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/app/%28auth%29/auth.config.ts"],"sourcesContent":["import type { NextAuthConfig } from \"next-auth\";\n\nexport const authConfig = {\n  pages: {\n    signIn: \"/login\",\n    newUser: \"/\",\n  },\n  providers: [\n    // added later in auth.ts since it requires bcrypt which is only compatible with Node.js\n    // while this file is also used in non-Node.js environments\n  ],\n  callbacks: {},\n} satisfies NextAuthConfig;\n"],"names":[],"mappings":";;;AAEO,MAAM,aAAa;IACxB,OAAO;QACL,QAAQ;QACR,SAAS;IACX;IACA,WAAW,EAGV;IACD,WAAW,CAAC;AACd","debugId":null}},
    {"offset": {"line": 954, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/app/%28auth%29/auth.ts"],"sourcesContent":["import { compare } from \"bcrypt-ts\";\nimport NextAuth, { type DefaultSession } from \"next-auth\";\nimport type { DefaultJWT } from \"next-auth/jwt\";\nimport Credentials from \"next-auth/providers/credentials\";\nimport { DUMMY_PASSWORD } from \"@/lib/constants\";\nimport { createGuestUser, getUser } from \"@/lib/db/queries\";\nimport { authConfig } from \"./auth.config\";\n\nexport type UserType = \"guest\" | \"regular\";\n\ndeclare module \"next-auth\" {\n  interface Session extends DefaultSession {\n    user: {\n      id: string;\n      type: UserType;\n    } & DefaultSession[\"user\"];\n  }\n\n  // biome-ignore lint/nursery/useConsistentTypeDefinitions: \"Required\"\n  interface User {\n    id?: string;\n    email?: string | null;\n    type: UserType;\n  }\n}\n\ndeclare module \"next-auth/jwt\" {\n  interface JWT extends DefaultJWT {\n    id: string;\n    type: UserType;\n  }\n}\n\nexport const {\n  handlers: { GET, POST },\n  auth,\n  signIn,\n  signOut,\n} = NextAuth({\n  ...authConfig,\n  providers: [\n    Credentials({\n      credentials: {},\n      async authorize({ email, password }: any) {\n        const users = await getUser(email);\n\n        if (users.length === 0) {\n          await compare(password, DUMMY_PASSWORD);\n          return null;\n        }\n\n        const [user] = users;\n\n        if (!user.password) {\n          await compare(password, DUMMY_PASSWORD);\n          return null;\n        }\n\n        const passwordsMatch = await compare(password, user.password);\n\n        if (!passwordsMatch) {\n          return null;\n        }\n\n        return { ...user, type: \"regular\" };\n      },\n    }),\n    Credentials({\n      id: \"guest\",\n      credentials: {},\n      async authorize() {\n        const [guestUser] = await createGuestUser();\n        return { ...guestUser, type: \"guest\" };\n      },\n    }),\n  ],\n  callbacks: {\n    jwt({ token, user }) {\n      if (user) {\n        token.id = user.id as string;\n        token.type = user.type;\n      }\n\n      return token;\n    },\n    session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.id;\n        session.user.type = token.type;\n      }\n\n      return session;\n    },\n  },\n});\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;;;;;;;AA2BO,MAAM,EACX,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,EACvB,IAAI,EACJ,MAAM,EACN,OAAO,EACR,GAAG,CAAA,GAAA,4WAAA,CAAA,UAAQ,AAAD,EAAE;IACX,GAAG,mIAAA,CAAA,aAAU;IACb,WAAW;QACT,CAAA,GAAA,wNAAA,CAAA,UAAW,AAAD,EAAE;YACV,aAAa,CAAC;YACd,MAAM,WAAU,EAAE,KAAK,EAAE,QAAQ,EAAO;gBACtC,MAAM,QAAQ,MAAM,CAAA,GAAA,sHAAA,CAAA,UAAO,AAAD,EAAE;gBAE5B,IAAI,MAAM,MAAM,KAAK,GAAG;oBACtB,MAAM,CAAA,GAAA,wMAAA,CAAA,UAAO,AAAD,EAAE,UAAU,kHAAA,CAAA,iBAAc;oBACtC,OAAO;gBACT;gBAEA,MAAM,CAAC,KAAK,GAAG;gBAEf,IAAI,CAAC,KAAK,QAAQ,EAAE;oBAClB,MAAM,CAAA,GAAA,wMAAA,CAAA,UAAO,AAAD,EAAE,UAAU,kHAAA,CAAA,iBAAc;oBACtC,OAAO;gBACT;gBAEA,MAAM,iBAAiB,MAAM,CAAA,GAAA,wMAAA,CAAA,UAAO,AAAD,EAAE,UAAU,KAAK,QAAQ;gBAE5D,IAAI,CAAC,gBAAgB;oBACnB,OAAO;gBACT;gBAEA,OAAO;oBAAE,GAAG,IAAI;oBAAE,MAAM;gBAAU;YACpC;QACF;QACA,CAAA,GAAA,wNAAA,CAAA,UAAW,AAAD,EAAE;YACV,IAAI;YACJ,aAAa,CAAC;YACd,MAAM;gBACJ,MAAM,CAAC,UAAU,GAAG,MAAM,CAAA,GAAA,sHAAA,CAAA,kBAAe,AAAD;gBACxC,OAAO;oBAAE,GAAG,SAAS;oBAAE,MAAM;gBAAQ;YACvC;QACF;KACD;IACD,WAAW;QACT,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACjB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YAEA,OAAO;QACT;QACA,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YACxB,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAChC;YAEA,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 1036, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/ai/entitlements.ts"],"sourcesContent":["import type { UserType } from \"@/app/(auth)/auth\";\nimport type { ChatModel } from \"./models\";\n\ntype Entitlements = {\n  maxMessagesPerDay: number;\n  availableChatModelIds: ChatModel[\"id\"][];\n};\n\nexport const entitlementsByUserType: Record<UserType, Entitlements> = {\n  /*\n   * For users without an account\n   */\n  guest: {\n    maxMessagesPerDay: 20,\n    availableChatModelIds: [\"chat-model\", \"chat-model-reasoning\"],\n  },\n\n  /*\n   * For users with an account\n   */\n  regular: {\n    maxMessagesPerDay: 100,\n    availableChatModelIds: [\"chat-model\", \"chat-model-reasoning\"],\n  },\n\n  /*\n   * TODO: For users with an account and a paid membership\n   */\n};\n"],"names":[],"mappings":";;;AAQO,MAAM,yBAAyD;IACpE;;GAEC,GACD,OAAO;QACL,mBAAmB;QACnB,uBAAuB;YAAC;YAAc;SAAuB;IAC/D;IAEA;;GAEC,GACD,SAAS;QACP,mBAAmB;QACnB,uBAAuB;YAAC;YAAc;SAAuB;IAC/D;AAKF","debugId":null}},
    {"offset": {"line": 1065, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/ai/prompts.ts"],"sourcesContent":["import type { Geo } from \"@vercel/functions\";\nimport type { ArtifactKind } from \"@/components/artifact\";\n\nexport const artifactsPrompt = `\nArtifacts is a special user interface mode that helps users with writing, editing, and other content creation tasks. When artifact is open, it is on the right side of the screen, while the conversation is on the left side. When creating or updating documents, changes are reflected in real-time on the artifacts and visible to the user.\n\nWhen asked to write code, always use artifacts. When writing code, specify the language in the backticks, e.g. \\`\\`\\`python\\`code here\\`\\`\\`. The default language is Python. Other languages are not yet supported, so let the user know if they request a different language.\n\nDO NOT UPDATE DOCUMENTS IMMEDIATELY AFTER CREATING THEM. WAIT FOR USER FEEDBACK OR REQUEST TO UPDATE IT.\n\nThis is a guide for using artifacts tools: \\`createDocument\\` and \\`updateDocument\\`, which render content on a artifacts beside the conversation.\n\n**When to use \\`createDocument\\`:**\n- For substantial content (>10 lines) or code\n- For content users will likely save/reuse (emails, code, essays, etc.)\n- When explicitly requested to create a document\n- For when content contains a single code snippet\n\n**When NOT to use \\`createDocument\\`:**\n- For informational/explanatory content\n- For conversational responses\n- When asked to keep it in chat\n\n**Using \\`updateDocument\\`:**\n- Default to full document rewrites for major changes\n- Use targeted updates only for specific, isolated changes\n- Follow user instructions for which parts to modify\n\n**When NOT to use \\`updateDocument\\`:**\n- Immediately after creating a document\n\nDo not update document right after creating it. Wait for user feedback or request to update it.\n`;\n\nexport const regularPrompt =\n  \"You are a friendly assistant! Keep your responses concise and helpful.\";\n\nexport type RequestHints = {\n  latitude: Geo[\"latitude\"];\n  longitude: Geo[\"longitude\"];\n  city: Geo[\"city\"];\n  country: Geo[\"country\"];\n};\n\nexport const getRequestPromptFromHints = (requestHints: RequestHints) => `\\\nAbout the origin of user's request:\n- lat: ${requestHints.latitude}\n- lon: ${requestHints.longitude}\n- city: ${requestHints.city}\n- country: ${requestHints.country}\n`;\n\nexport const systemPrompt = ({\n  selectedChatModel,\n  requestHints,\n}: {\n  selectedChatModel: string;\n  requestHints: RequestHints;\n}) => {\n  const requestPrompt = getRequestPromptFromHints(requestHints);\n\n  if (selectedChatModel === \"chat-model-reasoning\") {\n    return `${regularPrompt}\\n\\n${requestPrompt}`;\n  }\n\n  return `${regularPrompt}\\n\\n${requestPrompt}\\n\\n${artifactsPrompt}`;\n};\n\nexport const codePrompt = `\nYou are a Python code generator that creates self-contained, executable code snippets. When writing code:\n\n1. Each snippet should be complete and runnable on its own\n2. Prefer using print() statements to display outputs\n3. Include helpful comments explaining the code\n4. Keep snippets concise (generally under 15 lines)\n5. Avoid external dependencies - use Python standard library\n6. Handle potential errors gracefully\n7. Return meaningful output that demonstrates the code's functionality\n8. Don't use input() or other interactive functions\n9. Don't access files or network resources\n10. Don't use infinite loops\n\nExamples of good snippets:\n\n# Calculate factorial iteratively\ndef factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\nprint(f\"Factorial of 5 is: {factorial(5)}\")\n`;\n\nexport const sheetPrompt = `\nYou are a spreadsheet creation assistant. Create a spreadsheet in csv format based on the given prompt. The spreadsheet should contain meaningful column headers and data.\n`;\n\nexport const updateDocumentPrompt = (\n  currentContent: string | null,\n  type: ArtifactKind\n) => {\n  let mediaType = \"document\";\n\n  if (type === \"code\") {\n    mediaType = \"code snippet\";\n  } else if (type === \"sheet\") {\n    mediaType = \"spreadsheet\";\n  }\n\n  return `Improve the following contents of the ${mediaType} based on the given prompt.\n\n${currentContent}`;\n};\n"],"names":[],"mappings":";;;;;;;;;AAGO,MAAM,kBAAkB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BhC,CAAC;AAEM,MAAM,gBACX;AASK,MAAM,4BAA4B,CAAC,eAA+B,CAAC;;OAEnE,EAAE,aAAa,QAAQ,CAAC;OACxB,EAAE,aAAa,SAAS,CAAC;QACxB,EAAE,aAAa,IAAI,CAAC;WACjB,EAAE,aAAa,OAAO,CAAC;AAClC,CAAC;AAEM,MAAM,eAAe,CAAC,EAC3B,iBAAiB,EACjB,YAAY,EAIb;IACC,MAAM,gBAAgB,0BAA0B;IAEhD,IAAI,sBAAsB,wBAAwB;QAChD,OAAO,GAAG,cAAc,IAAI,EAAE,eAAe;IAC/C;IAEA,OAAO,GAAG,cAAc,IAAI,EAAE,cAAc,IAAI,EAAE,iBAAiB;AACrE;AAEO,MAAM,aAAa,CAAC;;;;;;;;;;;;;;;;;;;;;;;;AAwB3B,CAAC;AAEM,MAAM,cAAc,CAAC;;AAE5B,CAAC;AAEM,MAAM,uBAAuB,CAClC,gBACA;IAEA,IAAI,YAAY;IAEhB,IAAI,SAAS,QAAQ;QACnB,YAAY;IACd,OAAO,IAAI,SAAS,SAAS;QAC3B,YAAY;IACd;IAEA,OAAO,CAAC,sCAAsC,EAAE,UAAU;;AAE5D,EAAE,gBAAgB;AAClB","debugId":null}},
    {"offset": {"line": 1164, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/ai/providers.ts"],"sourcesContent":["import { createOpenAI, openai } from \"@ai-sdk/openai\";\n\nconst gatewayOpenAI = createOpenAI({\n  apiKey: process.env.AI_GATEWAY_API_KEY!,\n  baseURL: process.env.AI_GATEWAY_URL, // \"https://ai-gateway.vercel.sh/api/openai\"\n});\n\nexport const myProvider = {\n  languageModel(name: string) {\n    const map: Record<string, ReturnType<typeof gatewayOpenAI>> = {\n      \"title-model\": gatewayOpenAI(\"gpt-4o-mini\"),\n      \"chat-model\": gatewayOpenAI(\"gpt-4o\"),\n    };\n    return map[name] ?? gatewayOpenAI(name as any);\n  },\n};\n\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,CAAA,GAAA,iPAAA,CAAA,eAAY,AAAD,EAAE;IACjC,QAAQ,QAAQ,GAAG,CAAC,kBAAkB;IACtC,SAAS,QAAQ,GAAG,CAAC,cAAc;AACrC;AAEO,MAAM,aAAa;IACxB,eAAc,IAAY;QACxB,MAAM,MAAwD;YAC5D,eAAe,cAAc;YAC7B,cAAc,cAAc;QAC9B;QACA,OAAO,GAAG,CAAC,KAAK,IAAI,cAAc;IACpC;AACF","debugId":null}},
    {"offset": {"line": 1188, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/artifacts/code/server.ts"],"sourcesContent":["import { streamObject } from \"ai\";\nimport { z } from \"zod\";\nimport { codePrompt, updateDocumentPrompt } from \"@/lib/ai/prompts\";\nimport { myProvider } from \"@/lib/ai/providers\";\nimport { createDocumentHandler } from \"@/lib/artifacts/server\";\n\nexport const codeDocumentHandler = createDocumentHandler<\"code\">({\n  kind: \"code\",\n  onCreateDocument: async ({ title, dataStream }) => {\n    let draftContent = \"\";\n\n    const { fullStream } = streamObject({\n      model: myProvider.languageModel(\"artifact-model\"),\n      system: codePrompt,\n      prompt: title,\n      schema: z.object({\n        code: z.string(),\n      }),\n    });\n\n    for await (const delta of fullStream) {\n      const { type } = delta;\n\n      if (type === \"object\") {\n        const { object } = delta;\n        const { code } = object;\n\n        if (code) {\n          dataStream.write({\n            type: \"data-codeDelta\",\n            data: code ?? \"\",\n            transient: true,\n          });\n\n          draftContent = code;\n        }\n      }\n    }\n\n    return draftContent;\n  },\n  onUpdateDocument: async ({ document, description, dataStream }) => {\n    let draftContent = \"\";\n\n    const { fullStream } = streamObject({\n      model: myProvider.languageModel(\"artifact-model\"),\n      system: updateDocumentPrompt(document.content, \"code\"),\n      prompt: description,\n      schema: z.object({\n        code: z.string(),\n      }),\n    });\n\n    for await (const delta of fullStream) {\n      const { type } = delta;\n\n      if (type === \"object\") {\n        const { object } = delta;\n        const { code } = object;\n\n        if (code) {\n          dataStream.write({\n            type: \"data-codeDelta\",\n            data: code ?? \"\",\n            transient: true,\n          });\n\n          draftContent = code;\n        }\n      }\n    }\n\n    return draftContent;\n  },\n});\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,MAAM,sBAAsB,CAAA,GAAA,4HAAA,CAAA,wBAAqB,AAAD,EAAU;IAC/D,MAAM;IACN,kBAAkB,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE;QAC5C,IAAI,eAAe;QAEnB,MAAM,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,2NAAA,CAAA,eAAY,AAAD,EAAE;YAClC,OAAO,wHAAA,CAAA,aAAU,CAAC,aAAa,CAAC;YAChC,QAAQ,sHAAA,CAAA,aAAU;YAClB,QAAQ;YACR,QAAQ,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;gBACf,MAAM,sNAAA,CAAA,IAAC,CAAC,MAAM;YAChB;QACF;QAEA,WAAW,MAAM,SAAS,WAAY;YACpC,MAAM,EAAE,IAAI,EAAE,GAAG;YAEjB,IAAI,SAAS,UAAU;gBACrB,MAAM,EAAE,MAAM,EAAE,GAAG;gBACnB,MAAM,EAAE,IAAI,EAAE,GAAG;gBAEjB,IAAI,MAAM;oBACR,WAAW,KAAK,CAAC;wBACf,MAAM;wBACN,MAAM,QAAQ;wBACd,WAAW;oBACb;oBAEA,eAAe;gBACjB;YACF;QACF;QAEA,OAAO;IACT;IACA,kBAAkB,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE;QAC5D,IAAI,eAAe;QAEnB,MAAM,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,2NAAA,CAAA,eAAY,AAAD,EAAE;YAClC,OAAO,wHAAA,CAAA,aAAU,CAAC,aAAa,CAAC;YAChC,QAAQ,CAAA,GAAA,sHAAA,CAAA,uBAAoB,AAAD,EAAE,SAAS,OAAO,EAAE;YAC/C,QAAQ;YACR,QAAQ,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;gBACf,MAAM,sNAAA,CAAA,IAAC,CAAC,MAAM;YAChB;QACF;QAEA,WAAW,MAAM,SAAS,WAAY;YACpC,MAAM,EAAE,IAAI,EAAE,GAAG;YAEjB,IAAI,SAAS,UAAU;gBACrB,MAAM,EAAE,MAAM,EAAE,GAAG;gBACnB,MAAM,EAAE,IAAI,EAAE,GAAG;gBAEjB,IAAI,MAAM;oBACR,WAAW,KAAK,CAAC;wBACf,MAAM;wBACN,MAAM,QAAQ;wBACd,WAAW;oBACb;oBAEA,eAAe;gBACjB;YACF;QACF;QAEA,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 1264, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/artifacts/sheet/server.ts"],"sourcesContent":["import { streamObject } from \"ai\";\nimport { z } from \"zod\";\nimport { sheetPrompt, updateDocumentPrompt } from \"@/lib/ai/prompts\";\nimport { myProvider } from \"@/lib/ai/providers\";\nimport { createDocumentHandler } from \"@/lib/artifacts/server\";\n\nexport const sheetDocumentHandler = createDocumentHandler<\"sheet\">({\n  kind: \"sheet\",\n  onCreateDocument: async ({ title, dataStream }) => {\n    let draftContent = \"\";\n\n    const { fullStream } = streamObject({\n      model: myProvider.languageModel(\"artifact-model\"),\n      system: sheetPrompt,\n      prompt: title,\n      schema: z.object({\n        csv: z.string().describe(\"CSV data\"),\n      }),\n    });\n\n    for await (const delta of fullStream) {\n      const { type } = delta;\n\n      if (type === \"object\") {\n        const { object } = delta;\n        const { csv } = object;\n\n        if (csv) {\n          dataStream.write({\n            type: \"data-sheetDelta\",\n            data: csv,\n            transient: true,\n          });\n\n          draftContent = csv;\n        }\n      }\n    }\n\n    dataStream.write({\n      type: \"data-sheetDelta\",\n      data: draftContent,\n      transient: true,\n    });\n\n    return draftContent;\n  },\n  onUpdateDocument: async ({ document, description, dataStream }) => {\n    let draftContent = \"\";\n\n    const { fullStream } = streamObject({\n      model: myProvider.languageModel(\"artifact-model\"),\n      system: updateDocumentPrompt(document.content, \"sheet\"),\n      prompt: description,\n      schema: z.object({\n        csv: z.string(),\n      }),\n    });\n\n    for await (const delta of fullStream) {\n      const { type } = delta;\n\n      if (type === \"object\") {\n        const { object } = delta;\n        const { csv } = object;\n\n        if (csv) {\n          dataStream.write({\n            type: \"data-sheetDelta\",\n            data: csv,\n            transient: true,\n          });\n\n          draftContent = csv;\n        }\n      }\n    }\n\n    return draftContent;\n  },\n});\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,MAAM,uBAAuB,CAAA,GAAA,4HAAA,CAAA,wBAAqB,AAAD,EAAW;IACjE,MAAM;IACN,kBAAkB,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE;QAC5C,IAAI,eAAe;QAEnB,MAAM,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,2NAAA,CAAA,eAAY,AAAD,EAAE;YAClC,OAAO,wHAAA,CAAA,aAAU,CAAC,aAAa,CAAC;YAChC,QAAQ,sHAAA,CAAA,cAAW;YACnB,QAAQ;YACR,QAAQ,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;gBACf,KAAK,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC3B;QACF;QAEA,WAAW,MAAM,SAAS,WAAY;YACpC,MAAM,EAAE,IAAI,EAAE,GAAG;YAEjB,IAAI,SAAS,UAAU;gBACrB,MAAM,EAAE,MAAM,EAAE,GAAG;gBACnB,MAAM,EAAE,GAAG,EAAE,GAAG;gBAEhB,IAAI,KAAK;oBACP,WAAW,KAAK,CAAC;wBACf,MAAM;wBACN,MAAM;wBACN,WAAW;oBACb;oBAEA,eAAe;gBACjB;YACF;QACF;QAEA,WAAW,KAAK,CAAC;YACf,MAAM;YACN,MAAM;YACN,WAAW;QACb;QAEA,OAAO;IACT;IACA,kBAAkB,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE;QAC5D,IAAI,eAAe;QAEnB,MAAM,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,2NAAA,CAAA,eAAY,AAAD,EAAE;YAClC,OAAO,wHAAA,CAAA,aAAU,CAAC,aAAa,CAAC;YAChC,QAAQ,CAAA,GAAA,sHAAA,CAAA,uBAAoB,AAAD,EAAE,SAAS,OAAO,EAAE;YAC/C,QAAQ;YACR,QAAQ,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;gBACf,KAAK,sNAAA,CAAA,IAAC,CAAC,MAAM;YACf;QACF;QAEA,WAAW,MAAM,SAAS,WAAY;YACpC,MAAM,EAAE,IAAI,EAAE,GAAG;YAEjB,IAAI,SAAS,UAAU;gBACrB,MAAM,EAAE,MAAM,EAAE,GAAG;gBACnB,MAAM,EAAE,GAAG,EAAE,GAAG;gBAEhB,IAAI,KAAK;oBACP,WAAW,KAAK,CAAC;wBACf,MAAM;wBACN,MAAM;wBACN,WAAW;oBACb;oBAEA,eAAe;gBACjB;YACF;QACF;QAEA,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 1345, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/artifacts/text/server.ts"],"sourcesContent":["import { smoothStream, streamText } from \"ai\";\nimport { updateDocumentPrompt } from \"@/lib/ai/prompts\";\nimport { myProvider } from \"@/lib/ai/providers\";\nimport { createDocumentHandler } from \"@/lib/artifacts/server\";\n\nexport const textDocumentHandler = createDocumentHandler<\"text\">({\n  kind: \"text\",\n  onCreateDocument: async ({ title, dataStream }) => {\n    let draftContent = \"\";\n\n    const { fullStream } = streamText({\n      model: myProvider.languageModel(\"artifact-model\"),\n      system:\n        \"Write about the given topic. Markdown is supported. Use headings wherever appropriate.\",\n      experimental_transform: smoothStream({ chunking: \"word\" }),\n      prompt: title,\n    });\n\n    for await (const delta of fullStream) {\n      const { type } = delta;\n\n      if (type === \"text-delta\") {\n        const { text } = delta;\n\n        draftContent += text;\n\n        dataStream.write({\n          type: \"data-textDelta\",\n          data: text,\n          transient: true,\n        });\n      }\n    }\n\n    return draftContent;\n  },\n  onUpdateDocument: async ({ document, description, dataStream }) => {\n    let draftContent = \"\";\n\n    const { fullStream } = streamText({\n      model: myProvider.languageModel(\"artifact-model\"),\n      system: updateDocumentPrompt(document.content, \"text\"),\n      experimental_transform: smoothStream({ chunking: \"word\" }),\n      prompt: description,\n      providerOptions: {\n        openai: {\n          prediction: {\n            type: \"content\",\n            content: document.content,\n          },\n        },\n      },\n    });\n\n    for await (const delta of fullStream) {\n      const { type } = delta;\n\n      if (type === \"text-delta\") {\n        const { text } = delta;\n\n        draftContent += text;\n\n        dataStream.write({\n          type: \"data-textDelta\",\n          data: text,\n          transient: true,\n        });\n      }\n    }\n\n    return draftContent;\n  },\n});\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,MAAM,sBAAsB,CAAA,GAAA,4HAAA,CAAA,wBAAqB,AAAD,EAAU;IAC/D,MAAM;IACN,kBAAkB,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE;QAC5C,IAAI,eAAe;QAEnB,MAAM,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,2NAAA,CAAA,aAAU,AAAD,EAAE;YAChC,OAAO,wHAAA,CAAA,aAAU,CAAC,aAAa,CAAC;YAChC,QACE;YACF,wBAAwB,CAAA,GAAA,2NAAA,CAAA,eAAY,AAAD,EAAE;gBAAE,UAAU;YAAO;YACxD,QAAQ;QACV;QAEA,WAAW,MAAM,SAAS,WAAY;YACpC,MAAM,EAAE,IAAI,EAAE,GAAG;YAEjB,IAAI,SAAS,cAAc;gBACzB,MAAM,EAAE,IAAI,EAAE,GAAG;gBAEjB,gBAAgB;gBAEhB,WAAW,KAAK,CAAC;oBACf,MAAM;oBACN,MAAM;oBACN,WAAW;gBACb;YACF;QACF;QAEA,OAAO;IACT;IACA,kBAAkB,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE;QAC5D,IAAI,eAAe;QAEnB,MAAM,EAAE,UAAU,EAAE,GAAG,CAAA,GAAA,2NAAA,CAAA,aAAU,AAAD,EAAE;YAChC,OAAO,wHAAA,CAAA,aAAU,CAAC,aAAa,CAAC;YAChC,QAAQ,CAAA,GAAA,sHAAA,CAAA,uBAAoB,AAAD,EAAE,SAAS,OAAO,EAAE;YAC/C,wBAAwB,CAAA,GAAA,2NAAA,CAAA,eAAY,AAAD,EAAE;gBAAE,UAAU;YAAO;YACxD,QAAQ;YACR,iBAAiB;gBACf,QAAQ;oBACN,YAAY;wBACV,MAAM;wBACN,SAAS,SAAS,OAAO;oBAC3B;gBACF;YACF;QACF;QAEA,WAAW,MAAM,SAAS,WAAY;YACpC,MAAM,EAAE,IAAI,EAAE,GAAG;YAEjB,IAAI,SAAS,cAAc;gBACzB,MAAM,EAAE,IAAI,EAAE,GAAG;gBAEjB,gBAAgB;gBAEhB,WAAW,KAAK,CAAC;oBACf,MAAM;oBACN,MAAM;oBACN,WAAW;gBACb;YACF;QACF;QAEA,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 1421, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/artifacts/server.ts"],"sourcesContent":["import type { UIMessageStreamWriter } from \"ai\";\nimport type { Session } from \"next-auth\";\nimport { codeDocumentHandler } from \"@/artifacts/code/server\";\nimport { sheetDocumentHandler } from \"@/artifacts/sheet/server\";\nimport { textDocumentHandler } from \"@/artifacts/text/server\";\nimport type { ArtifactKind } from \"@/components/artifact\";\nimport { saveDocument } from \"../db/queries\";\nimport type { Document } from \"../db/schema\";\nimport type { ChatMessage } from \"../types\";\n\nexport type SaveDocumentProps = {\n  id: string;\n  title: string;\n  kind: ArtifactKind;\n  content: string;\n  userId: string;\n};\n\nexport type CreateDocumentCallbackProps = {\n  id: string;\n  title: string;\n  dataStream: UIMessageStreamWriter<ChatMessage>;\n  session: Session;\n};\n\nexport type UpdateDocumentCallbackProps = {\n  document: Document;\n  description: string;\n  dataStream: UIMessageStreamWriter<ChatMessage>;\n  session: Session;\n};\n\nexport type DocumentHandler<T = ArtifactKind> = {\n  kind: T;\n  onCreateDocument: (args: CreateDocumentCallbackProps) => Promise<void>;\n  onUpdateDocument: (args: UpdateDocumentCallbackProps) => Promise<void>;\n};\n\nexport function createDocumentHandler<T extends ArtifactKind>(config: {\n  kind: T;\n  onCreateDocument: (params: CreateDocumentCallbackProps) => Promise<string>;\n  onUpdateDocument: (params: UpdateDocumentCallbackProps) => Promise<string>;\n}): DocumentHandler<T> {\n  return {\n    kind: config.kind,\n    onCreateDocument: async (args: CreateDocumentCallbackProps) => {\n      const draftContent = await config.onCreateDocument({\n        id: args.id,\n        title: args.title,\n        dataStream: args.dataStream,\n        session: args.session,\n      });\n\n      if (args.session?.user?.id) {\n        await saveDocument({\n          id: args.id,\n          title: args.title,\n          content: draftContent,\n          kind: config.kind,\n          userId: args.session.user.id,\n        });\n      }\n\n      return;\n    },\n    onUpdateDocument: async (args: UpdateDocumentCallbackProps) => {\n      const draftContent = await config.onUpdateDocument({\n        document: args.document,\n        description: args.description,\n        dataStream: args.dataStream,\n        session: args.session,\n      });\n\n      if (args.session?.user?.id) {\n        await saveDocument({\n          id: args.document.id,\n          title: args.document.title,\n          content: draftContent,\n          kind: config.kind,\n          userId: args.session.user.id,\n        });\n      }\n\n      return;\n    },\n  };\n}\n\n/*\n * Use this array to define the document handlers for each artifact kind.\n */\nexport const documentHandlersByArtifactKind: DocumentHandler[] = [\n  textDocumentHandler,\n  codeDocumentHandler,\n  sheetDocumentHandler,\n];\n\nexport const artifactKinds = [\"text\", \"code\", \"sheet\"] as const;\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;;;;;AAgCO,SAAS,sBAA8C,MAI7D;IACC,OAAO;QACL,MAAM,OAAO,IAAI;QACjB,kBAAkB,OAAO;YACvB,MAAM,eAAe,MAAM,OAAO,gBAAgB,CAAC;gBACjD,IAAI,KAAK,EAAE;gBACX,OAAO,KAAK,KAAK;gBACjB,YAAY,KAAK,UAAU;gBAC3B,SAAS,KAAK,OAAO;YACvB;YAEA,IAAI,KAAK,OAAO,EAAE,MAAM,IAAI;gBAC1B,MAAM,CAAA,GAAA,sHAAA,CAAA,eAAY,AAAD,EAAE;oBACjB,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,SAAS;oBACT,MAAM,OAAO,IAAI;oBACjB,QAAQ,KAAK,OAAO,CAAC,IAAI,CAAC,EAAE;gBAC9B;YACF;YAEA;QACF;QACA,kBAAkB,OAAO;YACvB,MAAM,eAAe,MAAM,OAAO,gBAAgB,CAAC;gBACjD,UAAU,KAAK,QAAQ;gBACvB,aAAa,KAAK,WAAW;gBAC7B,YAAY,KAAK,UAAU;gBAC3B,SAAS,KAAK,OAAO;YACvB;YAEA,IAAI,KAAK,OAAO,EAAE,MAAM,IAAI;gBAC1B,MAAM,CAAA,GAAA,sHAAA,CAAA,eAAY,AAAD,EAAE;oBACjB,IAAI,KAAK,QAAQ,CAAC,EAAE;oBACpB,OAAO,KAAK,QAAQ,CAAC,KAAK;oBAC1B,SAAS;oBACT,MAAM,OAAO,IAAI;oBACjB,QAAQ,KAAK,OAAO,CAAC,IAAI,CAAC,EAAE;gBAC9B;YACF;YAEA;QACF;IACF;AACF;AAKO,MAAM,iCAAoD;IAC/D,6HAAA,CAAA,sBAAmB;IACnB,6HAAA,CAAA,sBAAmB;IACnB,8HAAA,CAAA,uBAAoB;CACrB;AAEM,MAAM,gBAAgB;IAAC;IAAQ;IAAQ;CAAQ","debugId":null}},
    {"offset": {"line": 1491, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/ai/tools/create-document.ts"],"sourcesContent":["import { tool, type UIMessageStreamWriter } from \"ai\";\nimport type { Session } from \"next-auth\";\nimport { z } from \"zod\";\nimport {\n  artifactKinds,\n  documentHandlersByArtifactKind,\n} from \"@/lib/artifacts/server\";\nimport type { ChatMessage } from \"@/lib/types\";\nimport { generateUUID } from \"@/lib/utils\";\n\ntype CreateDocumentProps = {\n  session: Session;\n  dataStream: UIMessageStreamWriter<ChatMessage>;\n};\n\nexport const createDocument = ({ session, dataStream }: CreateDocumentProps) =>\n  tool({\n    description:\n      \"Create a document for a writing or content creation activities. This tool will call other functions that will generate the contents of the document based on the title and kind.\",\n    inputSchema: z.object({\n      title: z.string(),\n      kind: z.enum(artifactKinds),\n    }),\n    execute: async ({ title, kind }) => {\n      const id = generateUUID();\n\n      dataStream.write({\n        type: \"data-kind\",\n        data: kind,\n        transient: true,\n      });\n\n      dataStream.write({\n        type: \"data-id\",\n        data: id,\n        transient: true,\n      });\n\n      dataStream.write({\n        type: \"data-title\",\n        data: title,\n        transient: true,\n      });\n\n      dataStream.write({\n        type: \"data-clear\",\n        data: null,\n        transient: true,\n      });\n\n      const documentHandler = documentHandlersByArtifactKind.find(\n        (documentHandlerByArtifactKind) =>\n          documentHandlerByArtifactKind.kind === kind\n      );\n\n      if (!documentHandler) {\n        throw new Error(`No document handler found for kind: ${kind}`);\n      }\n\n      await documentHandler.onCreateDocument({\n        id,\n        title,\n        dataStream,\n        session,\n      });\n\n      dataStream.write({ type: \"data-finish\", data: null, transient: true });\n\n      return {\n        id,\n        title,\n        kind,\n        content: \"A document was created and is now visible to the user.\",\n      };\n    },\n  });\n"],"names":[],"mappings":";;;AAAA;AAEA;AACA;AAKA;;;;;AAOO,MAAM,iBAAiB,CAAC,EAAE,OAAO,EAAE,UAAU,EAAuB,GACzE,CAAA,GAAA,sRAAA,CAAA,OAAI,AAAD,EAAE;QACH,aACE;QACF,aAAa,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACpB,OAAO,sNAAA,CAAA,IAAC,CAAC,MAAM;YACf,MAAM,sNAAA,CAAA,IAAC,CAAC,IAAI,CAAC,4HAAA,CAAA,gBAAa;QAC5B;QACA,SAAS,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;YAC7B,MAAM,KAAK,CAAA,GAAA,8GAAA,CAAA,eAAY,AAAD;YAEtB,WAAW,KAAK,CAAC;gBACf,MAAM;gBACN,MAAM;gBACN,WAAW;YACb;YAEA,WAAW,KAAK,CAAC;gBACf,MAAM;gBACN,MAAM;gBACN,WAAW;YACb;YAEA,WAAW,KAAK,CAAC;gBACf,MAAM;gBACN,MAAM;gBACN,WAAW;YACb;YAEA,WAAW,KAAK,CAAC;gBACf,MAAM;gBACN,MAAM;gBACN,WAAW;YACb;YAEA,MAAM,kBAAkB,4HAAA,CAAA,iCAA8B,CAAC,IAAI,CACzD,CAAC,gCACC,8BAA8B,IAAI,KAAK;YAG3C,IAAI,CAAC,iBAAiB;gBACpB,MAAM,IAAI,MAAM,CAAC,oCAAoC,EAAE,MAAM;YAC/D;YAEA,MAAM,gBAAgB,gBAAgB,CAAC;gBACrC;gBACA;gBACA;gBACA;YACF;YAEA,WAAW,KAAK,CAAC;gBAAE,MAAM;gBAAe,MAAM;gBAAM,WAAW;YAAK;YAEpE,OAAO;gBACL;gBACA;gBACA;gBACA,SAAS;YACX;QACF;IACF","debugId":null}},
    {"offset": {"line": 1559, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/ai/tools/get-weather.ts"],"sourcesContent":["import { tool } from \"ai\";\nimport { z } from \"zod\";\n\nexport const getWeather = tool({\n  description: \"Get the current weather at a location\",\n  inputSchema: z.object({\n    latitude: z.number(),\n    longitude: z.number(),\n  }),\n  execute: async ({ latitude, longitude }) => {\n    const response = await fetch(\n      `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m&hourly=temperature_2m&daily=sunrise,sunset&timezone=auto`\n    );\n\n    const weatherData = await response.json();\n    return weatherData;\n  },\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,aAAa,CAAA,GAAA,sRAAA,CAAA,OAAI,AAAD,EAAE;IAC7B,aAAa;IACb,aAAa,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACpB,UAAU,sNAAA,CAAA,IAAC,CAAC,MAAM;QAClB,WAAW,sNAAA,CAAA,IAAC,CAAC,MAAM;IACrB;IACA,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE;QACrC,MAAM,WAAW,MAAM,MACrB,CAAC,gDAAgD,EAAE,SAAS,WAAW,EAAE,UAAU,gFAAgF,CAAC;QAGtK,MAAM,cAAc,MAAM,SAAS,IAAI;QACvC,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 1584, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/ai/tools/request-suggestions.ts"],"sourcesContent":["import { streamObject, tool, type UIMessageStreamWriter } from \"ai\";\nimport type { Session } from \"next-auth\";\nimport { z } from \"zod\";\nimport { getDocumentById, saveSuggestions } from \"@/lib/db/queries\";\nimport type { Suggestion } from \"@/lib/db/schema\";\nimport type { ChatMessage } from \"@/lib/types\";\nimport { generateUUID } from \"@/lib/utils\";\nimport { myProvider } from \"../providers\";\n\ntype RequestSuggestionsProps = {\n  session: Session;\n  dataStream: UIMessageStreamWriter<ChatMessage>;\n};\n\nexport const requestSuggestions = ({\n  session,\n  dataStream,\n}: RequestSuggestionsProps) =>\n  tool({\n    description: \"Request suggestions for a document\",\n    inputSchema: z.object({\n      documentId: z\n        .string()\n        .describe(\"The ID of the document to request edits\"),\n    }),\n    execute: async ({ documentId }) => {\n      const document = await getDocumentById({ id: documentId });\n\n      if (!document || !document.content) {\n        return {\n          error: \"Document not found\",\n        };\n      }\n\n      const suggestions: Omit<\n        Suggestion,\n        \"userId\" | \"createdAt\" | \"documentCreatedAt\"\n      >[] = [];\n\n      const { elementStream } = streamObject({\n        model: myProvider.languageModel(\"gpt-4o-mini\"),\n        system:\n          \"You are a help writing assistant. Given a piece of writing, please offer suggestions to improve the piece of writing and describe the change. It is very important for the edits to contain full sentences instead of just words. Max 5 suggestions.\",\n        prompt: document.content,\n        output: \"array\",\n        schema: z.object({\n          originalSentence: z.string().describe(\"The original sentence\"),\n          suggestedSentence: z.string().describe(\"The suggested sentence\"),\n          description: z.string().describe(\"The description of the suggestion\"),\n        }),\n      });\n\n      for await (const element of elementStream) {\n        // @ts-expect-error todo: fix type\n        const suggestion: Suggestion = {\n          originalText: element.originalSentence,\n          suggestedText: element.suggestedSentence,\n          description: element.description,\n          id: generateUUID(),\n          documentId,\n          isResolved: false,\n        };\n\n        dataStream.write({\n          type: \"data-suggestion\",\n          data: suggestion,\n          transient: true,\n        });\n\n        suggestions.push(suggestion);\n      }\n\n      if (session.user?.id) {\n        const userId = session.user.id;\n\n        await saveSuggestions({\n          suggestions: suggestions.map((suggestion) => ({\n            ...suggestion,\n            userId,\n            createdAt: new Date(),\n            documentCreatedAt: document.createdAt,\n          })),\n        });\n      }\n\n      return {\n        id: documentId,\n        title: document.title,\n        kind: document.kind,\n        message: \"Suggestions have been added to the document\",\n      };\n    },\n  });\n"],"names":[],"mappings":";;;AAAA;AAAA;AAEA;AACA;AAGA;AACA;;;;;;AAOO,MAAM,qBAAqB,CAAC,EACjC,OAAO,EACP,UAAU,EACc,GACxB,CAAA,GAAA,sRAAA,CAAA,OAAI,AAAD,EAAE;QACH,aAAa;QACb,aAAa,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACpB,YAAY,sNAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CAAC;QACd;QACA,SAAS,OAAO,EAAE,UAAU,EAAE;YAC5B,MAAM,WAAW,MAAM,CAAA,GAAA,sHAAA,CAAA,kBAAe,AAAD,EAAE;gBAAE,IAAI;YAAW;YAExD,IAAI,CAAC,YAAY,CAAC,SAAS,OAAO,EAAE;gBAClC,OAAO;oBACL,OAAO;gBACT;YACF;YAEA,MAAM,cAGA,EAAE;YAER,MAAM,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,2NAAA,CAAA,eAAY,AAAD,EAAE;gBACrC,OAAO,wHAAA,CAAA,aAAU,CAAC,aAAa,CAAC;gBAChC,QACE;gBACF,QAAQ,SAAS,OAAO;gBACxB,QAAQ;gBACR,QAAQ,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;oBACf,kBAAkB,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;oBACtC,mBAAmB,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;oBACvC,aAAa,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;gBACnC;YACF;YAEA,WAAW,MAAM,WAAW,cAAe;gBACzC,kCAAkC;gBAClC,MAAM,aAAyB;oBAC7B,cAAc,QAAQ,gBAAgB;oBACtC,eAAe,QAAQ,iBAAiB;oBACxC,aAAa,QAAQ,WAAW;oBAChC,IAAI,CAAA,GAAA,8GAAA,CAAA,eAAY,AAAD;oBACf;oBACA,YAAY;gBACd;gBAEA,WAAW,KAAK,CAAC;oBACf,MAAM;oBACN,MAAM;oBACN,WAAW;gBACb;gBAEA,YAAY,IAAI,CAAC;YACnB;YAEA,IAAI,QAAQ,IAAI,EAAE,IAAI;gBACpB,MAAM,SAAS,QAAQ,IAAI,CAAC,EAAE;gBAE9B,MAAM,CAAA,GAAA,sHAAA,CAAA,kBAAe,AAAD,EAAE;oBACpB,aAAa,YAAY,GAAG,CAAC,CAAC,aAAe,CAAC;4BAC5C,GAAG,UAAU;4BACb;4BACA,WAAW,IAAI;4BACf,mBAAmB,SAAS,SAAS;wBACvC,CAAC;gBACH;YACF;YAEA,OAAO;gBACL,IAAI;gBACJ,OAAO,SAAS,KAAK;gBACrB,MAAM,SAAS,IAAI;gBACnB,SAAS;YACX;QACF;IACF","debugId":null}},
    {"offset": {"line": 1666, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/ai/tools/update-document.ts"],"sourcesContent":["import { tool, type UIMessageStreamWriter } from \"ai\";\nimport type { Session } from \"next-auth\";\nimport { z } from \"zod\";\nimport { documentHandlersByArtifactKind } from \"@/lib/artifacts/server\";\nimport { getDocumentById } from \"@/lib/db/queries\";\nimport type { ChatMessage } from \"@/lib/types\";\n\ntype UpdateDocumentProps = {\n  session: Session;\n  dataStream: UIMessageStreamWriter<ChatMessage>;\n};\n\nexport const updateDocument = ({ session, dataStream }: UpdateDocumentProps) =>\n  tool({\n    description: \"Update a document with the given description.\",\n    inputSchema: z.object({\n      id: z.string().describe(\"The ID of the document to update\"),\n      description: z\n        .string()\n        .describe(\"The description of changes that need to be made\"),\n    }),\n    execute: async ({ id, description }) => {\n      const document = await getDocumentById({ id });\n\n      if (!document) {\n        return {\n          error: \"Document not found\",\n        };\n      }\n\n      dataStream.write({\n        type: \"data-clear\",\n        data: null,\n        transient: true,\n      });\n\n      const documentHandler = documentHandlersByArtifactKind.find(\n        (documentHandlerByArtifactKind) =>\n          documentHandlerByArtifactKind.kind === document.kind\n      );\n\n      if (!documentHandler) {\n        throw new Error(`No document handler found for kind: ${document.kind}`);\n      }\n\n      await documentHandler.onUpdateDocument({\n        document,\n        description,\n        dataStream,\n        session,\n      });\n\n      dataStream.write({ type: \"data-finish\", data: null, transient: true });\n\n      return {\n        id,\n        title: document.title,\n        kind: document.kind,\n        content: \"The document has been updated successfully.\",\n      };\n    },\n  });\n"],"names":[],"mappings":";;;AAAA;AAEA;AACA;AACA;;;;;AAQO,MAAM,iBAAiB,CAAC,EAAE,OAAO,EAAE,UAAU,EAAuB,GACzE,CAAA,GAAA,sRAAA,CAAA,OAAI,AAAD,EAAE;QACH,aAAa;QACb,aAAa,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACpB,IAAI,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACxB,aAAa,sNAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;QACd;QACA,SAAS,OAAO,EAAE,EAAE,EAAE,WAAW,EAAE;YACjC,MAAM,WAAW,MAAM,CAAA,GAAA,sHAAA,CAAA,kBAAe,AAAD,EAAE;gBAAE;YAAG;YAE5C,IAAI,CAAC,UAAU;gBACb,OAAO;oBACL,OAAO;gBACT;YACF;YAEA,WAAW,KAAK,CAAC;gBACf,MAAM;gBACN,MAAM;gBACN,WAAW;YACb;YAEA,MAAM,kBAAkB,4HAAA,CAAA,iCAA8B,CAAC,IAAI,CACzD,CAAC,gCACC,8BAA8B,IAAI,KAAK,SAAS,IAAI;YAGxD,IAAI,CAAC,iBAAiB;gBACpB,MAAM,IAAI,MAAM,CAAC,oCAAoC,EAAE,SAAS,IAAI,EAAE;YACxE;YAEA,MAAM,gBAAgB,gBAAgB,CAAC;gBACrC;gBACA;gBACA;gBACA;YACF;YAEA,WAAW,KAAK,CAAC;gBAAE,MAAM;gBAAe,MAAM;gBAAM,WAAW;YAAK;YAEpE,OAAO;gBACL;gBACA,OAAO,SAAS,KAAK;gBACrB,MAAM,SAAS,IAAI;gBACnB,SAAS;YACX;QACF;IACF","debugId":null}},
    {"offset": {"line": 1726, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/app/%28chat%29/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { generateText, type UIMessage } from \"ai\";\nimport { cookies } from \"next/headers\";\nimport type { VisibilityType } from \"@/components/visibility-selector\";\nimport { myProvider } from \"@/lib/ai/providers\";\nimport {\n  deleteMessagesByChatIdAfterTimestamp,\n  getMessageById,\n  updateChatVisiblityById,\n} from \"@/lib/db/queries\";\n\nexport async function saveChatModelAsCookie(model: string) {\n  const cookieStore = await cookies();\n  cookieStore.set(\"chat-model\", model);\n}\n\nexport async function generateTitleFromUserMessage({\n  message,\n}: {\n  message: UIMessage;\n}) {\n  const { text: title } = await generateText({\n    model: myProvider.languageModel(\"title-model\"),\n    system: `\\n\n    - you will generate a short title based on the first message a user begins a conversation with\n    - ensure it is not more than 80 characters long\n    - the title should be a summary of the user's message\n    - do not use quotes or colons`,\n    prompt: JSON.stringify(message),\n  });\n\n  return title;\n}\n\nexport async function deleteTrailingMessages({ id }: { id: string }) {\n  const [message] = await getMessageById({ id });\n\n  await deleteMessagesByChatIdAfterTimestamp({\n    chatId: message.chatId,\n    timestamp: message.createdAt,\n  });\n}\n\nexport async function updateChatVisibility({\n  chatId,\n  visibility,\n}: {\n  chatId: string;\n  visibility: VisibilityType;\n}) {\n  await updateChatVisiblityById({ chatId, visibility });\n}\n"],"names":[],"mappings":";;;;;;;;AAEA;AACA;AAEA;AACA;;;;;;;;AAMO,eAAe,sBAAsB,KAAa;IACvD,MAAM,cAAc,MAAM,CAAA,GAAA,sVAAA,CAAA,UAAO,AAAD;IAChC,YAAY,GAAG,CAAC,cAAc;AAChC;AAEO,eAAe,6BAA6B,EACjD,OAAO,EAGR;IACC,MAAM,EAAE,MAAM,KAAK,EAAE,GAAG,MAAM,CAAA,GAAA,2NAAA,CAAA,eAAY,AAAD,EAAE;QACzC,OAAO,wHAAA,CAAA,aAAU,CAAC,aAAa,CAAC;QAChC,QAAQ,CAAC;;;;iCAIoB,CAAC;QAC9B,QAAQ,KAAK,SAAS,CAAC;IACzB;IAEA,OAAO;AACT;AAEO,eAAe,uBAAuB,EAAE,EAAE,EAAkB;IACjE,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAA,GAAA,sHAAA,CAAA,iBAAc,AAAD,EAAE;QAAE;IAAG;IAE5C,MAAM,CAAA,GAAA,sHAAA,CAAA,uCAAoC,AAAD,EAAE;QACzC,QAAQ,QAAQ,MAAM;QACtB,WAAW,QAAQ,SAAS;IAC9B;AACF;AAEO,eAAe,qBAAqB,EACzC,MAAM,EACN,UAAU,EAIX;IACC,MAAM,CAAA,GAAA,sHAAA,CAAA,0BAAuB,AAAD,EAAE;QAAE;QAAQ;IAAW;AACrD;;;IAxCsB;IAKA;IAkBA;IASA;;AAhCA,scAAA;AAKA,scAAA;AAkBA,scAAA;AASA,scAAA","debugId":null}},
    {"offset": {"line": 1793, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/app/%28chat%29/api/chat/schema.ts"],"sourcesContent":["import { z } from \"zod\";\n\nconst textPartSchema = z.object({\n  type: z.enum([\"text\"]),\n  text: z.string().min(1).max(2000),\n});\n\nconst filePartSchema = z.object({\n  type: z.enum([\"file\"]),\n  mediaType: z.enum([\"image/jpeg\", \"image/png\"]),\n  name: z.string().min(1).max(100),\n  url: z.string().url(),\n});\n\nconst partSchema = z.union([textPartSchema, filePartSchema]);\n\nexport const postRequestBodySchema = z.object({\n  id: z.string().uuid(),\n  message: z.object({\n    id: z.string().uuid(),\n    role: z.enum([\"user\"]),\n    parts: z.array(partSchema),\n  }),\n  selectedChatModel: z.enum([\"chat-model\", \"chat-model-reasoning\"]),\n  selectedVisibilityType: z.enum([\"public\", \"private\"]),\n});\n\nexport type PostRequestBody = z.infer<typeof postRequestBodySchema>;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,iBAAiB,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,MAAM,sNAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;KAAO;IACrB,MAAM,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;AAC9B;AAEA,MAAM,iBAAiB,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,MAAM,sNAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;KAAO;IACrB,WAAW,sNAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAc;KAAY;IAC7C,MAAM,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAC5B,KAAK,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG;AACrB;AAEA,MAAM,aAAa,sNAAA,CAAA,IAAC,CAAC,KAAK,CAAC;IAAC;IAAgB;CAAe;AAEpD,MAAM,wBAAwB,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,IAAI,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,IAAI;IACnB,SAAS,sNAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAChB,IAAI,sNAAA,CAAA,IAAC,CAAC,MAAM,GAAG,IAAI;QACnB,MAAM,sNAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;SAAO;QACrB,OAAO,sNAAA,CAAA,IAAC,CAAC,KAAK,CAAC;IACjB;IACA,mBAAmB,sNAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAc;KAAuB;IAChE,wBAAwB,sNAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAU;KAAU;AACtD","debugId":null}},
    {"offset": {"line": 1843, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/app/%28chat%29/api/chat/route.ts"],"sourcesContent":["import { geolocation } from \"@vercel/functions\";\nimport {\n  convertToModelMessages,\n  createUIMessageStream,\n  JsonToSseTransformStream,\n  smoothStream,\n  stepCountIs,\n  streamText,\n} from \"ai\";\nimport { unstable_cache as cache } from \"next/cache\";\nimport { after } from \"next/server\";\nimport {\n  createResumableStreamContext,\n  type ResumableStreamContext,\n} from \"resumable-stream\";\nimport type { ModelCatalog } from \"tokenlens/core\";\nimport { fetchModels } from \"tokenlens/fetch\";\nimport { getUsage } from \"tokenlens/helpers\";\nimport { auth, type UserType } from \"@/app/(auth)/auth\";\nimport type { VisibilityType } from \"@/components/visibility-selector\";\nimport { entitlementsByUserType } from \"@/lib/ai/entitlements\";\nimport type { ChatModel } from \"@/lib/ai/models\";\nimport { type RequestHints, systemPrompt } from \"@/lib/ai/prompts\";\nimport { myProvider } from \"@/lib/ai/providers\";\nimport { createDocument } from \"@/lib/ai/tools/create-document\";\nimport { getWeather } from \"@/lib/ai/tools/get-weather\";\nimport { requestSuggestions } from \"@/lib/ai/tools/request-suggestions\";\nimport { updateDocument } from \"@/lib/ai/tools/update-document\";\nimport { isProductionEnvironment } from \"@/lib/constants\";\nimport {\n  createStreamId,\n  deleteChatById,\n  getChatById,\n  getMessageCountByUserId,\n  getMessagesByChatId,\n  saveChat,\n  saveMessages,\n  updateChatLastContextById,\n} from \"@/lib/db/queries\";\nimport { ChatSDKError } from \"@/lib/errors\";\nimport type { ChatMessage } from \"@/lib/types\";\nimport type { AppUsage } from \"@/lib/usage\";\nimport { convertToUIMessages, generateUUID } from \"@/lib/utils\";\nimport { generateTitleFromUserMessage } from \"../../actions\";\nimport { type PostRequestBody, postRequestBodySchema } from \"./schema\";\n\nexport const maxDuration = 60;\n\nlet globalStreamContext: ResumableStreamContext | null = null;\n\nconst getTokenlensCatalog = cache(\n  async (): Promise<ModelCatalog | undefined> => {\n    try {\n      return await fetchModels();\n    } catch (err) {\n      console.warn(\n        \"TokenLens: catalog fetch failed, using default catalog\",\n        err\n      );\n      return; // tokenlens helpers will fall back to defaultCatalog\n    }\n  },\n  [\"tokenlens-catalog\"],\n  { revalidate: 24 * 60 * 60 } // 24 hours\n);\n\nexport function getStreamContext() {\n  if (!globalStreamContext) {\n    try {\n      globalStreamContext = createResumableStreamContext({\n        waitUntil: after,\n      });\n    } catch (error: any) {\n      if (error.message.includes(\"REDIS_URL\")) {\n        console.log(\n          \" > Resumable streams are disabled due to missing REDIS_URL\"\n        );\n      } else {\n        console.error(error);\n      }\n    }\n  }\n\n  return globalStreamContext;\n}\n\nexport async function POST(request: Request) {\n  let requestBody: PostRequestBody;\n\n  try {\n    const json = await request.json();\n    requestBody = postRequestBodySchema.parse(json);\n  } catch (_) {\n    return new ChatSDKError(\"bad_request:api\").toResponse();\n  }\n\n  try {\n    const {\n      id,\n      message,\n      selectedChatModel,\n      selectedVisibilityType,\n    }: {\n      id: string;\n      message: ChatMessage;\n      selectedChatModel: ChatModel[\"id\"];\n      selectedVisibilityType: VisibilityType;\n    } = requestBody;\n\n    const session = await auth();\n\n    if (!session?.user) {\n      return new ChatSDKError(\"unauthorized:chat\").toResponse();\n    }\n\n    const userType: UserType = session.user.type;\n\n    const messageCount = await getMessageCountByUserId({\n      id: session.user.id,\n      differenceInHours: 24,\n    });\n\n    if (messageCount > entitlementsByUserType[userType].maxMessagesPerDay) {\n      return new ChatSDKError(\"rate_limit:chat\").toResponse();\n    }\n\n    const chat = await getChatById({ id });\n\n    if (chat) {\n      if (chat.userId !== session.user.id) {\n        return new ChatSDKError(\"forbidden:chat\").toResponse();\n      }\n    } else {\n      const title = await generateTitleFromUserMessage({\n        message,\n      });\n\n      await saveChat({\n        id,\n        userId: session.user.id,\n        title,\n        visibility: selectedVisibilityType,\n      });\n    }\n\n    const messagesFromDb = await getMessagesByChatId({ id });\n    const uiMessages = [...convertToUIMessages(messagesFromDb), message];\n\n    const { longitude, latitude, city, country } = geolocation(request);\n\n    const requestHints: RequestHints = {\n      longitude,\n      latitude,\n      city,\n      country,\n    };\n\n    await saveMessages({\n      messages: [\n        {\n          chatId: id,\n          id: message.id,\n          role: \"user\",\n          parts: message.parts,\n          attachments: [],\n          createdAt: new Date(),\n        },\n      ],\n    });\n\n    const streamId = generateUUID();\n    await createStreamId({ streamId, chatId: id });\n\n    let finalMergedUsage: AppUsage | undefined;\n\n    const stream = createUIMessageStream({\n      execute: ({ writer: dataStream }) => {\n        const result = streamText({\n          model: myProvider.languageModel(selectedChatModel),\n          system: systemPrompt({ selectedChatModel, requestHints }),\n          messages: convertToModelMessages(uiMessages),\n          stopWhen: stepCountIs(5),\n          experimental_activeTools:\n            selectedChatModel === \"chat-model-reasoning\"\n              ? []\n              : [\n                  \"getWeather\",\n                  \"createDocument\",\n                  \"updateDocument\",\n                  \"requestSuggestions\",\n                ],\n          experimental_transform: smoothStream({ chunking: \"word\" }),\n          tools: {\n            getWeather,\n            createDocument: createDocument({ session, dataStream }),\n            updateDocument: updateDocument({ session, dataStream }),\n            requestSuggestions: requestSuggestions({\n              session,\n              dataStream,\n            }),\n          },\n          experimental_telemetry: {\n            isEnabled: isProductionEnvironment,\n            functionId: \"stream-text\",\n          },\n          onFinish: async ({ usage }) => {\n            try {\n              const providers = await getTokenlensCatalog();\n              const modelId =\n                myProvider.languageModel(selectedChatModel).modelId;\n              if (!modelId) {\n                finalMergedUsage = usage;\n                dataStream.write({\n                  type: \"data-usage\",\n                  data: finalMergedUsage,\n                });\n                return;\n              }\n\n              if (!providers) {\n                finalMergedUsage = usage;\n                dataStream.write({\n                  type: \"data-usage\",\n                  data: finalMergedUsage,\n                });\n                return;\n              }\n\n              const summary = getUsage({ modelId, usage, providers });\n              finalMergedUsage = { ...usage, ...summary, modelId } as AppUsage;\n              dataStream.write({ type: \"data-usage\", data: finalMergedUsage });\n            } catch (err) {\n              console.warn(\"TokenLens enrichment failed\", err);\n              finalMergedUsage = usage;\n              dataStream.write({ type: \"data-usage\", data: finalMergedUsage });\n            }\n          },\n        });\n\n        result.consumeStream();\n\n        dataStream.merge(\n          result.toUIMessageStream({\n            sendReasoning: true,\n          })\n        );\n      },\n      generateId: generateUUID,\n      onFinish: async ({ messages }) => {\n        await saveMessages({\n          messages: messages.map((currentMessage) => ({\n            id: currentMessage.id,\n            role: currentMessage.role,\n            parts: currentMessage.parts,\n            createdAt: new Date(),\n            attachments: [],\n            chatId: id,\n          })),\n        });\n\n        if (finalMergedUsage) {\n          try {\n            await updateChatLastContextById({\n              chatId: id,\n              context: finalMergedUsage,\n            });\n          } catch (err) {\n            console.warn(\"Unable to persist last usage for chat\", id, err);\n          }\n        }\n      },\n      onError: () => {\n        return \"Oops, an error occurred!\";\n      },\n    });\n\n    // const streamContext = getStreamContext();\n\n    // if (streamContext) {\n    //   return new Response(\n    //     await streamContext.resumableStream(streamId, () =>\n    //       stream.pipeThrough(new JsonToSseTransformStream())\n    //     )\n    //   );\n    // }\n\n    return new Response(stream.pipeThrough(new JsonToSseTransformStream()));\n  } catch (error) {\n    const vercelId = request.headers.get(\"x-vercel-id\");\n\n    if (error instanceof ChatSDKError) {\n      return error.toResponse();\n    }\n\n    // Check for Vercel AI Gateway credit card error\n    if (\n      error instanceof Error &&\n      error.message?.includes(\n        \"AI Gateway requires a valid credit card on file to service requests\"\n      )\n    ) {\n      return new ChatSDKError(\"bad_request:activate_gateway\").toResponse();\n    }\n\n    console.error(\"Unhandled error in chat API:\", error, { vercelId });\n    return new ChatSDKError(\"offline:chat\").toResponse();\n  }\n}\n\nexport async function DELETE(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const id = searchParams.get(\"id\");\n\n  if (!id) {\n    return new ChatSDKError(\"bad_request:api\").toResponse();\n  }\n\n  const session = await auth();\n\n  if (!session?.user) {\n    return new ChatSDKError(\"unauthorized:chat\").toResponse();\n  }\n\n  const chat = await getChatById({ id });\n\n  if (chat?.userId !== session.user.id) {\n    return new ChatSDKError(\"forbidden:chat\").toResponse();\n  }\n\n  const deletedChat = await deleteChatById({ id });\n\n  return Response.json(deletedChat, { status: 200 });\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}