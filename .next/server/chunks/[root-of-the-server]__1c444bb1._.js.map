{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/app/api/fingpt/forecast/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\n\nconst FINGPT_BASE_URL = process.env.FINGPT_BASE_URL || \"http://localhost:8000\";\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    console.log(\"üìä Forecast request received:\", body);\n\n    const {\n      ticker,\n      days_back = 28,\n      include_financials = true,\n    } = body;\n\n    if (!ticker) {\n      return NextResponse.json(\n        { error: \"Missing required field: ticker\" },\n        { status: 400 }\n      );\n    }\n\n    const fingptRequest = {\n      ticker: ticker.toUpperCase(),\n      end_date: new Date().toISOString().split(\"T\")[0],\n      past_weeks: Math.floor(days_back / 7),\n      include_financials,\n      temperature: 0.2,\n      stream: false, // Changed to false for simpler response\n    };\n\n    console.log(\"üì§ Calling FinGPT service with:\", fingptRequest);\n\n    const response = await fetch(`${FINGPT_BASE_URL}/v1/chat/completions`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(fingptRequest),\n    });\n\n    console.log(\"üì• FinGPT response status:\", response.status);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"‚ùå FinGPT error:\", errorText);\n      return NextResponse.json(\n        { error: \"FinGPT service error\", details: errorText },\n        { status: response.status }\n      );\n    }\n\n    const data = await response.json();\n    console.log(\"‚úÖ FinGPT response received\");\n\n    // Return simplified response\n    return NextResponse.json({\n      ticker: ticker.toUpperCase(),\n      forecast: data.choices?.[0]?.message?.content || \"\",\n      generated_at: new Date().toISOString(),\n    });\n  } catch (error) {\n    console.error(\"‚ùå Forecast route error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to generate forecast\", details: String(error) },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB,QAAQ,GAAG,CAAC,eAAe,IAAI;AAEhD,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,QAAQ,GAAG,CAAC,iCAAiC;QAE7C,MAAM,EACJ,MAAM,EACN,YAAY,EAAE,EACd,qBAAqB,IAAI,EAC1B,GAAG;QAEJ,IAAI,CAAC,QAAQ;YACX,OAAO,qVAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiC,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,gBAAgB;YACpB,QAAQ,OAAO,WAAW;YAC1B,UAAU,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;YAChD,YAAY,KAAK,KAAK,CAAC,YAAY;YACnC;YACA,aAAa;YACb,QAAQ;QACV;QAEA,QAAQ,GAAG,CAAC,mCAAmC;QAE/C,MAAM,WAAW,MAAM,MAAM,GAAG,gBAAgB,oBAAoB,CAAC,EAAE;YACrE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,QAAQ,GAAG,CAAC,8BAA8B,SAAS,MAAM;QAEzD,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,mBAAmB;YACjC,OAAO,qVAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;gBAAwB,SAAS;YAAU,GACpD;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC;QAEZ,6BAA6B;QAC7B,OAAO,qVAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,QAAQ,OAAO,WAAW;YAC1B,UAAU,KAAK,OAAO,EAAE,CAAC,EAAE,EAAE,SAAS,WAAW;YACjD,cAAc,IAAI,OAAO,WAAW;QACtC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,qVAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAA+B,SAAS,OAAO;QAAO,GAC/D;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}