{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/app/api/fingpt/v1/chat/completions/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\n\nconst FINGPT_BASE_URL = process.env.FINGPT_BASE_URL || \"http://localhost:8000\";\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n    console.log(\"üì° Chat completions request:\", body);\n\n    const {\n      ticker,\n      end_date,\n      past_weeks = 4,\n      include_financials = true,\n      temperature = 0.2,\n      stream = true,\n    } = body;\n\n    // Validate required fields\n    if (!ticker) {\n      return NextResponse.json(\n        { error: \"Missing required field: ticker\" },\n        { status: 400 }\n      );\n    }\n\n    // Prepare request for FinGPT service\n    const fingptRequest = {\n      ticker: ticker.toUpperCase(),\n      end_date: end_date || new Date().toISOString().split(\"T\")[0],\n      past_weeks,\n      include_financials,\n      temperature,\n      stream,\n    };\n\n    console.log(\"üì§ Forwarding to FinGPT:\", fingptRequest);\n\n    const response = await fetch(`${FINGPT_BASE_URL}/v1/chat/completions`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(fingptRequest),\n    });\n\n    console.log(\"üì• FinGPT response status:\", response.status);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"‚ùå FinGPT service error:\", errorText);\n      return NextResponse.json(\n        { error: \"FinGPT service error\", details: errorText },\n        { status: response.status }\n      );\n    }\n\n    // Handle streaming response\n    if (stream) {\n      console.log(\"üì∫ Streaming response enabled\");\n      return new NextResponse(response.body, {\n        headers: {\n          \"Content-Type\": \"text/event-stream\",\n          \"Cache-Control\": \"no-cache\",\n          \"Connection\": \"keep-alive\",\n        },\n      });\n    }\n\n    // Handle non-streaming response\n    const data = await response.json();\n    console.log(\"‚úÖ Non-streaming response received\");\n    return NextResponse.json(data);\n  } catch (error) {\n    console.error(\"‚ùå Chat completions error:\", error);\n    return NextResponse.json(\n      { error: \"Failed to connect to FinGPT service\", details: String(error) },\n      { status: 503 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB,QAAQ,GAAG,CAAC,eAAe,IAAI;AAEhD,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,QAAQ,GAAG,CAAC,gCAAgC;QAE5C,MAAM,EACJ,MAAM,EACN,QAAQ,EACR,aAAa,CAAC,EACd,qBAAqB,IAAI,EACzB,cAAc,GAAG,EACjB,SAAS,IAAI,EACd,GAAG;QAEJ,2BAA2B;QAC3B,IAAI,CAAC,QAAQ;YACX,OAAO,qVAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiC,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,qCAAqC;QACrC,MAAM,gBAAgB;YACpB,QAAQ,OAAO,WAAW;YAC1B,UAAU,YAAY,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;YAC5D;YACA;YACA;YACA;QACF;QAEA,QAAQ,GAAG,CAAC,4BAA4B;QAExC,MAAM,WAAW,MAAM,MAAM,GAAG,gBAAgB,oBAAoB,CAAC,EAAE;YACrE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,QAAQ,GAAG,CAAC,8BAA8B,SAAS,MAAM;QAEzD,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO,qVAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;gBAAwB,SAAS;YAAU,GACpD;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;QAEA,4BAA4B;QAC5B,IAAI,QAAQ;YACV,QAAQ,GAAG,CAAC;YACZ,OAAO,IAAI,qVAAA,CAAA,eAAY,CAAC,SAAS,IAAI,EAAE;gBACrC,SAAS;oBACP,gBAAgB;oBAChB,iBAAiB;oBACjB,cAAc;gBAChB;YACF;QACF;QAEA,gCAAgC;QAChC,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC;QACZ,OAAO,qVAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,qVAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAuC,SAAS,OAAO;QAAO,GACvE;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}