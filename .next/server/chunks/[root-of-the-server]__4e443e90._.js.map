{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/db/utils.ts"],"sourcesContent":["import { generateId } from \"ai\";\nimport { genSaltSync, hashSync } from \"bcrypt-ts\";\n\nexport function generateHashedPassword(password: string) {\n  const salt = genSaltSync(10);\n  const hash = hashSync(password, salt);\n\n  return hash;\n}\n\nexport function generateDummyPassword() {\n  const password = generateId();\n  const hashedPassword = generateHashedPassword(password);\n\n  return hashedPassword;\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS,uBAAuB,QAAgB;IACrD,MAAM,OAAO,CAAA,GAAA,wMAAA,CAAA,cAAW,AAAD,EAAE;IACzB,MAAM,OAAO,CAAA,GAAA,wMAAA,CAAA,WAAQ,AAAD,EAAE,UAAU;IAEhC,OAAO;AACT;AAEO,SAAS;IACd,MAAM,WAAW,CAAA,GAAA,sRAAA,CAAA,aAAU,AAAD;IAC1B,MAAM,iBAAiB,uBAAuB;IAE9C,OAAO;AACT","debugId":null}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/constants.ts"],"sourcesContent":["import { generateDummyPassword } from \"./db/utils\";\n\nexport const isProductionEnvironment = process.env.NODE_ENV === \"production\";\nexport const isDevelopmentEnvironment = process.env.NODE_ENV === \"development\";\nexport const isTestEnvironment = Boolean(\n  process.env.PLAYWRIGHT_TEST_BASE_URL ||\n    process.env.PLAYWRIGHT ||\n    process.env.CI_PLAYWRIGHT\n);\n\nexport const guestRegex = /^guest-\\d+$/;\n\nexport const DUMMY_PASSWORD = generateDummyPassword();\n"],"names":[],"mappings":";;;;;;;AAAA;;AAEO,MAAM,0BAA0B,oDAAyB;AACzD,MAAM,2BAA2B,oDAAyB;AAC1D,MAAM,oBAAoB,QAC/B,QAAQ,GAAG,CAAC,wBAAwB,IAClC,QAAQ,GAAG,CAAC,UAAU,IACtB,QAAQ,GAAG,CAAC,aAAa;AAGtB,MAAM,aAAa;AAEnB,MAAM,iBAAiB,CAAA,GAAA,oHAAA,CAAA,wBAAqB,AAAD","debugId":null}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/errors.ts"],"sourcesContent":["export type ErrorType =\n  | \"bad_request\"\n  | \"unauthorized\"\n  | \"forbidden\"\n  | \"not_found\"\n  | \"rate_limit\"\n  | \"offline\";\n\nexport type Surface =\n  | \"chat\"\n  | \"auth\"\n  | \"api\"\n  | \"stream\"\n  | \"database\"\n  | \"history\"\n  | \"vote\"\n  | \"document\"\n  | \"suggestions\"\n  | \"activate_gateway\";\n\nexport type ErrorCode = `${ErrorType}:${Surface}`;\n\nexport type ErrorVisibility = \"response\" | \"log\" | \"none\";\n\nexport const visibilityBySurface: Record<Surface, ErrorVisibility> = {\n  database: \"log\",\n  chat: \"response\",\n  auth: \"response\",\n  stream: \"response\",\n  api: \"response\",\n  history: \"response\",\n  vote: \"response\",\n  document: \"response\",\n  suggestions: \"response\",\n  activate_gateway: \"response\",\n};\n\nexport class ChatSDKError extends Error {\n  type: ErrorType;\n  surface: Surface;\n  statusCode: number;\n\n  constructor(errorCode: ErrorCode, cause?: string) {\n    super();\n\n    const [type, surface] = errorCode.split(\":\");\n\n    this.type = type as ErrorType;\n    this.cause = cause;\n    this.surface = surface as Surface;\n    this.message = getMessageByErrorCode(errorCode);\n    this.statusCode = getStatusCodeByType(this.type);\n  }\n\n  toResponse() {\n    const code: ErrorCode = `${this.type}:${this.surface}`;\n    const visibility = visibilityBySurface[this.surface];\n\n    const { message, cause, statusCode } = this;\n\n    if (visibility === \"log\") {\n      console.error({\n        code,\n        message,\n        cause,\n      });\n\n      return Response.json(\n        { code: \"\", message: \"Something went wrong. Please try again later.\" },\n        { status: statusCode }\n      );\n    }\n\n    return Response.json({ code, message, cause }, { status: statusCode });\n  }\n}\n\nexport function getMessageByErrorCode(errorCode: ErrorCode): string {\n  if (errorCode.includes(\"database\")) {\n    return \"An error occurred while executing a database query.\";\n  }\n\n  switch (errorCode) {\n    case \"bad_request:api\":\n      return \"The request couldn't be processed. Please check your input and try again.\";\n\n    case \"bad_request:activate_gateway\":\n      return \"AI Gateway requires a valid credit card on file to service requests. Please visit https://vercel.com/d?to=%2F%5Bteam%5D%2F%7E%2Fai%3Fmodal%3Dadd-credit-card to add a card and unlock your free credits.\";\n\n    case \"unauthorized:auth\":\n      return \"You need to sign in before continuing.\";\n    case \"forbidden:auth\":\n      return \"Your account does not have access to this feature.\";\n\n    case \"rate_limit:chat\":\n      return \"You have exceeded your maximum number of messages for the day. Please try again later.\";\n    case \"not_found:chat\":\n      return \"The requested chat was not found. Please check the chat ID and try again.\";\n    case \"forbidden:chat\":\n      return \"This chat belongs to another user. Please check the chat ID and try again.\";\n    case \"unauthorized:chat\":\n      return \"You need to sign in to view this chat. Please sign in and try again.\";\n    case \"offline:chat\":\n      return \"We're having trouble sending your message. Please check your internet connection and try again.\";\n\n    case \"not_found:document\":\n      return \"The requested document was not found. Please check the document ID and try again.\";\n    case \"forbidden:document\":\n      return \"This document belongs to another user. Please check the document ID and try again.\";\n    case \"unauthorized:document\":\n      return \"You need to sign in to view this document. Please sign in and try again.\";\n    case \"bad_request:document\":\n      return \"The request to create or update the document was invalid. Please check your input and try again.\";\n\n    default:\n      return \"Something went wrong. Please try again later.\";\n  }\n}\n\nfunction getStatusCodeByType(type: ErrorType) {\n  switch (type) {\n    case \"bad_request\":\n      return 400;\n    case \"unauthorized\":\n      return 401;\n    case \"forbidden\":\n      return 403;\n    case \"not_found\":\n      return 404;\n    case \"rate_limit\":\n      return 429;\n    case \"offline\":\n      return 503;\n    default:\n      return 500;\n  }\n}\n"],"names":[],"mappings":";;;;;AAwBO,MAAM,sBAAwD;IACnE,UAAU;IACV,MAAM;IACN,MAAM;IACN,QAAQ;IACR,KAAK;IACL,SAAS;IACT,MAAM;IACN,UAAU;IACV,aAAa;IACb,kBAAkB;AACpB;AAEO,MAAM,qBAAqB;IAChC,KAAgB;IAChB,QAAiB;IACjB,WAAmB;IAEnB,YAAY,SAAoB,EAAE,KAAc,CAAE;QAChD,KAAK;QAEL,MAAM,CAAC,MAAM,QAAQ,GAAG,UAAU,KAAK,CAAC;QAExC,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,OAAO,GAAG,sBAAsB;QACrC,IAAI,CAAC,UAAU,GAAG,oBAAoB,IAAI,CAAC,IAAI;IACjD;IAEA,aAAa;QACX,MAAM,OAAkB,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,EAAE;QACtD,MAAM,aAAa,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC;QAEpD,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,IAAI;QAE3C,IAAI,eAAe,OAAO;YACxB,QAAQ,KAAK,CAAC;gBACZ;gBACA;gBACA;YACF;YAEA,OAAO,SAAS,IAAI,CAClB;gBAAE,MAAM;gBAAI,SAAS;YAAgD,GACrE;gBAAE,QAAQ;YAAW;QAEzB;QAEA,OAAO,SAAS,IAAI,CAAC;YAAE;YAAM;YAAS;QAAM,GAAG;YAAE,QAAQ;QAAW;IACtE;AACF;AAEO,SAAS,sBAAsB,SAAoB;IACxD,IAAI,UAAU,QAAQ,CAAC,aAAa;QAClC,OAAO;IACT;IAEA,OAAQ;QACN,KAAK;YACH,OAAO;QAET,KAAK;YACH,OAAO;QAET,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QAET,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QAET,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QAET;YACE,OAAO;IACX;AACF;AAEA,SAAS,oBAAoB,IAAe;IAC1C,OAAQ;QACN,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO;IACX;AACF","debugId":null}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/utils.ts"],"sourcesContent":["import type {\n  CoreAssistantMessage,\n  CoreToolMessage,\n  UIMessage,\n  UIMessagePart,\n} from 'ai';\nimport { type ClassValue, clsx } from 'clsx';\nimport { formatISO } from 'date-fns';\nimport { twMerge } from 'tailwind-merge';\nimport type { DBMessage, Document } from '@/lib/db/schema';\nimport { ChatSDKError, type ErrorCode } from './errors';\nimport type { ChatMessage, ChatTools, CustomUIDataTypes } from './types';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport const fetcher = async (url: string) => {\n  const response = await fetch(url);\n\n  if (!response.ok) {\n    const { code, cause } = await response.json();\n    throw new ChatSDKError(code as ErrorCode, cause);\n  }\n\n  return response.json();\n};\n\nexport async function fetchWithErrorHandlers(\n  input: RequestInfo | URL,\n  init?: RequestInit,\n) {\n  try {\n    const response = await fetch(input, init);\n\n    if (!response.ok) {\n      const { code, cause } = await response.json();\n      throw new ChatSDKError(code as ErrorCode, cause);\n    }\n\n    return response;\n  } catch (error: unknown) {\n    if (typeof navigator !== 'undefined' && !navigator.onLine) {\n      throw new ChatSDKError('offline:chat');\n    }\n\n    throw error;\n  }\n}\n\nexport function getLocalStorage(key: string) {\n  if (typeof window !== 'undefined') {\n    return JSON.parse(localStorage.getItem(key) || '[]');\n  }\n  return [];\n}\n\nexport function generateUUID(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\ntype ResponseMessageWithoutId = CoreToolMessage | CoreAssistantMessage;\ntype ResponseMessage = ResponseMessageWithoutId & { id: string };\n\nexport function getMostRecentUserMessage(messages: UIMessage[]) {\n  const userMessages = messages.filter((message) => message.role === 'user');\n  return userMessages.at(-1);\n}\n\nexport function getDocumentTimestampByIndex(\n  documents: Document[],\n  index: number,\n) {\n  if (!documents) { return new Date(); }\n  if (index > documents.length) { return new Date(); }\n\n  return documents[index].createdAt;\n}\n\nexport function getTrailingMessageId({\n  messages,\n}: {\n  messages: ResponseMessage[];\n}): string | null {\n  const trailingMessage = messages.at(-1);\n\n  if (!trailingMessage) { return null; }\n\n  return trailingMessage.id;\n}\n\nexport function sanitizeText(text: string) {\n  return text.replace('<has_function_call>', '');\n}\n\nexport function convertToUIMessages(messages: DBMessage[]): ChatMessage[] {\n  return messages.map((message) => ({\n    id: message.id,\n    role: message.role as 'user' | 'assistant' | 'system',\n    parts: message.parts as UIMessagePart<CustomUIDataTypes, ChatTools>[],\n    metadata: {\n      createdAt: formatISO(message.createdAt),\n    },\n  }));\n}\n\nexport function getTextFromMessage(message: ChatMessage): string {\n  return message.parts\n    .filter((part) => part.type === 'text')\n    .map((part) => part.text)\n    .join('');\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAMA;AACA;AACA;AAEA;;;;;AAGO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2NAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wLAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEO,MAAM,UAAU,OAAO;IAC5B,MAAM,WAAW,MAAM,MAAM;IAE7B,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI;QAC3C,MAAM,IAAI,+GAAA,CAAA,eAAY,CAAC,MAAmB;IAC5C;IAEA,OAAO,SAAS,IAAI;AACtB;AAEO,eAAe,uBACpB,KAAwB,EACxB,IAAkB;IAElB,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,OAAO;QAEpC,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI;YAC3C,MAAM,IAAI,+GAAA,CAAA,eAAY,CAAC,MAAmB;QAC5C;QAEA,OAAO;IACT,EAAE,OAAO,OAAgB;QACvB,IAAI,OAAO,cAAc,eAAe,CAAC,UAAU,MAAM,EAAE;YACzD,MAAM,IAAI,+GAAA,CAAA,eAAY,CAAC;QACzB;QAEA,MAAM;IACR;AACF;AAEO,SAAS,gBAAgB,GAAW;IACzC,uCAAmC;;IAEnC;IACA,OAAO,EAAE;AACX;AAEO,SAAS;IACd,OAAO,uCAAuC,OAAO,CAAC,SAAS,CAAC;QAC9D,MAAM,IAAI,AAAC,KAAK,MAAM,KAAK,KAAM;QACjC,MAAM,IAAI,MAAM,MAAM,IAAI,AAAC,IAAI,MAAO;QACtC,OAAO,EAAE,QAAQ,CAAC;IACpB;AACF;AAKO,SAAS,yBAAyB,QAAqB;IAC5D,MAAM,eAAe,SAAS,MAAM,CAAC,CAAC,UAAY,QAAQ,IAAI,KAAK;IACnE,OAAO,aAAa,EAAE,CAAC,CAAC;AAC1B;AAEO,SAAS,4BACd,SAAqB,EACrB,KAAa;IAEb,IAAI,CAAC,WAAW;QAAE,OAAO,IAAI;IAAQ;IACrC,IAAI,QAAQ,UAAU,MAAM,EAAE;QAAE,OAAO,IAAI;IAAQ;IAEnD,OAAO,SAAS,CAAC,MAAM,CAAC,SAAS;AACnC;AAEO,SAAS,qBAAqB,EACnC,QAAQ,EAGT;IACC,MAAM,kBAAkB,SAAS,EAAE,CAAC,CAAC;IAErC,IAAI,CAAC,iBAAiB;QAAE,OAAO;IAAM;IAErC,OAAO,gBAAgB,EAAE;AAC3B;AAEO,SAAS,aAAa,IAAY;IACvC,OAAO,KAAK,OAAO,CAAC,uBAAuB;AAC7C;AAEO,SAAS,oBAAoB,QAAqB;IACvD,OAAO,SAAS,GAAG,CAAC,CAAC,UAAY,CAAC;YAChC,IAAI,QAAQ,EAAE;YACd,MAAM,QAAQ,IAAI;YAClB,OAAO,QAAQ,KAAK;YACpB,UAAU;gBACR,WAAW,CAAA,GAAA,kMAAA,CAAA,YAAS,AAAD,EAAE,QAAQ,SAAS;YACxC;QACF,CAAC;AACH;AAEO,SAAS,mBAAmB,OAAoB;IACrD,OAAO,QAAQ,KAAK,CACjB,MAAM,CAAC,CAAC,OAAS,KAAK,IAAI,KAAK,QAC/B,GAAG,CAAC,CAAC,OAAS,KAAK,IAAI,EACvB,IAAI,CAAC;AACV","debugId":null}},
    {"offset": {"line": 419, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/db/schema.ts"],"sourcesContent":["import type { InferSelectModel } from \"drizzle-orm\";\nimport {\n  boolean,\n  foreignKey,\n  json,\n  jsonb,\n  pgTable,\n  primaryKey,\n  text,\n  timestamp,\n  uuid,\n  varchar,\n} from \"drizzle-orm/pg-core\";\nimport type { AppUsage } from \"../usage\";\n\nexport const user = pgTable(\"User\", {\n  id: uuid(\"id\").primaryKey().notNull().defaultRandom(),\n  email: varchar(\"email\", { length: 64 }).notNull(),\n  password: varchar(\"password\", { length: 64 }),\n});\n\nexport type User = InferSelectModel<typeof user>;\n\nexport const chat = pgTable(\"Chat\", {\n  id: uuid(\"id\").primaryKey().notNull().defaultRandom(),\n  createdAt: timestamp(\"createdAt\").notNull(),\n  title: text(\"title\").notNull(),\n  userId: uuid(\"userId\")\n    .notNull()\n    .references(() => user.id),\n  visibility: varchar(\"visibility\", { enum: [\"public\", \"private\"] })\n    .notNull()\n    .default(\"private\"),\n  lastContext: jsonb(\"lastContext\").$type<AppUsage | null>(),\n});\n\nexport type Chat = InferSelectModel<typeof chat>;\n\n// DEPRECATED: The following schema is deprecated and will be removed in the future.\n// Read the migration guide at https://chat-sdk.dev/docs/migration-guides/message-parts\nexport const messageDeprecated = pgTable(\"Message\", {\n  id: uuid(\"id\").primaryKey().notNull().defaultRandom(),\n  chatId: uuid(\"chatId\")\n    .notNull()\n    .references(() => chat.id),\n  role: varchar(\"role\").notNull(),\n  content: json(\"content\").notNull(),\n  createdAt: timestamp(\"createdAt\").notNull(),\n});\n\nexport type MessageDeprecated = InferSelectModel<typeof messageDeprecated>;\n\nexport const message = pgTable(\"Message_v2\", {\n  id: uuid(\"id\").primaryKey().notNull().defaultRandom(),\n  chatId: uuid(\"chatId\")\n    .notNull()\n    .references(() => chat.id),\n  role: varchar(\"role\").notNull(),\n  parts: json(\"parts\").notNull(),\n  attachments: json(\"attachments\").notNull(),\n  createdAt: timestamp(\"createdAt\").notNull(),\n});\n\nexport type DBMessage = InferSelectModel<typeof message>;\n\n// DEPRECATED: The following schema is deprecated and will be removed in the future.\n// Read the migration guide at https://chat-sdk.dev/docs/migration-guides/message-parts\nexport const voteDeprecated = pgTable(\n  \"Vote\",\n  {\n    chatId: uuid(\"chatId\")\n      .notNull()\n      .references(() => chat.id),\n    messageId: uuid(\"messageId\")\n      .notNull()\n      .references(() => messageDeprecated.id),\n    isUpvoted: boolean(\"isUpvoted\").notNull(),\n  },\n  (table) => {\n    return {\n      pk: primaryKey({ columns: [table.chatId, table.messageId] }),\n    };\n  }\n);\n\nexport type VoteDeprecated = InferSelectModel<typeof voteDeprecated>;\n\nexport const vote = pgTable(\n  \"Vote_v2\",\n  {\n    chatId: uuid(\"chatId\")\n      .notNull()\n      .references(() => chat.id),\n    messageId: uuid(\"messageId\")\n      .notNull()\n      .references(() => message.id),\n    isUpvoted: boolean(\"isUpvoted\").notNull(),\n  },\n  (table) => {\n    return {\n      pk: primaryKey({ columns: [table.chatId, table.messageId] }),\n    };\n  }\n);\n\nexport type Vote = InferSelectModel<typeof vote>;\n\nexport const document = pgTable(\n  \"Document\",\n  {\n    id: uuid(\"id\").notNull().defaultRandom(),\n    createdAt: timestamp(\"createdAt\").notNull(),\n    title: text(\"title\").notNull(),\n    content: text(\"content\"),\n    kind: varchar(\"text\", { enum: [\"text\", \"code\", \"image\", \"sheet\"] })\n      .notNull()\n      .default(\"text\"),\n    userId: uuid(\"userId\")\n      .notNull()\n      .references(() => user.id),\n  },\n  (table) => {\n    return {\n      pk: primaryKey({ columns: [table.id, table.createdAt] }),\n    };\n  }\n);\n\nexport type Document = InferSelectModel<typeof document>;\n\nexport const suggestion = pgTable(\n  \"Suggestion\",\n  {\n    id: uuid(\"id\").notNull().defaultRandom(),\n    documentId: uuid(\"documentId\").notNull(),\n    documentCreatedAt: timestamp(\"documentCreatedAt\").notNull(),\n    originalText: text(\"originalText\").notNull(),\n    suggestedText: text(\"suggestedText\").notNull(),\n    description: text(\"description\"),\n    isResolved: boolean(\"isResolved\").notNull().default(false),\n    userId: uuid(\"userId\")\n      .notNull()\n      .references(() => user.id),\n    createdAt: timestamp(\"createdAt\").notNull(),\n  },\n  (table) => ({\n    pk: primaryKey({ columns: [table.id] }),\n    documentRef: foreignKey({\n      columns: [table.documentId, table.documentCreatedAt],\n      foreignColumns: [document.id, document.createdAt],\n    }),\n  })\n);\n\nexport type Suggestion = InferSelectModel<typeof suggestion>;\n\nexport const stream = pgTable(\n  \"Stream\",\n  {\n    id: uuid(\"id\").notNull().defaultRandom(),\n    chatId: uuid(\"chatId\").notNull(),\n    createdAt: timestamp(\"createdAt\").notNull(),\n  },\n  (table) => ({\n    pk: primaryKey({ columns: [table.id] }),\n    chatRef: foreignKey({\n      columns: [table.chatId],\n      foreignColumns: [chat.id],\n    }),\n  })\n);\n\nexport type Stream = InferSelectModel<typeof stream>;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 582, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/lib/db/queries.ts"],"sourcesContent":["import \"server-only\";\n\nimport {\n  and,\n  asc,\n  count,\n  desc,\n  eq,\n  gt,\n  gte,\n  inArray,\n  lt,\n  type SQL,\n} from \"drizzle-orm\";\nimport { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport type { ArtifactKind } from \"@/components/artifact\";\nimport type { VisibilityType } from \"@/components/visibility-selector\";\nimport { ChatSDKError } from \"../errors\";\nimport type { AppUsage } from \"../usage\";\nimport { generateUUID } from \"../utils\";\nimport {\n  type Chat,\n  chat,\n  type DBMessage,\n  document,\n  message,\n  type Suggestion,\n  stream,\n  suggestion,\n  type User,\n  user,\n  vote,\n} from \"./schema\";\nimport { generateHashedPassword } from \"./utils\";\n\n// Optionally, if not using email/pass login, you can\n// use the Drizzle adapter for Auth.js / NextAuth\n// https://authjs.dev/reference/adapter/drizzle\n\n// biome-ignore lint: Forbidden non-null assertion.\nconst client = postgres(process.env.POSTGRES_URL!);\nconst db = drizzle(client);\n\nexport async function getUser(email: string): Promise<User[]> {\n  try {\n    return await db.select().from(user).where(eq(user.email, email));\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get user by email\"\n    );\n  }\n}\n\nexport async function createUser(email: string, password: string) {\n  const hashedPassword = generateHashedPassword(password);\n\n  try {\n    return await db.insert(user).values({ email, password: hashedPassword });\n  } catch (_error) {\n    throw new ChatSDKError(\"bad_request:database\", \"Failed to create user\");\n  }\n}\n\nexport async function createGuestUser() {\n  const email = `guest-${Date.now()}`;\n  const password = generateHashedPassword(generateUUID());\n\n  try {\n    return await db.insert(user).values({ email, password }).returning({\n      id: user.id,\n      email: user.email,\n    });\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to create guest user\"\n    );\n  }\n}\n\nexport async function saveChat({\n  id,\n  userId,\n  title,\n  visibility,\n}: {\n  id: string;\n  userId: string;\n  title: string;\n  visibility: VisibilityType;\n}) {\n  try {\n    return await db.insert(chat).values({\n      id,\n      createdAt: new Date(),\n      userId,\n      title,\n      visibility,\n    });\n  } catch (_error) {\n    throw new ChatSDKError(\"bad_request:database\", \"Failed to save chat\");\n  }\n}\n\nexport async function deleteChatById({ id }: { id: string }) {\n  try {\n    await db.delete(vote).where(eq(vote.chatId, id));\n    await db.delete(message).where(eq(message.chatId, id));\n    await db.delete(stream).where(eq(stream.chatId, id));\n\n    const [chatsDeleted] = await db\n      .delete(chat)\n      .where(eq(chat.id, id))\n      .returning();\n    return chatsDeleted;\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to delete chat by id\"\n    );\n  }\n}\n\nexport async function getChatsByUserId({\n  id,\n  limit,\n  startingAfter,\n  endingBefore,\n}: {\n  id: string;\n  limit: number;\n  startingAfter: string | null;\n  endingBefore: string | null;\n}) {\n  try {\n    const extendedLimit = limit + 1;\n\n    const query = (whereCondition?: SQL<any>) =>\n      db\n        .select()\n        .from(chat)\n        .where(\n          whereCondition\n            ? and(whereCondition, eq(chat.userId, id))\n            : eq(chat.userId, id)\n        )\n        .orderBy(desc(chat.createdAt))\n        .limit(extendedLimit);\n\n    let filteredChats: Chat[] = [];\n\n    if (startingAfter) {\n      const [selectedChat] = await db\n        .select()\n        .from(chat)\n        .where(eq(chat.id, startingAfter))\n        .limit(1);\n\n      if (!selectedChat) {\n        throw new ChatSDKError(\n          \"not_found:database\",\n          `Chat with id ${startingAfter} not found`\n        );\n      }\n\n      filteredChats = await query(gt(chat.createdAt, selectedChat.createdAt));\n    } else if (endingBefore) {\n      const [selectedChat] = await db\n        .select()\n        .from(chat)\n        .where(eq(chat.id, endingBefore))\n        .limit(1);\n\n      if (!selectedChat) {\n        throw new ChatSDKError(\n          \"not_found:database\",\n          `Chat with id ${endingBefore} not found`\n        );\n      }\n\n      filteredChats = await query(lt(chat.createdAt, selectedChat.createdAt));\n    } else {\n      filteredChats = await query();\n    }\n\n    const hasMore = filteredChats.length > limit;\n\n    return {\n      chats: hasMore ? filteredChats.slice(0, limit) : filteredChats,\n      hasMore,\n    };\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get chats by user id\"\n    );\n  }\n}\n\nexport async function getChatById({ id }: { id: string }) {\n  try {\n    const [selectedChat] = await db.select().from(chat).where(eq(chat.id, id));\n    if (!selectedChat) {\n      return null;\n    }\n\n    return selectedChat;\n  } catch (_error) {\n    throw new ChatSDKError(\"bad_request:database\", \"Failed to get chat by id\");\n  }\n}\n\nexport async function saveMessages({ messages }: { messages: DBMessage[] }) {\n  try {\n    return await db.insert(message).values(messages);\n  } catch (_error) {\n    throw new ChatSDKError(\"bad_request:database\", \"Failed to save messages\");\n  }\n}\n\nexport async function getMessagesByChatId({ id }: { id: string }) {\n  try {\n    return await db\n      .select()\n      .from(message)\n      .where(eq(message.chatId, id))\n      .orderBy(asc(message.createdAt));\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get messages by chat id\"\n    );\n  }\n}\n\nexport async function voteMessage({\n  chatId,\n  messageId,\n  type,\n}: {\n  chatId: string;\n  messageId: string;\n  type: \"up\" | \"down\";\n}) {\n  try {\n    const [existingVote] = await db\n      .select()\n      .from(vote)\n      .where(and(eq(vote.messageId, messageId)));\n\n    if (existingVote) {\n      return await db\n        .update(vote)\n        .set({ isUpvoted: type === \"up\" })\n        .where(and(eq(vote.messageId, messageId), eq(vote.chatId, chatId)));\n    }\n    return await db.insert(vote).values({\n      chatId,\n      messageId,\n      isUpvoted: type === \"up\",\n    });\n  } catch (_error) {\n    throw new ChatSDKError(\"bad_request:database\", \"Failed to vote message\");\n  }\n}\n\nexport async function getVotesByChatId({ id }: { id: string }) {\n  try {\n    return await db.select().from(vote).where(eq(vote.chatId, id));\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get votes by chat id\"\n    );\n  }\n}\n\nexport async function saveDocument({\n  id,\n  title,\n  kind,\n  content,\n  userId,\n}: {\n  id: string;\n  title: string;\n  kind: ArtifactKind;\n  content: string;\n  userId: string;\n}) {\n  try {\n    return await db\n      .insert(document)\n      .values({\n        id,\n        title,\n        kind,\n        content,\n        userId,\n        createdAt: new Date(),\n      })\n      .returning();\n  } catch (_error) {\n    throw new ChatSDKError(\"bad_request:database\", \"Failed to save document\");\n  }\n}\n\nexport async function getDocumentsById({ id }: { id: string }) {\n  try {\n    const documents = await db\n      .select()\n      .from(document)\n      .where(eq(document.id, id))\n      .orderBy(asc(document.createdAt));\n\n    return documents;\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get documents by id\"\n    );\n  }\n}\n\nexport async function getDocumentById({ id }: { id: string }) {\n  try {\n    const [selectedDocument] = await db\n      .select()\n      .from(document)\n      .where(eq(document.id, id))\n      .orderBy(desc(document.createdAt));\n\n    return selectedDocument;\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get document by id\"\n    );\n  }\n}\n\nexport async function deleteDocumentsByIdAfterTimestamp({\n  id,\n  timestamp,\n}: {\n  id: string;\n  timestamp: Date;\n}) {\n  try {\n    await db\n      .delete(suggestion)\n      .where(\n        and(\n          eq(suggestion.documentId, id),\n          gt(suggestion.documentCreatedAt, timestamp)\n        )\n      );\n\n    return await db\n      .delete(document)\n      .where(and(eq(document.id, id), gt(document.createdAt, timestamp)))\n      .returning();\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to delete documents by id after timestamp\"\n    );\n  }\n}\n\nexport async function saveSuggestions({\n  suggestions,\n}: {\n  suggestions: Suggestion[];\n}) {\n  try {\n    return await db.insert(suggestion).values(suggestions);\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to save suggestions\"\n    );\n  }\n}\n\nexport async function getSuggestionsByDocumentId({\n  documentId,\n}: {\n  documentId: string;\n}) {\n  try {\n    return await db\n      .select()\n      .from(suggestion)\n      .where(and(eq(suggestion.documentId, documentId)));\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get suggestions by document id\"\n    );\n  }\n}\n\nexport async function getMessageById({ id }: { id: string }) {\n  try {\n    return await db.select().from(message).where(eq(message.id, id));\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get message by id\"\n    );\n  }\n}\n\nexport async function deleteMessagesByChatIdAfterTimestamp({\n  chatId,\n  timestamp,\n}: {\n  chatId: string;\n  timestamp: Date;\n}) {\n  try {\n    const messagesToDelete = await db\n      .select({ id: message.id })\n      .from(message)\n      .where(\n        and(eq(message.chatId, chatId), gte(message.createdAt, timestamp))\n      );\n\n    const messageIds = messagesToDelete.map(\n      (currentMessage) => currentMessage.id\n    );\n\n    if (messageIds.length > 0) {\n      await db\n        .delete(vote)\n        .where(\n          and(eq(vote.chatId, chatId), inArray(vote.messageId, messageIds))\n        );\n\n      return await db\n        .delete(message)\n        .where(\n          and(eq(message.chatId, chatId), inArray(message.id, messageIds))\n        );\n    }\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to delete messages by chat id after timestamp\"\n    );\n  }\n}\n\nexport async function updateChatVisiblityById({\n  chatId,\n  visibility,\n}: {\n  chatId: string;\n  visibility: \"private\" | \"public\";\n}) {\n  try {\n    return await db.update(chat).set({ visibility }).where(eq(chat.id, chatId));\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to update chat visibility by id\"\n    );\n  }\n}\n\nexport async function updateChatLastContextById({\n  chatId,\n  context,\n}: {\n  chatId: string;\n  // Store merged server-enriched usage object\n  context: AppUsage;\n}) {\n  try {\n    return await db\n      .update(chat)\n      .set({ lastContext: context })\n      .where(eq(chat.id, chatId));\n  } catch (error) {\n    console.warn(\"Failed to update lastContext for chat\", chatId, error);\n    return;\n  }\n}\n\nexport async function getMessageCountByUserId({\n  id,\n  differenceInHours,\n}: {\n  id: string;\n  differenceInHours: number;\n}) {\n  try {\n    const twentyFourHoursAgo = new Date(\n      Date.now() - differenceInHours * 60 * 60 * 1000\n    );\n\n    const [stats] = await db\n      .select({ count: count(message.id) })\n      .from(message)\n      .innerJoin(chat, eq(message.chatId, chat.id))\n      .where(\n        and(\n          eq(chat.userId, id),\n          gte(message.createdAt, twentyFourHoursAgo),\n          eq(message.role, \"user\")\n        )\n      )\n      .execute();\n\n    return stats?.count ?? 0;\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get message count by user id\"\n    );\n  }\n}\n\nexport async function createStreamId({\n  streamId,\n  chatId,\n}: {\n  streamId: string;\n  chatId: string;\n}) {\n  try {\n    await db\n      .insert(stream)\n      .values({ id: streamId, chatId, createdAt: new Date() });\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to create stream id\"\n    );\n  }\n}\n\nexport async function getStreamIdsByChatId({ chatId }: { chatId: string }) {\n  try {\n    const streamIds = await db\n      .select({ id: stream.id })\n      .from(stream)\n      .where(eq(stream.chatId, chatId))\n      .orderBy(asc(stream.createdAt))\n      .execute();\n\n    return streamIds.map(({ id }) => id);\n  } catch (_error) {\n    throw new ChatSDKError(\n      \"bad_request:database\",\n      \"Failed to get stream ids by chat id\"\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 897, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/app/%28auth%29/auth.config.ts"],"sourcesContent":["import type { NextAuthConfig } from \"next-auth\";\n\nexport const authConfig = {\n  pages: {\n    signIn: \"/login\",\n    newUser: \"/\",\n  },\n  providers: [\n    // added later in auth.ts since it requires bcrypt which is only compatible with Node.js\n    // while this file is also used in non-Node.js environments\n  ],\n  callbacks: {},\n} satisfies NextAuthConfig;\n"],"names":[],"mappings":";;;AAEO,MAAM,aAAa;IACxB,OAAO;QACL,QAAQ;QACR,SAAS;IACX;IACA,WAAW,EAGV;IACD,WAAW,CAAC;AACd","debugId":null}},
    {"offset": {"line": 914, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/app/%28auth%29/auth.ts"],"sourcesContent":["import { compare } from \"bcrypt-ts\";\nimport NextAuth, { type DefaultSession } from \"next-auth\";\nimport type { DefaultJWT } from \"next-auth/jwt\";\nimport Credentials from \"next-auth/providers/credentials\";\nimport { DUMMY_PASSWORD } from \"@/lib/constants\";\nimport { createGuestUser, getUser } from \"@/lib/db/queries\";\nimport { authConfig } from \"./auth.config\";\n\nexport type UserType = \"guest\" | \"regular\";\n\ndeclare module \"next-auth\" {\n  interface Session extends DefaultSession {\n    user: {\n      id: string;\n      type: UserType;\n    } & DefaultSession[\"user\"];\n  }\n\n  // biome-ignore lint/nursery/useConsistentTypeDefinitions: \"Required\"\n  interface User {\n    id?: string;\n    email?: string | null;\n    type: UserType;\n  }\n}\n\ndeclare module \"next-auth/jwt\" {\n  interface JWT extends DefaultJWT {\n    id: string;\n    type: UserType;\n  }\n}\n\nexport const {\n  handlers: { GET, POST },\n  auth,\n  signIn,\n  signOut,\n} = NextAuth({\n  ...authConfig,\n  providers: [\n    Credentials({\n      credentials: {},\n      async authorize({ email, password }: any) {\n        const users = await getUser(email);\n\n        if (users.length === 0) {\n          await compare(password, DUMMY_PASSWORD);\n          return null;\n        }\n\n        const [user] = users;\n\n        if (!user.password) {\n          await compare(password, DUMMY_PASSWORD);\n          return null;\n        }\n\n        const passwordsMatch = await compare(password, user.password);\n\n        if (!passwordsMatch) {\n          return null;\n        }\n\n        return { ...user, type: \"regular\" };\n      },\n    }),\n    Credentials({\n      id: \"guest\",\n      credentials: {},\n      async authorize() {\n        const [guestUser] = await createGuestUser();\n        return { ...guestUser, type: \"guest\" };\n      },\n    }),\n  ],\n  callbacks: {\n    jwt({ token, user }) {\n      if (user) {\n        token.id = user.id as string;\n        token.type = user.type;\n      }\n\n      return token;\n    },\n    session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.id;\n        session.user.type = token.type;\n      }\n\n      return session;\n    },\n  },\n});\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;;;;;;;AA2BO,MAAM,EACX,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,EACvB,IAAI,EACJ,MAAM,EACN,OAAO,EACR,GAAG,CAAA,GAAA,4WAAA,CAAA,UAAQ,AAAD,EAAE;IACX,GAAG,mIAAA,CAAA,aAAU;IACb,WAAW;QACT,CAAA,GAAA,wNAAA,CAAA,UAAW,AAAD,EAAE;YACV,aAAa,CAAC;YACd,MAAM,WAAU,EAAE,KAAK,EAAE,QAAQ,EAAO;gBACtC,MAAM,QAAQ,MAAM,CAAA,GAAA,sHAAA,CAAA,UAAO,AAAD,EAAE;gBAE5B,IAAI,MAAM,MAAM,KAAK,GAAG;oBACtB,MAAM,CAAA,GAAA,wMAAA,CAAA,UAAO,AAAD,EAAE,UAAU,kHAAA,CAAA,iBAAc;oBACtC,OAAO;gBACT;gBAEA,MAAM,CAAC,KAAK,GAAG;gBAEf,IAAI,CAAC,KAAK,QAAQ,EAAE;oBAClB,MAAM,CAAA,GAAA,wMAAA,CAAA,UAAO,AAAD,EAAE,UAAU,kHAAA,CAAA,iBAAc;oBACtC,OAAO;gBACT;gBAEA,MAAM,iBAAiB,MAAM,CAAA,GAAA,wMAAA,CAAA,UAAO,AAAD,EAAE,UAAU,KAAK,QAAQ;gBAE5D,IAAI,CAAC,gBAAgB;oBACnB,OAAO;gBACT;gBAEA,OAAO;oBAAE,GAAG,IAAI;oBAAE,MAAM;gBAAU;YACpC;QACF;QACA,CAAA,GAAA,wNAAA,CAAA,UAAW,AAAD,EAAE;YACV,IAAI;YACJ,aAAa,CAAC;YACd,MAAM;gBACJ,MAAM,CAAC,UAAU,GAAG,MAAM,CAAA,GAAA,sHAAA,CAAA,kBAAe,AAAD;gBACxC,OAAO;oBAAE,GAAG,SAAS;oBAAE,MAAM;gBAAQ;YACvC;QACF;KACD;IACD,WAAW;QACT,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACjB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YAEA,OAAO;QACT;QACA,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YACxB,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAChC;YAEA,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 996, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/app/%28chat%29/api/document/route.ts"],"sourcesContent":["import { auth } from \"@/app/(auth)/auth\";\nimport type { ArtifactKind } from \"@/components/artifact\";\nimport {\n  deleteDocumentsByIdAfterTimestamp,\n  getDocumentsById,\n  saveDocument,\n} from \"@/lib/db/queries\";\nimport { ChatSDKError } from \"@/lib/errors\";\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const id = searchParams.get(\"id\");\n\n  if (!id) {\n    return new ChatSDKError(\n      \"bad_request:api\",\n      \"Parameter id is missing\"\n    ).toResponse();\n  }\n\n  const session = await auth();\n\n  if (!session?.user) {\n    return new ChatSDKError(\"unauthorized:document\").toResponse();\n  }\n\n  const documents = await getDocumentsById({ id });\n\n  const [document] = documents;\n\n  if (!document) {\n    return new ChatSDKError(\"not_found:document\").toResponse();\n  }\n\n  if (document.userId !== session.user.id) {\n    return new ChatSDKError(\"forbidden:document\").toResponse();\n  }\n\n  return Response.json(documents, { status: 200 });\n}\n\nexport async function POST(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const id = searchParams.get(\"id\");\n\n  if (!id) {\n    return new ChatSDKError(\n      \"bad_request:api\",\n      \"Parameter id is required.\"\n    ).toResponse();\n  }\n\n  const session = await auth();\n\n  if (!session?.user) {\n    return new ChatSDKError(\"not_found:document\").toResponse();\n  }\n\n  const {\n    content,\n    title,\n    kind,\n  }: { content: string; title: string; kind: ArtifactKind } =\n    await request.json();\n\n  const documents = await getDocumentsById({ id });\n\n  if (documents.length > 0) {\n    const [doc] = documents;\n\n    if (doc.userId !== session.user.id) {\n      return new ChatSDKError(\"forbidden:document\").toResponse();\n    }\n  }\n\n  const document = await saveDocument({\n    id,\n    content,\n    title,\n    kind,\n    userId: session.user.id,\n  });\n\n  return Response.json(document, { status: 200 });\n}\n\nexport async function DELETE(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const id = searchParams.get(\"id\");\n  const timestamp = searchParams.get(\"timestamp\");\n\n  if (!id) {\n    return new ChatSDKError(\n      \"bad_request:api\",\n      \"Parameter id is required.\"\n    ).toResponse();\n  }\n\n  if (!timestamp) {\n    return new ChatSDKError(\n      \"bad_request:api\",\n      \"Parameter timestamp is required.\"\n    ).toResponse();\n  }\n\n  const session = await auth();\n\n  if (!session?.user) {\n    return new ChatSDKError(\"unauthorized:document\").toResponse();\n  }\n\n  const documents = await getDocumentsById({ id });\n\n  const [document] = documents;\n\n  if (document.userId !== session.user.id) {\n    return new ChatSDKError(\"forbidden:document\").toResponse();\n  }\n\n  const documentsDeleted = await deleteDocumentsByIdAfterTimestamp({\n    id,\n    timestamp: new Date(timestamp),\n  });\n\n  return Response.json(documentsDeleted, { status: 200 });\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}