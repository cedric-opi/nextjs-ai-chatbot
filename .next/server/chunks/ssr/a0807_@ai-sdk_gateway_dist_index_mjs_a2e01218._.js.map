{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/gateway-provider.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/errors/as-gateway-error.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/errors/create-gateway-error.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/errors/gateway-error.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/errors/gateway-authentication-error.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/errors/gateway-invalid-request-error.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/errors/gateway-rate-limit-error.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/errors/gateway-model-not-found-error.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/errors/gateway-internal-server-error.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/errors/gateway-response-error.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/errors/extract-api-call-response.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/errors/parse-auth-method.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/gateway-fetch-metadata.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/gateway-language-model.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/gateway-embedding-model.ts","file:///Users/vihuy/OneDrive/Documents/ATI/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/%40ai-sdk%2Bgateway%401.0.15_zod%403.25.76/node_modules/%40ai-sdk/gateway/src/vercel-environment.ts"],"sourcesContent":["import { NoSuchModelError } from '@ai-sdk/provider';\nimport {\n  loadOptionalSetting,\n  withoutTrailingSlash,\n  type FetchFunction,\n} from '@ai-sdk/provider-utils';\nimport { asGatewayError, GatewayAuthenticationError } from './errors';\nimport {\n  GATEWAY_AUTH_METHOD_HEADER,\n  parseAuthMethod,\n} from './errors/parse-auth-method';\nimport {\n  GatewayFetchMetadata,\n  type GatewayFetchMetadataResponse,\n} from './gateway-fetch-metadata';\nimport { GatewayLanguageModel } from './gateway-language-model';\nimport { GatewayEmbeddingModel } from './gateway-embedding-model';\nimport type { GatewayEmbeddingModelId } from './gateway-embedding-model-settings';\nimport { getVercelOidcToken, getVercelRequestId } from './vercel-environment';\nimport type { GatewayModelId } from './gateway-language-model-settings';\nimport type {\n  LanguageModelV2,\n  EmbeddingModelV2,\n  ProviderV2,\n} from '@ai-sdk/provider';\n\nexport interface GatewayProvider extends ProviderV2 {\n  (modelId: GatewayModelId): LanguageModelV2;\n\n  /**\nCreates a model for text generation.\n*/\n  languageModel(modelId: GatewayModelId): LanguageModelV2;\n\n  /**\nReturns available providers and models for use with the remote provider.\n */\n  getAvailableModels(): Promise<GatewayFetchMetadataResponse>;\n\n  /**\nCreates a model for generating text embeddings.\n*/\n  textEmbeddingModel(\n    modelId: GatewayEmbeddingModelId,\n  ): EmbeddingModelV2<string>;\n}\n\nexport interface GatewayProviderSettings {\n  /**\nThe base URL prefix for API calls. Defaults to `https://ai-gateway.vercel.sh/v1/ai`.\n   */\n  baseURL?: string;\n\n  /**\nAPI key that is being sent using the `Authorization` header.\n   */\n  apiKey?: string;\n\n  /**\nCustom headers to include in the requests.\n     */\n  headers?: Record<string, string>;\n\n  /**\nCustom fetch implementation. You can use it as a middleware to intercept requests,\nor to provide a custom fetch implementation for e.g. testing.\n    */\n  fetch?: FetchFunction;\n\n  /**\nHow frequently to refresh the metadata cache in milliseconds.\n   */\n  metadataCacheRefreshMillis?: number;\n\n  /**\n   * @internal For testing purposes only\n   */\n  _internal?: {\n    currentDate?: () => Date;\n  };\n}\n\nconst AI_GATEWAY_PROTOCOL_VERSION = '0.0.1';\n\n/**\nCreate a remote provider instance.\n */\nexport function createGatewayProvider(\n  options: GatewayProviderSettings = {},\n): GatewayProvider {\n  let pendingMetadata: Promise<GatewayFetchMetadataResponse> | null = null;\n  let metadataCache: GatewayFetchMetadataResponse | null = null;\n  const cacheRefreshMillis =\n    options.metadataCacheRefreshMillis ?? 1000 * 60 * 5;\n  let lastFetchTime = 0;\n\n  const baseURL =\n    withoutTrailingSlash(options.baseURL) ??\n    'https://ai-gateway.vercel.sh/v1/ai';\n\n  const getHeaders = async () => {\n    const auth = await getGatewayAuthToken(options);\n    if (auth) {\n      return {\n        Authorization: `Bearer ${auth.token}`,\n        'ai-gateway-protocol-version': AI_GATEWAY_PROTOCOL_VERSION,\n        [GATEWAY_AUTH_METHOD_HEADER]: auth.authMethod,\n        ...options.headers,\n      };\n    }\n\n    throw GatewayAuthenticationError.createContextualError({\n      apiKeyProvided: false,\n      oidcTokenProvided: false,\n      statusCode: 401,\n    });\n  };\n\n  const createO11yHeaders = () => {\n    const deploymentId = loadOptionalSetting({\n      settingValue: undefined,\n      environmentVariableName: 'VERCEL_DEPLOYMENT_ID',\n    });\n    const environment = loadOptionalSetting({\n      settingValue: undefined,\n      environmentVariableName: 'VERCEL_ENV',\n    });\n    const region = loadOptionalSetting({\n      settingValue: undefined,\n      environmentVariableName: 'VERCEL_REGION',\n    });\n\n    return async () => {\n      const requestId = await getVercelRequestId();\n      return {\n        ...(deploymentId && { 'ai-o11y-deployment-id': deploymentId }),\n        ...(environment && { 'ai-o11y-environment': environment }),\n        ...(region && { 'ai-o11y-region': region }),\n        ...(requestId && { 'ai-o11y-request-id': requestId }),\n      };\n    };\n  };\n\n  const createLanguageModel = (modelId: GatewayModelId) => {\n    return new GatewayLanguageModel(modelId, {\n      provider: 'gateway',\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      o11yHeaders: createO11yHeaders(),\n    });\n  };\n\n  const getAvailableModels = async () => {\n    const now = options._internal?.currentDate?.().getTime() ?? Date.now();\n    if (!pendingMetadata || now - lastFetchTime > cacheRefreshMillis) {\n      lastFetchTime = now;\n\n      pendingMetadata = new GatewayFetchMetadata({\n        baseURL,\n        headers: getHeaders,\n        fetch: options.fetch,\n      })\n        .getAvailableModels()\n        .then(metadata => {\n          metadataCache = metadata;\n          return metadata;\n        })\n        .catch(async (error: unknown) => {\n          throw asGatewayError(error, parseAuthMethod(await getHeaders()));\n        });\n    }\n\n    return metadataCache ? Promise.resolve(metadataCache) : pendingMetadata;\n  };\n\n  const provider = function (modelId: GatewayModelId) {\n    if (new.target) {\n      throw new Error(\n        'The Gateway Provider model function cannot be called with the new keyword.',\n      );\n    }\n\n    return createLanguageModel(modelId);\n  };\n\n  provider.getAvailableModels = getAvailableModels;\n  provider.imageModel = (modelId: string) => {\n    throw new NoSuchModelError({ modelId, modelType: 'imageModel' });\n  };\n  provider.languageModel = createLanguageModel;\n  provider.textEmbeddingModel = (modelId: GatewayEmbeddingModelId) => {\n    return new GatewayEmbeddingModel(modelId, {\n      provider: 'gateway',\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      o11yHeaders: createO11yHeaders(),\n    });\n  };\n\n  return provider;\n}\n\nexport const gateway = createGatewayProvider();\n\nexport async function getGatewayAuthToken(\n  options: GatewayProviderSettings,\n): Promise<{\n  token: string;\n  authMethod: 'api-key' | 'oidc';\n} | null> {\n  const apiKey = loadOptionalSetting({\n    settingValue: options.apiKey,\n    environmentVariableName: 'AI_GATEWAY_API_KEY',\n  });\n\n  if (apiKey) {\n    return {\n      token: apiKey,\n      authMethod: 'api-key',\n    };\n  }\n\n  try {\n    const oidcToken = await getVercelOidcToken();\n    return {\n      token: oidcToken,\n      authMethod: 'oidc',\n    };\n  } catch {\n    return null;\n  }\n}\n","import { APICallError } from '@ai-sdk/provider';\nimport { extractApiCallResponse, GatewayError } from '.';\nimport { createGatewayErrorFromResponse } from './create-gateway-error';\n\nexport function asGatewayError(\n  error: unknown,\n  authMethod?: 'api-key' | 'oidc',\n) {\n  if (GatewayError.isInstance(error)) {\n    return error;\n  }\n\n  if (APICallError.isInstance(error)) {\n    return createGatewayErrorFromResponse({\n      response: extractApiCallResponse(error),\n      statusCode: error.statusCode ?? 500,\n      defaultMessage: 'Gateway request failed',\n      cause: error,\n      authMethod,\n    });\n  }\n\n  return createGatewayErrorFromResponse({\n    response: {},\n    statusCode: 500,\n    defaultMessage:\n      error instanceof Error\n        ? `Gateway request failed: ${error.message}`\n        : 'Unknown Gateway error',\n    cause: error,\n    authMethod,\n  });\n}\n","import { z } from 'zod/v4';\nimport type { GatewayError } from './gateway-error';\nimport { GatewayAuthenticationError } from './gateway-authentication-error';\nimport { GatewayInvalidRequestError } from './gateway-invalid-request-error';\nimport { GatewayRateLimitError } from './gateway-rate-limit-error';\nimport {\n  GatewayModelNotFoundError,\n  modelNotFoundParamSchema,\n} from './gateway-model-not-found-error';\nimport { GatewayInternalServerError } from './gateway-internal-server-error';\nimport { GatewayResponseError } from './gateway-response-error';\n\nexport function createGatewayErrorFromResponse({\n  response,\n  statusCode,\n  defaultMessage = 'Gateway request failed',\n  cause,\n  authMethod,\n}: {\n  response: unknown;\n  statusCode: number;\n  defaultMessage?: string;\n  cause?: unknown;\n  authMethod?: 'api-key' | 'oidc';\n}): GatewayError {\n  const parseResult = gatewayErrorResponseSchema.safeParse(response);\n  if (!parseResult.success) {\n    return new GatewayResponseError({\n      message: `Invalid error response format: ${defaultMessage}`,\n      statusCode,\n      response,\n      validationError: parseResult.error,\n      cause,\n    });\n  }\n\n  const validatedResponse: GatewayErrorResponse = parseResult.data;\n  const errorType = validatedResponse.error.type;\n  const message = validatedResponse.error.message;\n\n  switch (errorType) {\n    case 'authentication_error':\n      return GatewayAuthenticationError.createContextualError({\n        apiKeyProvided: authMethod === 'api-key',\n        oidcTokenProvided: authMethod === 'oidc',\n        statusCode,\n        cause,\n      });\n    case 'invalid_request_error':\n      return new GatewayInvalidRequestError({ message, statusCode, cause });\n    case 'rate_limit_exceeded':\n      return new GatewayRateLimitError({ message, statusCode, cause });\n    case 'model_not_found': {\n      const modelResult = modelNotFoundParamSchema.safeParse(\n        validatedResponse.error.param,\n      );\n      return new GatewayModelNotFoundError({\n        message,\n        statusCode,\n        modelId: modelResult.success ? modelResult.data.modelId : undefined,\n        cause,\n      });\n    }\n    case 'internal_server_error':\n      return new GatewayInternalServerError({ message, statusCode, cause });\n    default:\n      return new GatewayInternalServerError({ message, statusCode, cause });\n  }\n}\n\nconst gatewayErrorResponseSchema = z.object({\n  error: z.object({\n    message: z.string(),\n    type: z.string().nullish(),\n    param: z.unknown().nullish(),\n    code: z.union([z.string(), z.number()]).nullish(),\n  }),\n});\n\nexport type GatewayErrorResponse = z.infer<typeof gatewayErrorResponseSchema>;\n","const marker = 'vercel.ai.gateway.error';\nconst symbol = Symbol.for(marker);\n\nexport abstract class GatewayError extends Error {\n  private readonly [symbol] = true; // used in isInstance\n\n  abstract readonly name: string;\n  abstract readonly type: string;\n  readonly statusCode: number;\n  readonly cause?: unknown;\n\n  constructor({\n    message,\n    statusCode = 500,\n    cause,\n  }: {\n    message: string;\n    statusCode?: number;\n    cause?: unknown;\n  }) {\n    super(message);\n    this.statusCode = statusCode;\n    this.cause = cause;\n  }\n\n  /**\n   * Checks if the given error is a Gateway Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is a Gateway Error, false otherwise.\n   */\n  static isInstance(error: unknown): error is GatewayError {\n    return GatewayError.hasMarker(error);\n  }\n\n  static hasMarker(error: unknown): error is GatewayError {\n    return (\n      typeof error === 'object' &&\n      error !== null &&\n      symbol in error &&\n      (error as any)[symbol] === true\n    );\n  }\n}\n","import { GatewayError } from './gateway-error';\n\nconst name = 'GatewayAuthenticationError';\nconst marker = `vercel.ai.gateway.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * Authentication failed - invalid API key or OIDC token\n */\nexport class GatewayAuthenticationError extends GatewayError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly name = name;\n  readonly type = 'authentication_error';\n\n  constructor({\n    message = 'Authentication failed',\n    statusCode = 401,\n    cause,\n  }: {\n    message?: string;\n    statusCode?: number;\n    cause?: unknown;\n  } = {}) {\n    super({ message, statusCode, cause });\n  }\n\n  static isInstance(error: unknown): error is GatewayAuthenticationError {\n    return GatewayError.hasMarker(error) && symbol in error;\n  }\n\n  /**\n   * Creates a contextual error message when authentication fails\n   */\n  static createContextualError({\n    apiKeyProvided,\n    oidcTokenProvided,\n    message = 'Authentication failed',\n    statusCode = 401,\n    cause,\n  }: {\n    apiKeyProvided: boolean;\n    oidcTokenProvided: boolean;\n    message?: string;\n    statusCode?: number;\n    cause?: unknown;\n  }): GatewayAuthenticationError {\n    let contextualMessage: string;\n\n    if (apiKeyProvided) {\n      contextualMessage = `AI Gateway authentication failed: Invalid API key provided.\n\nThe token is expected to be provided via the 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.`;\n    } else if (oidcTokenProvided) {\n      contextualMessage = `AI Gateway authentication failed: Invalid OIDC token provided.\n\nThe token is expected to be provided via the 'VERCEL_OIDC_TOKEN' environment variable. It expires every 12 hours.\n- make sure your Vercel project settings have OIDC enabled\n- if running locally with 'vercel dev', the token is automatically obtained and refreshed\n- if running locally with your own dev server, run 'vercel env pull' to fetch the token\n- in production/preview, the token is automatically obtained and refreshed\n\nAlternative: Provide an API key via 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.`;\n    } else {\n      contextualMessage = `AI Gateway authentication failed: No authentication provided.\n\nProvide either an API key or OIDC token.\n\nAPI key instructions:\n\nThe token is expected to be provided via the 'apiKey' option or 'AI_GATEWAY_API_KEY' environment variable.\n\nOIDC token instructions:\n\nThe token is expected to be provided via the 'VERCEL_OIDC_TOKEN' environment variable. It expires every 12 hours.\n- make sure your Vercel project settings have OIDC enabled\n- if running locally with 'vercel dev', the token is automatically obtained and refreshed\n- if running locally with your own dev server, run 'vercel env pull' to fetch the token\n- in production/preview, the token is automatically obtained and refreshed`;\n    }\n\n    return new GatewayAuthenticationError({\n      message: contextualMessage,\n      statusCode,\n      cause,\n    });\n  }\n}\n","import { GatewayError } from './gateway-error';\n\nconst name = 'GatewayInvalidRequestError';\nconst marker = `vercel.ai.gateway.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * Invalid request - missing headers, malformed data, etc.\n */\nexport class GatewayInvalidRequestError extends GatewayError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly name = name;\n  readonly type = 'invalid_request_error';\n\n  constructor({\n    message = 'Invalid request',\n    statusCode = 400,\n    cause,\n  }: {\n    message?: string;\n    statusCode?: number;\n    cause?: unknown;\n  } = {}) {\n    super({ message, statusCode, cause });\n  }\n\n  static isInstance(error: unknown): error is GatewayInvalidRequestError {\n    return GatewayError.hasMarker(error) && symbol in error;\n  }\n}\n","import { GatewayError } from './gateway-error';\n\nconst name = 'GatewayRateLimitError';\nconst marker = `vercel.ai.gateway.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * Rate limit exceeded.\n */\nexport class GatewayRateLimitError extends GatewayError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly name = name;\n  readonly type = 'rate_limit_exceeded';\n\n  constructor({\n    message = 'Rate limit exceeded',\n    statusCode = 429,\n    cause,\n  }: {\n    message?: string;\n    statusCode?: number;\n    cause?: unknown;\n  } = {}) {\n    super({ message, statusCode, cause });\n  }\n\n  static isInstance(error: unknown): error is GatewayRateLimitError {\n    return GatewayError.hasMarker(error) && symbol in error;\n  }\n}\n","import { z } from 'zod/v4';\nimport { GatewayError } from './gateway-error';\n\nconst name = 'GatewayModelNotFoundError';\nconst marker = `vercel.ai.gateway.error.${name}`;\nconst symbol = Symbol.for(marker);\n\nexport const modelNotFoundParamSchema = z.object({\n  modelId: z.string(),\n});\n\n/**\n * Model not found or not available\n */\nexport class GatewayModelNotFoundError extends GatewayError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly name = name;\n  readonly type = 'model_not_found';\n  readonly modelId?: string;\n\n  constructor({\n    message = 'Model not found',\n    statusCode = 404,\n    modelId,\n    cause,\n  }: {\n    message?: string;\n    statusCode?: number;\n    modelId?: string;\n    cause?: unknown;\n  } = {}) {\n    super({ message, statusCode, cause });\n    this.modelId = modelId;\n  }\n\n  static isInstance(error: unknown): error is GatewayModelNotFoundError {\n    return GatewayError.hasMarker(error) && symbol in error;\n  }\n}\n","import { GatewayError } from './gateway-error';\n\nconst name = 'GatewayInternalServerError';\nconst marker = `vercel.ai.gateway.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * Internal server error from the Gateway\n */\nexport class GatewayInternalServerError extends GatewayError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly name = name;\n  readonly type = 'internal_server_error';\n\n  constructor({\n    message = 'Internal server error',\n    statusCode = 500,\n    cause,\n  }: {\n    message?: string;\n    statusCode?: number;\n    cause?: unknown;\n  } = {}) {\n    super({ message, statusCode, cause });\n  }\n\n  static isInstance(error: unknown): error is GatewayInternalServerError {\n    return GatewayError.hasMarker(error) && symbol in error;\n  }\n}\n","import { GatewayError } from './gateway-error';\nimport type { ZodError } from 'zod/v4';\n\nconst name = 'GatewayResponseError';\nconst marker = `vercel.ai.gateway.error.${name}`;\nconst symbol = Symbol.for(marker);\n\n/**\n * Gateway response parsing error\n */\nexport class GatewayResponseError extends GatewayError {\n  private readonly [symbol] = true; // used in isInstance\n\n  readonly name = name;\n  readonly type = 'response_error';\n  readonly response?: unknown;\n  readonly validationError?: ZodError;\n\n  constructor({\n    message = 'Invalid response from Gateway',\n    statusCode = 502,\n    response,\n    validationError,\n    cause,\n  }: {\n    message?: string;\n    statusCode?: number;\n    response?: unknown;\n    validationError?: ZodError;\n    cause?: unknown;\n  } = {}) {\n    super({ message, statusCode, cause });\n    this.response = response;\n    this.validationError = validationError;\n  }\n\n  static isInstance(error: unknown): error is GatewayResponseError {\n    return GatewayError.hasMarker(error) && symbol in error;\n  }\n}\n","import type { APICallError } from '@ai-sdk/provider';\n\nexport function extractApiCallResponse(error: APICallError): unknown {\n  if (error.data !== undefined) {\n    return error.data;\n  }\n  if (error.responseBody != null) {\n    try {\n      return JSON.parse(error.responseBody);\n    } catch {\n      return error.responseBody;\n    }\n  }\n  return {};\n}\n","import { z } from 'zod/v4';\n\nexport const GATEWAY_AUTH_METHOD_HEADER = 'ai-gateway-auth-method' as const;\n\nexport function parseAuthMethod(headers: Record<string, string | undefined>) {\n  const result = gatewayAuthMethodSchema.safeParse(\n    headers[GATEWAY_AUTH_METHOD_HEADER],\n  );\n  return result.success ? result.data : undefined;\n}\n\nconst gatewayAuthMethodSchema = z.union([\n  z.literal('api-key'),\n  z.literal('oidc'),\n]);\n","import {\n  createJsonErrorResponseHandler,\n  createJsonResponseHandler,\n  getFromApi,\n  resolve,\n} from '@ai-sdk/provider-utils';\nimport { asGatewayError } from './errors';\nimport type { GatewayConfig } from './gateway-config';\nimport type { GatewayLanguageModelEntry } from './gateway-model-entry';\nimport { z } from 'zod/v4';\n\ntype GatewayFetchMetadataConfig = GatewayConfig;\n\nexport interface GatewayFetchMetadataResponse {\n  models: GatewayLanguageModelEntry[];\n}\n\nexport class GatewayFetchMetadata {\n  constructor(private readonly config: GatewayFetchMetadataConfig) {}\n\n  async getAvailableModels(): Promise<GatewayFetchMetadataResponse> {\n    try {\n      const { value } = await getFromApi({\n        url: `${this.config.baseURL}/config`,\n        headers: await resolve(this.config.headers()),\n        successfulResponseHandler: createJsonResponseHandler(\n          gatewayFetchMetadataSchema,\n        ),\n        failedResponseHandler: createJsonErrorResponseHandler({\n          errorSchema: z.any(),\n          errorToMessage: data => data,\n        }),\n        fetch: this.config.fetch,\n      });\n\n      return value;\n    } catch (error) {\n      throw asGatewayError(error);\n    }\n  }\n}\n\nconst gatewayLanguageModelSpecificationSchema = z.object({\n  specificationVersion: z.literal('v2'),\n  provider: z.string(),\n  modelId: z.string(),\n});\n\nconst gatewayLanguageModelPricingSchema = z\n  .object({\n    input: z.string(),\n    output: z.string(),\n    input_cache_read: z.string().nullish(),\n    input_cache_write: z.string().nullish(),\n  })\n  .transform(({ input, output, input_cache_read, input_cache_write }) => ({\n    input,\n    output,\n    ...(input_cache_read ? { cachedInputTokens: input_cache_read } : {}),\n    ...(input_cache_write\n      ? { cacheCreationInputTokens: input_cache_write }\n      : {}),\n  }));\n\nconst gatewayLanguageModelEntrySchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  description: z.string().nullish(),\n  pricing: gatewayLanguageModelPricingSchema.nullish(),\n  specification: gatewayLanguageModelSpecificationSchema,\n  modelType: z.enum(['language', 'embedding', 'image']).nullish(),\n});\n\nconst gatewayFetchMetadataSchema = z.object({\n  models: z.array(gatewayLanguageModelEntrySchema),\n});\n","import type {\n  LanguageModelV2,\n  LanguageModelV2CallOptions,\n  LanguageModelV2CallWarning,\n  LanguageModelV2FilePart,\n  LanguageModelV2StreamPart,\n} from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createEventSourceResponseHandler,\n  createJsonErrorResponseHandler,\n  createJsonResponseHandler,\n  postJsonToApi,\n  resolve,\n  type ParseResult,\n  type Resolvable,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport type { GatewayConfig } from './gateway-config';\nimport type { GatewayModelId } from './gateway-language-model-settings';\nimport { asGatewayError } from './errors';\nimport { parseAuthMethod } from './errors/parse-auth-method';\n\ntype GatewayChatConfig = GatewayConfig & {\n  provider: string;\n  o11yHeaders: Resolvable<Record<string, string>>;\n};\n\nexport class GatewayLanguageModel implements LanguageModelV2 {\n  readonly specificationVersion = 'v2';\n  readonly supportedUrls = { '*/*': [/.*/] };\n\n  constructor(\n    readonly modelId: GatewayModelId,\n    private readonly config: GatewayChatConfig,\n  ) {}\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  private async getArgs(options: Parameters<LanguageModelV2['doGenerate']>[0]) {\n    const { abortSignal: _abortSignal, ...optionsWithoutSignal } = options;\n\n    return {\n      args: this.maybeEncodeFileParts(optionsWithoutSignal),\n      warnings: [],\n    };\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doGenerate']>>> {\n    const { args, warnings } = await this.getArgs(options);\n    const { abortSignal } = options;\n\n    const resolvedHeaders = await resolve(this.config.headers());\n\n    try {\n      const {\n        responseHeaders,\n        value: responseBody,\n        rawValue: rawResponse,\n      } = await postJsonToApi({\n        url: this.getUrl(),\n        headers: combineHeaders(\n          resolvedHeaders,\n          options.headers,\n          this.getModelConfigHeaders(this.modelId, false),\n          await resolve(this.config.o11yHeaders),\n        ),\n        body: args,\n        successfulResponseHandler: createJsonResponseHandler(z.any()),\n        failedResponseHandler: createJsonErrorResponseHandler({\n          errorSchema: z.any(),\n          errorToMessage: data => data,\n        }),\n        ...(abortSignal && { abortSignal }),\n        fetch: this.config.fetch,\n      });\n\n      return {\n        ...responseBody,\n        request: { body: args },\n        response: { headers: responseHeaders, body: rawResponse },\n        warnings,\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV2['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doStream']>>> {\n    const { args, warnings } = await this.getArgs(options);\n    const { abortSignal } = options;\n\n    const resolvedHeaders = await resolve(this.config.headers());\n\n    try {\n      const { value: response, responseHeaders } = await postJsonToApi({\n        url: this.getUrl(),\n        headers: combineHeaders(\n          resolvedHeaders,\n          options.headers,\n          this.getModelConfigHeaders(this.modelId, true),\n          await resolve(this.config.o11yHeaders),\n        ),\n        body: args,\n        successfulResponseHandler: createEventSourceResponseHandler(z.any()),\n        failedResponseHandler: createJsonErrorResponseHandler({\n          errorSchema: z.any(),\n          errorToMessage: data => data,\n        }),\n        ...(abortSignal && { abortSignal }),\n        fetch: this.config.fetch,\n      });\n\n      return {\n        stream: response.pipeThrough(\n          new TransformStream<\n            ParseResult<LanguageModelV2StreamPart>,\n            LanguageModelV2StreamPart\n          >({\n            start(controller) {\n              if (warnings.length > 0) {\n                controller.enqueue({ type: 'stream-start', warnings });\n              }\n            },\n            transform(chunk, controller) {\n              if (chunk.success) {\n                const streamPart = chunk.value;\n\n                // Handle raw chunks: if this is a raw chunk from the gateway API,\n                // only emit it if includeRawChunks is true\n                if (streamPart.type === 'raw' && !options.includeRawChunks) {\n                  return; // Skip raw chunks if not requested\n                }\n\n                if (\n                  streamPart.type === 'response-metadata' &&\n                  streamPart.timestamp &&\n                  typeof streamPart.timestamp === 'string'\n                ) {\n                  streamPart.timestamp = new Date(streamPart.timestamp);\n                }\n\n                controller.enqueue(streamPart);\n              } else {\n                controller.error(\n                  (chunk as { success: false; error: unknown }).error,\n                );\n              }\n            },\n          }),\n        ),\n        request: { body: args },\n        response: { headers: responseHeaders },\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n\n  private isFilePart(part: unknown) {\n    return (\n      part && typeof part === 'object' && 'type' in part && part.type === 'file'\n    );\n  }\n\n  /**\n   * Encodes file parts in the prompt to base64. Mutates the passed options\n   * instance directly to avoid copying the file data.\n   * @param options - The options to encode.\n   * @returns The options with the file parts encoded.\n   */\n  private maybeEncodeFileParts(options: LanguageModelV2CallOptions) {\n    for (const message of options.prompt) {\n      for (const part of message.content) {\n        if (this.isFilePart(part)) {\n          const filePart = part as LanguageModelV2FilePart;\n          // If the file part is a URL it will get cleanly converted to a string.\n          // If it's a binary file attachment we convert it to a data url.\n          // In either case, server-side we should only ever see URLs as strings.\n          if (filePart.data instanceof Uint8Array) {\n            const buffer = Uint8Array.from(filePart.data);\n            const base64Data = Buffer.from(buffer).toString('base64');\n            filePart.data = new URL(\n              `data:${filePart.mediaType || 'application/octet-stream'};base64,${base64Data}`,\n            );\n          }\n        }\n      }\n    }\n    return options;\n  }\n\n  private getUrl() {\n    return `${this.config.baseURL}/language-model`;\n  }\n\n  private getModelConfigHeaders(modelId: string, streaming: boolean) {\n    return {\n      'ai-language-model-specification-version': '2',\n      'ai-language-model-id': modelId,\n      'ai-language-model-streaming': String(streaming),\n    };\n  }\n}\n","import type { EmbeddingModelV2 } from '@ai-sdk/provider';\nimport {\n  combineHeaders,\n  createJsonResponseHandler,\n  createJsonErrorResponseHandler,\n  postJsonToApi,\n  resolve,\n  type Resolvable,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport type { GatewayConfig } from './gateway-config';\nimport { asGatewayError } from './errors';\nimport { parseAuthMethod } from './errors/parse-auth-method';\nimport type { SharedV2ProviderMetadata } from '@ai-sdk/provider';\n\nexport class GatewayEmbeddingModel implements EmbeddingModelV2<string> {\n  readonly specificationVersion = 'v2';\n  readonly maxEmbeddingsPerCall = 2048;\n  readonly supportsParallelCalls = true;\n\n  constructor(\n    readonly modelId: string,\n    private readonly config: GatewayConfig & {\n      provider: string;\n      o11yHeaders: Resolvable<Record<string, string>>;\n    },\n  ) {}\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions,\n  }: Parameters<EmbeddingModelV2<string>['doEmbed']>[0]): Promise<\n    Awaited<ReturnType<EmbeddingModelV2<string>['doEmbed']>>\n  > {\n    const resolvedHeaders = await resolve(this.config.headers());\n    try {\n      const {\n        responseHeaders,\n        value: responseBody,\n        rawValue,\n      } = await postJsonToApi({\n        url: this.getUrl(),\n        headers: combineHeaders(\n          resolvedHeaders,\n          headers ?? {},\n          this.getModelConfigHeaders(),\n          await resolve(this.config.o11yHeaders),\n        ),\n        body: {\n          input: values.length === 1 ? values[0] : values,\n          ...(providerOptions ?? {}),\n        },\n        successfulResponseHandler: createJsonResponseHandler(\n          gatewayEmbeddingResponseSchema,\n        ),\n        failedResponseHandler: createJsonErrorResponseHandler({\n          errorSchema: z.any(),\n          errorToMessage: data => data,\n        }),\n        ...(abortSignal && { abortSignal }),\n        fetch: this.config.fetch,\n      });\n\n      return {\n        embeddings: responseBody.embeddings,\n        usage: responseBody.usage ?? undefined,\n        providerMetadata:\n          responseBody.providerMetadata as unknown as SharedV2ProviderMetadata,\n        response: { headers: responseHeaders, body: rawValue },\n      };\n    } catch (error) {\n      throw asGatewayError(error, parseAuthMethod(resolvedHeaders));\n    }\n  }\n\n  private getUrl() {\n    return `${this.config.baseURL}/embedding-model`;\n  }\n\n  private getModelConfigHeaders() {\n    return {\n      'ai-embedding-model-specification-version': '2',\n      'ai-model-id': this.modelId,\n    };\n  }\n}\n\nconst gatewayEmbeddingResponseSchema = z.object({\n  embeddings: z.array(z.array(z.number())),\n  usage: z.object({ tokens: z.number() }).nullish(),\n  providerMetadata: z\n    .record(z.string(), z.record(z.string(), z.unknown()))\n    .optional(),\n});\n","import { GatewayAuthenticationError } from './errors';\n\nexport async function getVercelOidcToken(): Promise<string> {\n  const token =\n    getContext().headers?.['x-vercel-oidc-token'] ??\n    process.env.VERCEL_OIDC_TOKEN;\n\n  if (!token) {\n    throw new GatewayAuthenticationError({\n      message: 'OIDC token not available',\n      statusCode: 401,\n    });\n  }\n\n  return token;\n}\n\nexport async function getVercelRequestId(): Promise<string | undefined> {\n  return getContext().headers?.['x-vercel-id'];\n}\n\ntype Context = {\n  headers?: Record<string, string>;\n};\n\nconst SYMBOL_FOR_REQ_CONTEXT = Symbol.for('@vercel/request-context');\n\nfunction getContext(): Context {\n  const fromSymbol: typeof globalThis & {\n    [SYMBOL_FOR_REQ_CONTEXT]?: { get?: () => Context };\n  } = globalThis;\n  return fromSymbol[SYMBOL_FOR_REQ_CONTEXT]?.get?.() ?? {};\n}\n"],"names":["z","marker","symbol","_a","_b","name","marker","symbol","_a","_b","name","marker","symbol","_a","_b","name","marker","symbol","_a","_b","name","marker","symbol","_a","_b","name","marker","symbol","_a","_b","z","_a","z","z","createJsonErrorResponseHandler","createJsonResponseHandler","resolve","z","resolve","createJsonResponseHandler","z","createJsonErrorResponseHandler","combineHeaders","createJsonResponseHandler","createJsonErrorResponseHandler","postJsonToApi","resolve","z","_a","resolve","postJsonToApi","combineHeaders","createJsonResponseHandler","createJsonErrorResponseHandler","z","_a","_b","_a","_b"],"mappings":";;;;;;;;;;;;;AAAA,SAAS,wBAAwB;AACjC;;AEDA,SAAS,KAAAA,UAAS;;;;;;ACAlB,IAAM,SAAS;AACf,IAAM,SAAS,OAAO,GAAA,CAAI,MAAM;AADhC,IAAA,IAAA;AAGO,IAAe,eAAf,MAAe,sBAAA,CAAqB,KAAA,OACvB,KAAA,QADuB,EAAA,EAAM;IAQ/C,YAAY,EACV,OAAA,EACA,aAAa,GAAA,EACb,KAAA,EACF,CAIG;QACD,KAAA,CAAM,OAAO;QAhBf,IAAA,CAAkB,GAAA,GAAU;QAiB1B,IAAA,CAAK,UAAA,GAAa;QAClB,IAAA,CAAK,KAAA,GAAQ;IACf;IAAA;;;;GAAA,GAOA,OAAO,WAAW,KAAA,EAAuC;QACvD,OAAO,cAAa,SAAA,CAAU,KAAK;IACrC;IAEA,OAAO,UAAU,KAAA,EAAuC;QACtD,OACE,OAAO,UAAU,YACjB,UAAU,QACV,UAAU,SACT,KAAA,CAAc,MAAM,CAAA,KAAM;IAE/B;AACF;;ACxCA,IAAM,OAAO;AACb,IAAMC,UAAS,CAAA,wBAAA,EAA2B,IAAI,EAAA;AAC9C,IAAMC,UAAS,OAAO,GAAA,CAAID,OAAM;AAJhC,IAAAE,KAAAC;AASO,IAAM,6BAAN,MAAM,oCAAA,CAAmCA,MAAA,cAC5BD,MAAAD,SAD4BE,GAAAA,EAAa;IAM3D,YAAY,EACV,UAAU,uBAAA,EACV,aAAa,GAAA,EACb,KAAA,EACF,GAII,CAAC,CAAA,CAAG;QACN,KAAA,CAAM;YAAE;YAAS;YAAY;QAAM,CAAC;QAdtC,IAAA,CAAkBD,IAAAA,GAAU;QAE5B,qBAAA;QAAA,IAAA,CAAS,IAAA,GAAO;QAChB,IAAA,CAAS,IAAA,GAAO;IAYhB;IAEA,OAAO,WAAW,KAAA,EAAqD;QACrE,OAAO,aAAa,SAAA,CAAU,KAAK,KAAKD,WAAU;IACpD;IAAA;;GAAA,GAKA,OAAO,sBAAsB,EAC3B,cAAA,EACA,iBAAA,EACA,UAAU,uBAAA,EACV,aAAa,GAAA,EACb,KAAA,EACF,EAM+B;QAC7B,IAAI;QAEJ,IAAI,gBAAgB;YAClB,oBAAoB,CAAA;;0GAAA,CAAA;QAGtB,OAAA,IAAW,mBAAmB;YAC5B,oBAAoB,CAAA;;;;;;;;iGAAA,CAAA;QAStB,OAAO;YACL,oBAAoB,CAAA;;;;;;;;;;;;;;0EAAA,CAAA;QAetB;QAEA,OAAO,IAAI,4BAA2B;YACpC,SAAS;YACT;YACA;QACF,CAAC;IACH;AACF;;ACrFA,IAAMG,QAAO;AACb,IAAMC,UAAS,CAAA,wBAAA,EAA2BD,KAAI,EAAA;AAC9C,IAAME,UAAS,OAAO,GAAA,CAAID,OAAM;AAJhC,IAAAE,KAAAC;AASO,IAAM,6BAAN,cAAA,CAAyCA,MAAA,cAC5BD,MAAAD,SAD4BE,GAAAA,EAAa;IAM3D,YAAY,EACV,UAAU,iBAAA,EACV,aAAa,GAAA,EACb,KAAA,EACF,GAII,CAAC,CAAA,CAAG;QACN,KAAA,CAAM;YAAE;YAAS;YAAY;QAAM,CAAC;QAdtC,IAAA,CAAkBD,IAAAA,GAAU;QAE5B,qBAAA;QAAA,IAAA,CAAS,IAAA,GAAOH;QAChB,IAAA,CAAS,IAAA,GAAO;IAYhB;IAEA,OAAO,WAAW,KAAA,EAAqD;QACrE,OAAO,aAAa,SAAA,CAAU,KAAK,KAAKE,WAAU;IACpD;AACF;;AC5BA,IAAMG,QAAO;AACb,IAAMC,UAAS,CAAA,wBAAA,EAA2BD,KAAI,EAAA;AAC9C,IAAME,UAAS,OAAO,GAAA,CAAID,OAAM;AAJhC,IAAAE,KAAAC;AASO,IAAM,wBAAN,cAAA,CAAoCA,MAAA,cACvBD,MAAAD,SADuBE,GAAAA,EAAa;IAMtD,YAAY,EACV,UAAU,qBAAA,EACV,aAAa,GAAA,EACb,KAAA,EACF,GAII,CAAC,CAAA,CAAG;QACN,KAAA,CAAM;YAAE;YAAS;YAAY;QAAM,CAAC;QAdtC,IAAA,CAAkBD,IAAAA,GAAU;QAE5B,qBAAA;QAAA,IAAA,CAAS,IAAA,GAAOH;QAChB,IAAA,CAAS,IAAA,GAAO;IAYhB;IAEA,OAAO,WAAW,KAAA,EAAgD;QAChE,OAAO,aAAa,SAAA,CAAU,KAAK,KAAKE,WAAU;IACpD;AACF;;AC3BA,IAAMG,QAAO;AACb,IAAMC,UAAS,CAAA,wBAAA,EAA2BD,KAAI,EAAA;AAC9C,IAAME,UAAS,OAAO,GAAA,CAAID,OAAM;AAEzB,IAAM,2PAA2B,IAAA,CAAE,MAAA,CAAO;IAC/C,wOAAS,KAAA,CAAE,MAAA,CAAO;AACpB,CAAC;AATD,IAAAE,KAAAC;AAcO,IAAM,4BAAN,cAAA,CAAwCA,MAAA,cAC3BD,MAAAD,SAD2BE,GAAAA,EAAa;IAO1D,YAAY,EACV,UAAU,iBAAA,EACV,aAAa,GAAA,EACb,OAAA,EACA,KAAA,EACF,GAKI,CAAC,CAAA,CAAG;QACN,KAAA,CAAM;YAAE;YAAS;YAAY;QAAM,CAAC;QAjBtC,IAAA,CAAkBD,IAAAA,GAAU;QAE5B,qBAAA;QAAA,IAAA,CAAS,IAAA,GAAOH;QAChB,IAAA,CAAS,IAAA,GAAO;QAed,IAAA,CAAK,OAAA,GAAU;IACjB;IAEA,OAAO,WAAW,KAAA,EAAoD;QACpE,OAAO,aAAa,SAAA,CAAU,KAAK,KAAKE,WAAU;IACpD;AACF;;ACrCA,IAAMG,QAAO;AACb,IAAMC,UAAS,CAAA,wBAAA,EAA2BD,KAAI,EAAA;AAC9C,IAAME,UAAS,OAAO,GAAA,CAAID,OAAM;AAJhC,IAAAE,KAAAC;AASO,IAAM,6BAAN,cAAA,CAAyCA,MAAA,cAC5BD,MAAAD,SAD4BE,GAAAA,EAAa;IAM3D,YAAY,EACV,UAAU,uBAAA,EACV,aAAa,GAAA,EACb,KAAA,EACF,GAII,CAAC,CAAA,CAAG;QACN,KAAA,CAAM;YAAE;YAAS;YAAY;QAAM,CAAC;QAdtC,IAAA,CAAkBD,IAAAA,GAAU;QAE5B,qBAAA;QAAA,IAAA,CAAS,IAAA,GAAOH;QAChB,IAAA,CAAS,IAAA,GAAO;IAYhB;IAEA,OAAO,WAAW,KAAA,EAAqD;QACrE,OAAO,aAAa,SAAA,CAAU,KAAK,KAAKE,WAAU;IACpD;AACF;;AC3BA,IAAMG,QAAO;AACb,IAAMC,UAAS,CAAA,wBAAA,EAA2BD,KAAI,EAAA;AAC9C,IAAME,UAAS,OAAO,GAAA,CAAID,OAAM;AALhC,IAAAE,KAAAC;AAUO,IAAM,uBAAN,cAAA,CAAmCA,MAAA,cACtBD,MAAAD,SADsBE,GAAAA,EAAa;IAQrD,YAAY,EACV,UAAU,+BAAA,EACV,aAAa,GAAA,EACb,QAAA,EACA,eAAA,EACA,KAAA,EACF,GAMI,CAAC,CAAA,CAAG;QACN,KAAA,CAAM;YAAE;YAAS;YAAY;QAAM,CAAC;QApBtC,IAAA,CAAkBD,IAAAA,GAAU;QAE5B,qBAAA;QAAA,IAAA,CAAS,IAAA,GAAOH;QAChB,IAAA,CAAS,IAAA,GAAO;QAkBd,IAAA,CAAK,QAAA,GAAW;QAChB,IAAA,CAAK,eAAA,GAAkB;IACzB;IAEA,OAAO,WAAW,KAAA,EAA+C;QAC/D,OAAO,aAAa,SAAA,CAAU,KAAK,KAAKE,WAAU;IACpD;AACF;;AP3BO,SAAS,+BAA+B,EAC7C,QAAA,EACA,UAAA,EACA,iBAAiB,wBAAA,EACjB,KAAA,EACA,UAAA,EACF,EAMiB;IACf,MAAM,cAAc,2BAA2B,SAAA,CAAU,QAAQ;IACjE,IAAI,CAAC,YAAY,OAAA,EAAS;QACxB,OAAO,IAAI,qBAAqB;YAC9B,SAAS,CAAA,+BAAA,EAAkC,cAAc,EAAA;YACzD;YACA;YACA,iBAAiB,YAAY,KAAA;YAC7B;QACF,CAAC;IACH;IAEA,MAAM,oBAA0C,YAAY,IAAA;IAC5D,MAAM,YAAY,kBAAkB,KAAA,CAAM,IAAA;IAC1C,MAAM,UAAU,kBAAkB,KAAA,CAAM,OAAA;IAExC,OAAQ,WAAW;QACjB,KAAK;YACH,OAAO,2BAA2B,qBAAA,CAAsB;gBACtD,gBAAgB,eAAe;gBAC/B,mBAAmB,eAAe;gBAClC;gBACA;YACF,CAAC;QACH,KAAK;YACH,OAAO,IAAI,2BAA2B;gBAAE;gBAAS;gBAAY;YAAM,CAAC;QACtE,KAAK;YACH,OAAO,IAAI,sBAAsB;gBAAE;gBAAS;gBAAY;YAAM,CAAC;QACjE,KAAK;YAAmB;gBACtB,MAAM,cAAc,yBAAyB,SAAA,CAC3C,kBAAkB,KAAA,CAAM,KAAA;gBAE1B,OAAO,IAAI,0BAA0B;oBACnC;oBACA;oBACA,SAAS,YAAY,OAAA,GAAU,YAAY,IAAA,CAAK,OAAA,GAAU,KAAA;oBAC1D;gBACF,CAAC;YACH;QACA,KAAK;YACH,OAAO,IAAI,2BAA2B;gBAAE;gBAAS;gBAAY;YAAM,CAAC;QACtE;YACE,OAAO,IAAI,2BAA2B;gBAAE;gBAAS;gBAAY;YAAM,CAAC;IACxE;AACF;AAEA,IAAM,6PAA6BG,IAAAA,CAAE,MAAA,CAAO;IAC1C,uOAAOA,IAAAA,CAAE,MAAA,CAAO;QACd,yOAASA,IAAAA,CAAE,MAAA,CAAO;QAClB,sOAAMA,IAAAA,CAAE,MAAA,CAAO,EAAE,OAAA,CAAQ;QACzB,uOAAOA,IAAAA,CAAE,OAAA,CAAQ,EAAE,OAAA,CAAQ;QAC3B,sOAAMA,IAAAA,CAAE,KAAA,CAAM;2OAACA,KAAAA,CAAE,MAAA,CAAO;4OAAGA,IAAAA,CAAE,MAAA,CAAO,CAAC;SAAC,EAAE,OAAA,CAAQ;IAClD,CAAC;AACH,CAAC;;ADzEM,SAAS,eACd,KAAA,EACA,UAAA,EACA;IAPF,IAAAC;IAQE,IAAI,aAAa,UAAA,CAAW,KAAK,GAAG;QAClC,OAAO;IACT;IAEA,IAAI,6OAAA,CAAa,UAAA,CAAW,KAAK,GAAG;QAClC,OAAO,+BAA+B;YACpC,UAAU,uBAAuB,KAAK;YACtC,YAAA,CAAYA,MAAA,MAAM,UAAA,KAAN,OAAAA,MAAoB;YAChC,gBAAgB;YAChB,OAAO;YACP;QACF,CAAC;IACH;IAEA,OAAO,+BAA+B;QACpC,UAAU,CAAC;QACX,YAAY;QACZ,gBACE,iBAAiB,QACb,CAAA,wBAAA,EAA2B,MAAM,OAAO,EAAA,GACxC;QACN,OAAO;QACP;IACF,CAAC;AACH;;AS9BO,SAAS,uBAAuB,KAAA,EAA8B;IACnE,IAAI,MAAM,IAAA,KAAS,KAAA,GAAW;QAC5B,OAAO,MAAM,IAAA;IACf;IACA,IAAI,MAAM,YAAA,IAAgB,MAAM;QAC9B,IAAI;YACF,OAAO,KAAK,KAAA,CAAM,MAAM,YAAY;QACtC,EAAA,OAAQ,GAAA;YACN,OAAO,MAAM,YAAA;QACf;IACF;IACA,OAAO,CAAC;AACV;;ACZO,IAAM,6BAA6B;AAEnC,SAAS,gBAAgB,OAAA,EAA6C;IAC3E,MAAM,SAAS,wBAAwB,SAAA,CACrC,OAAA,CAAQ,0BAA0B,CAAA;IAEpC,OAAO,OAAO,OAAA,GAAU,OAAO,IAAA,GAAO,KAAA;AACxC;AAEA,IAAM,0BAA0BC,oOAAAA,CAAE,KAAA,CAAM;oOACtCA,IAAAA,CAAE,OAAA,CAAQ,SAAS;oOACnBA,IAAAA,CAAE,OAAA,CAAQ,MAAM;CACjB;;;ACGM,IAAM,uBAAN,MAA2B;IAChC,YAA6B,MAAA,CAAoC;QAApC,IAAA,CAAA,MAAA,GAAA;IAAqC;IAElE,MAAM,qBAA4D;QAChE,IAAI;YACF,MAAM,EAAE,KAAA,CAAM,CAAA,GAAI,+RAAM,aAAA,EAAW;gBACjC,KAAK,GAAG,IAAA,CAAK,MAAA,CAAO,OAAO,CAAA,OAAA,CAAA;gBAC3B,SAAS,+RAAM,UAAA,EAAQ,IAAA,CAAK,MAAA,CAAO,OAAA,CAAQ,CAAC;gBAC5C,oTAA2B,4BAAA,EACzB;gBAEF,gTAAuB,iCAAA,EAA+B;oBACpD,aAAaC,oOAAAA,CAAE,GAAA,CAAI;oBACnB,gBAAgB,CAAA,OAAQ;gBAC1B,CAAC;gBACD,OAAO,IAAA,CAAK,MAAA,CAAO,KAAA;YACrB,CAAC;YAED,OAAO;QACT,EAAA,OAAS,OAAO;YACd,MAAM,eAAe,KAAK;QAC5B;IACF;AACF;AAEA,IAAM,0QAA0CA,IAAAA,CAAE,MAAA,CAAO;IACvD,sPAAsBA,IAAAA,CAAE,OAAA,CAAQ,IAAI;IACpC,0OAAUA,IAAAA,CAAE,MAAA,CAAO;IACnB,SAASA,oOAAAA,CAAE,MAAA,CAAO;AACpB,CAAC;AAED,IAAM,oQAAoCA,IAAAA,CACvC,MAAA,CAAO;IACN,uOAAOA,IAAAA,CAAE,MAAA,CAAO;IAChB,QAAQA,oOAAAA,CAAE,MAAA,CAAO;IACjB,kPAAkBA,IAAAA,CAAE,MAAA,CAAO,EAAE,OAAA,CAAQ;IACrC,mPAAmBA,IAAAA,CAAE,MAAA,CAAO,EAAE,OAAA,CAAQ;AACxC,CAAC,EACA,SAAA,CAAU,CAAC,EAAE,KAAA,EAAO,MAAA,EAAQ,gBAAA,EAAkB,iBAAA,CAAkB,CAAA,GAAA,CAAO;QACtE;QACA;QACA,GAAI,mBAAmB;YAAE,mBAAmB;QAAiB,IAAI,CAAC,CAAA;QAClE,GAAI,oBACA;YAAE,0BAA0B;QAAkB,IAC9C,CAAC,CAAA;IACP,CAAA,CAAE;AAEJ,IAAM,kQAAkCA,IAAAA,CAAE,MAAA,CAAO;IAC/C,oOAAIA,IAAAA,CAAE,MAAA,CAAO;IACb,qOAAMA,KAAAA,CAAE,MAAA,CAAO;IACf,6OAAaA,IAAAA,CAAE,MAAA,CAAO,EAAE,OAAA,CAAQ;IAChC,SAAS,kCAAkC,OAAA,CAAQ;IACnD,eAAe;IACf,2OAAWA,IAAAA,CAAE,IAAA,CAAK;QAAC;QAAY;QAAa,OAAO;KAAC,EAAE,OAAA,CAAQ;AAChE,CAAC;AAED,IAAM,6PAA6BA,IAAAA,CAAE,MAAA,CAAO;IAC1C,wOAAQA,IAAAA,CAAE,KAAA,CAAM,+BAA+B;AACjD,CAAC;;;AC/CM,IAAM,uBAAN,MAAsD;IAI3D,YACW,OAAA,EACQ,MAAA,CACjB;QAFS,IAAA,CAAA,OAAA,GAAA;QACQ,IAAA,CAAA,MAAA,GAAA;QALnB,IAAA,CAAS,oBAAA,GAAuB;QAChC,IAAA,CAAS,aAAA,GAAgB;YAAE,OAAO;gBAAC,IAAI;aAAA;QAAE;IAKtC;IAEH,IAAI,WAAmB;QACrB,OAAO,IAAA,CAAK,MAAA,CAAO,QAAA;IACrB;IAEA,MAAc,QAAQ,OAAA,EAAuD;QAC3E,MAAM,EAAE,aAAa,YAAA,EAAc,GAAG,qBAAqB,CAAA,GAAI;QAE/D,OAAO;YACL,MAAM,IAAA,CAAK,oBAAA,CAAqB,oBAAoB;YACpD,UAAU,CAAC,CAAA;QACb;IACF;IAEA,MAAM,WACJ,OAAA,EAC6D;QAC7D,MAAM,EAAE,IAAA,EAAM,QAAA,CAAS,CAAA,GAAI,MAAM,IAAA,CAAK,OAAA,CAAQ,OAAO;QACrD,MAAM,EAAE,WAAA,CAAY,CAAA,GAAI;QAExB,MAAM,kBAAkB,UAAMK,+RAAAA,EAAQ,IAAA,CAAK,MAAA,CAAO,OAAA,CAAQ,CAAC;QAE3D,IAAI;YACF,MAAM,EACJ,eAAA,EACA,OAAO,YAAA,EACP,UAAU,WAAA,EACZ,GAAI,+RAAM,gBAAA,EAAc;gBACtB,KAAK,IAAA,CAAK,MAAA,CAAO;gBACjB,kSAAS,iBAAA,EACP,iBACA,QAAQ,OAAA,EACR,IAAA,CAAK,qBAAA,CAAsB,IAAA,CAAK,OAAA,EAAS,KAAK,GAC9C,+RAAMA,UAAAA,EAAQ,IAAA,CAAK,MAAA,CAAO,WAAW;gBAEvC,MAAM;gBACN,2BAA2BC,qTAAAA,kOAA0BC,IAAAA,CAAE,GAAA,CAAI,CAAC;gBAC5D,2BAAuBC,sTAAAA,EAA+B;oBACpD,6OAAaD,IAAAA,CAAE,GAAA,CAAI;oBACnB,gBAAgB,CAAA,OAAQ;gBAC1B,CAAC;gBACD,GAAI,eAAe;oBAAE;gBAAY,CAAA;gBACjC,OAAO,IAAA,CAAK,MAAA,CAAO,KAAA;YACrB,CAAC;YAED,OAAO;gBACL,GAAG,YAAA;gBACH,SAAS;oBAAE,MAAM;gBAAK;gBACtB,UAAU;oBAAE,SAAS;oBAAiB,MAAM;gBAAY;gBACxD;YACF;QACF,EAAA,OAAS,OAAO;YACd,MAAM,eAAe,OAAO,gBAAgB,eAAe,CAAC;QAC9D;IACF;IAEA,MAAM,SACJ,OAAA,EAC2D;QAC3D,MAAM,EAAE,IAAA,EAAM,QAAA,CAAS,CAAA,GAAI,MAAM,IAAA,CAAK,OAAA,CAAQ,OAAO;QACrD,MAAM,EAAE,WAAA,CAAY,CAAA,GAAI;QAExB,MAAM,kBAAkB,UAAMF,+RAAAA,EAAQ,IAAA,CAAK,MAAA,CAAO,OAAA,CAAQ,CAAC;QAE3D,IAAI;YACF,MAAM,EAAE,OAAO,QAAA,EAAU,eAAA,CAAgB,CAAA,GAAI,+RAAM,gBAAA,EAAc;gBAC/D,KAAK,IAAA,CAAK,MAAA,CAAO;gBACjB,kSAAS,iBAAA,EACP,iBACA,QAAQ,OAAA,EACR,IAAA,CAAK,qBAAA,CAAsB,IAAA,CAAK,OAAA,EAAS,IAAI,GAC7C,UAAMA,+RAAAA,EAAQ,IAAA,CAAK,MAAA,CAAO,WAAW;gBAEvC,MAAM;gBACN,oTAA2B,mCAAA,kOAAiCE,IAAAA,CAAE,GAAA,CAAI,CAAC;gBACnE,gTAAuBC,iCAAAA,EAA+B;oBACpD,6OAAaD,IAAAA,CAAE,GAAA,CAAI;oBACnB,gBAAgB,CAAA,OAAQ;gBAC1B,CAAC;gBACD,GAAI,eAAe;oBAAE;gBAAY,CAAA;gBACjC,OAAO,IAAA,CAAK,MAAA,CAAO,KAAA;YACrB,CAAC;YAED,OAAO;gBACL,QAAQ,SAAS,WAAA,CACf,IAAI,gBAGF;oBACA,OAAM,UAAA,EAAY;wBAChB,IAAI,SAAS,MAAA,GAAS,GAAG;4BACvB,WAAW,OAAA,CAAQ;gCAAE,MAAM;gCAAgB;4BAAS,CAAC;wBACvD;oBACF;oBACA,WAAU,KAAA,EAAO,UAAA,EAAY;wBAC3B,IAAI,MAAM,OAAA,EAAS;4BACjB,MAAM,aAAa,MAAM,KAAA;4BAIzB,IAAI,WAAW,IAAA,KAAS,SAAS,CAAC,QAAQ,gBAAA,EAAkB;gCAC1D;4BACF;4BAEA,IACE,WAAW,IAAA,KAAS,uBACpB,WAAW,SAAA,IACX,OAAO,WAAW,SAAA,KAAc,UAChC;gCACA,WAAW,SAAA,GAAY,IAAI,KAAK,WAAW,SAAS;4BACtD;4BAEA,WAAW,OAAA,CAAQ,UAAU;wBAC/B,OAAO;4BACL,WAAW,KAAA,CACR,MAA6C,KAAA;wBAElD;oBACF;gBACF,CAAC;gBAEH,SAAS;oBAAE,MAAM;gBAAK;gBACtB,UAAU;oBAAE,SAAS;gBAAgB;YACvC;QACF,EAAA,OAAS,OAAO;YACd,MAAM,eAAe,OAAO,gBAAgB,eAAe,CAAC;QAC9D;IACF;IAEQ,WAAW,IAAA,EAAe;QAChC,OACE,QAAQ,OAAO,SAAS,YAAY,UAAU,QAAQ,KAAK,IAAA,KAAS;IAExE;IAAA;;;;;GAAA,GAQQ,qBAAqB,OAAA,EAAqC;QAChE,KAAA,MAAW,WAAW,QAAQ,MAAA,CAAQ;YACpC,KAAA,MAAW,QAAQ,QAAQ,OAAA,CAAS;gBAClC,IAAI,IAAA,CAAK,UAAA,CAAW,IAAI,GAAG;oBACzB,MAAM,WAAW;oBAIjB,IAAI,SAAS,IAAA,YAAgB,YAAY;wBACvC,MAAM,SAAS,WAAW,IAAA,CAAK,SAAS,IAAI;wBAC5C,MAAM,aAAa,OAAO,IAAA,CAAK,MAAM,EAAE,QAAA,CAAS,QAAQ;wBACxD,SAAS,IAAA,GAAO,IAAI,IAClB,CAAA,KAAA,EAAQ,SAAS,SAAA,IAAa,0BAA0B,CAAA,QAAA,EAAW,UAAU,EAAA;oBAEjF;gBACF;YACF;QACF;QACA,OAAO;IACT;IAEQ,SAAS;QACf,OAAO,GAAG,IAAA,CAAK,MAAA,CAAO,OAAO,CAAA,eAAA,CAAA;IAC/B;IAEQ,sBAAsB,OAAA,EAAiB,SAAA,EAAoB;QACjE,OAAO;YACL,2CAA2C;YAC3C,wBAAwB;YACxB,+BAA+B,OAAO,SAAS;QACjD;IACF;AACF;;;AClMO,IAAM,wBAAN,MAAgE;IAKrE,YACW,OAAA,EACQ,MAAA,CAIjB;QALS,IAAA,CAAA,OAAA,GAAA;QACQ,IAAA,CAAA,MAAA,GAAA;QANnB,IAAA,CAAS,oBAAA,GAAuB;QAChC,IAAA,CAAS,oBAAA,GAAuB;QAChC,IAAA,CAAS,qBAAA,GAAwB;IAQ9B;IAEH,IAAI,WAAmB;QACrB,OAAO,IAAA,CAAK,MAAA,CAAO,QAAA;IACrB;IAEA,MAAM,QAAQ,EACZ,MAAA,EACA,OAAA,EACA,WAAA,EACA,eAAA,EACF,EAEE;QAvCJ,IAAAQ;QAwCI,MAAM,kBAAkB,+RAAMC,UAAAA,EAAQ,IAAA,CAAK,MAAA,CAAO,OAAA,CAAQ,CAAC;QAC3D,IAAI;YACF,MAAM,EACJ,eAAA,EACA,OAAO,YAAA,EACP,QAAA,EACF,GAAI,+RAAMC,gBAAAA,EAAc;gBACtB,KAAK,IAAA,CAAK,MAAA,CAAO;gBACjB,iSAASC,kBAAAA,EACP,iBACA,WAAA,OAAA,UAAW,CAAC,GACZ,IAAA,CAAK,qBAAA,CAAsB,GAC3B,UAAMF,+RAAAA,EAAQ,IAAA,CAAK,MAAA,CAAO,WAAW;gBAEvC,MAAM;oBACJ,OAAO,OAAO,MAAA,KAAW,IAAI,MAAA,CAAO,CAAC,CAAA,GAAI;oBACzC,GAAI,mBAAA,OAAA,kBAAmB,CAAC,CAAA;gBAC1B;gBACA,oTAA2BG,4BAAAA,EACzB;gBAEF,2BAAuBC,sTAAAA,EAA+B;oBACpD,6OAAaC,IAAAA,CAAE,GAAA,CAAI;oBACnB,gBAAgB,CAAA,OAAQ;gBAC1B,CAAC;gBACD,GAAI,eAAe;oBAAE;gBAAY,CAAA;gBACjC,OAAO,IAAA,CAAK,MAAA,CAAO,KAAA;YACrB,CAAC;YAED,OAAO;gBACL,YAAY,aAAa,UAAA;gBACzB,OAAA,CAAON,MAAA,aAAa,KAAA,KAAb,OAAAA,MAAsB,KAAA;gBAC7B,kBACE,aAAa,gBAAA;gBACf,UAAU;oBAAE,SAAS;oBAAiB,MAAM;gBAAS;YACvD;QACF,EAAA,OAAS,OAAO;YACd,MAAM,eAAe,OAAO,gBAAgB,eAAe,CAAC;QAC9D;IACF;IAEQ,SAAS;QACf,OAAO,GAAG,IAAA,CAAK,MAAA,CAAO,OAAO,CAAA,gBAAA,CAAA;IAC/B;IAEQ,wBAAwB;QAC9B,OAAO;YACL,4CAA4C;YAC5C,eAAe,IAAA,CAAK,OAAA;QACtB;IACF;AACF;AAEA,IAAM,iQAAiCM,IAAAA,CAAE,MAAA,CAAO;IAC9C,2OAAYA,KAAAA,CAAE,KAAA,iOAAMA,IAAAA,CAAE,KAAA,iOAAMA,IAAAA,CAAE,MAAA,CAAO,CAAC,CAAC;IACvC,uOAAOA,IAAAA,CAAE,MAAA,CAAO;QAAE,wOAAQA,IAAAA,CAAE,MAAA,CAAO;IAAE,CAAC,EAAE,OAAA,CAAQ;IAChD,kPAAkBA,IAAAA,CACf,MAAA,iOAAOA,IAAAA,CAAE,MAAA,CAAO,mOAAGA,IAAAA,CAAE,MAAA,iOAAOA,IAAAA,CAAE,MAAA,CAAO,kOAAGA,KAAAA,CAAE,OAAA,CAAQ,CAAC,CAAC,EACpD,QAAA,CAAS;AACd,CAAC;;ACjGD,eAAsB,qBAAsC;IAF5D,IAAAC,KAAAC;IAGE,MAAM,QAAA,CACJA,MAAAA,CAAAD,MAAA,WAAW,EAAE,OAAA,KAAb,OAAA,KAAA,IAAAA,GAAAA,CAAuB,sBAAA,KAAvB,OAAAC,MACA,QAAQ,GAAA,CAAI,iBAAA;IAEd,IAAI,CAAC,OAAO;QACV,MAAM,IAAI,2BAA2B;YACnC,SAAS;YACT,YAAY;QACd,CAAC;IACH;IAEA,OAAO;AACT;AAEA,eAAsB,qBAAkD;IAjBxE,IAAAD;IAkBE,OAAA,CAAOA,MAAA,WAAW,EAAE,OAAA,KAAb,OAAA,KAAA,IAAAA,GAAAA,CAAuB,cAAA;AAChC;AAMA,IAAM,yBAAyB,OAAO,GAAA,CAAI,yBAAyB;AAEnE,SAAS,aAAsB;IA3B/B,IAAAA,KAAAC,KAAA;IA4BE,MAAM,aAEF;IACJ,OAAA,CAAO,KAAA,CAAAA,MAAAA,CAAAD,MAAA,UAAA,CAAW,sBAAsB,CAAA,KAAjC,OAAA,KAAA,IAAAA,IAAoC,GAAA,KAApC,OAAA,KAAA,IAAAC,IAAA,IAAA,CAAAD,IAAAA,KAAA,OAAA,KAA+C,CAAC;AACzD;;AfkDA,IAAM,8BAA8B;AAK7B,SAAS,sBACd,UAAmC,CAAC,CAAA,EACnB;IAzFnB,IAAAE,KAAAC;IA0FE,IAAI,kBAAgE;IACpE,IAAI,gBAAqD;IACzD,MAAM,qBAAA,CACJD,MAAA,QAAQ,0BAAA,KAAR,OAAAA,MAAsC,MAAO,KAAK;IACpD,IAAI,gBAAgB;IAEpB,MAAM,UAAA,CACJC,+RAAA,uBAAA,EAAqB,QAAQ,OAAO,CAAA,KAApC,OAAAA,MACA;IAEF,MAAM,aAAa,YAAY;QAC7B,MAAM,OAAO,MAAM,oBAAoB,OAAO;QAC9C,IAAI,MAAM;YACR,OAAO;gBACL,eAAe,CAAA,OAAA,EAAU,KAAK,KAAK,EAAA;gBACnC,+BAA+B;gBAC/B,CAAC,0BAA0B,CAAA,EAAG,KAAK,UAAA;gBACnC,GAAG,QAAQ,OAAA;YACb;QACF;QAEA,MAAM,2BAA2B,qBAAA,CAAsB;YACrD,gBAAgB;YAChB,mBAAmB;YACnB,YAAY;QACd,CAAC;IACH;IAEA,MAAM,oBAAoB,MAAM;QAC9B,MAAM,wSAAe,sBAAA,EAAoB;YACvC,cAAc,KAAA;YACd,yBAAyB;QAC3B,CAAC;QACD,MAAM,uSAAc,sBAAA,EAAoB;YACtC,cAAc,KAAA;YACd,yBAAyB;QAC3B,CAAC;QACD,MAAM,kSAAS,sBAAA,EAAoB;YACjC,cAAc,KAAA;YACd,yBAAyB;QAC3B,CAAC;QAED,OAAO,YAAY;YACjB,MAAM,YAAY,MAAM,mBAAmB;YAC3C,OAAO;gBACL,GAAI,gBAAgB;oBAAE,yBAAyB;gBAAa,CAAA;gBAC5D,GAAI,eAAe;oBAAE,uBAAuB;gBAAY,CAAA;gBACxD,GAAI,UAAU;oBAAE,kBAAkB;gBAAO,CAAA;gBACzC,GAAI,aAAa;oBAAE,sBAAsB;gBAAU,CAAA;YACrD;QACF;IACF;IAEA,MAAM,sBAAsB,CAAC,YAA4B;QACvD,OAAO,IAAI,qBAAqB,SAAS;YACvC,UAAU;YACV;YACA,SAAS;YACT,OAAO,QAAQ,KAAA;YACf,aAAa,kBAAkB;QACjC,CAAC;IACH;IAEA,MAAM,qBAAqB,YAAY;QAzJzC,IAAAD,KAAAC,KAAA;QA0JI,MAAM,MAAA,CAAM,KAAA,CAAAA,MAAAA,CAAAD,MAAA,QAAQ,SAAA,KAAR,OAAA,KAAA,IAAAA,IAAmB,WAAA,KAAnB,OAAA,KAAA,IAAAC,IAAA,IAAA,CAAAD,KAAmC,OAAA,EAAA,KAAnC,OAAA,KAAgD,KAAK,GAAA,CAAI;QACrE,IAAI,CAAC,mBAAmB,MAAM,gBAAgB,oBAAoB;YAChE,gBAAgB;YAEhB,kBAAkB,IAAI,qBAAqB;gBACzC;gBACA,SAAS;gBACT,OAAO,QAAQ,KAAA;YACjB,CAAC,EACE,kBAAA,CAAmB,EACnB,IAAA,CAAK,CAAA,aAAY;gBAChB,gBAAgB;gBAChB,OAAO;YACT,CAAC,EACA,KAAA,CAAM,OAAO,UAAmB;gBAC/B,MAAM,eAAe,OAAO,gBAAgB,MAAM,WAAW,CAAC,CAAC;YACjE,CAAC;QACL;QAEA,OAAO,gBAAgB,QAAQ,OAAA,CAAQ,aAAa,IAAI;IAC1D;IAEA,MAAM,WAAW,SAAU,OAAA,EAAyB;QAClD,IAAI,YAAY;YACd,MAAM,IAAI,MACR;QAEJ;QAEA,OAAO,oBAAoB,OAAO;IACpC;IAEA,SAAS,kBAAA,GAAqB;IAC9B,SAAS,UAAA,GAAa,CAAC,YAAoB;QACzC,MAAM,kOAAI,mBAAA,CAAiB;YAAE;YAAS,WAAW;QAAa,CAAC;IACjE;IACA,SAAS,aAAA,GAAgB;IACzB,SAAS,kBAAA,GAAqB,CAAC,YAAqC;QAClE,OAAO,IAAI,sBAAsB,SAAS;YACxC,UAAU;YACV;YACA,SAAS;YACT,OAAO,QAAQ,KAAA;YACf,aAAa,kBAAkB;QACjC,CAAC;IACH;IAEA,OAAO;AACT;AAEO,IAAM,UAAU,sBAAsB;AAE7C,eAAsB,oBACpB,OAAA,EAIQ;IACR,MAAM,kSAAS,sBAAA,EAAoB;QACjC,cAAc,QAAQ,MAAA;QACtB,yBAAyB;IAC3B,CAAC;IAED,IAAI,QAAQ;QACV,OAAO;YACL,OAAO;YACP,YAAY;QACd;IACF;IAEA,IAAI;QACF,MAAM,YAAY,MAAM,mBAAmB;QAC3C,OAAO;YACL,OAAO;YACP,YAAY;QACd;IACF,EAAA,OAAQ,GAAA;QACN,OAAO;IACT;AACF","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"debugId":null}}]
}