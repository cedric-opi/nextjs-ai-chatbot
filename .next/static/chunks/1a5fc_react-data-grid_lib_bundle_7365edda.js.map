{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"bundle.js","sources":["file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/utils/colSpanUtils.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/utils/domUtils.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/utils/eventUtils.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/utils/keyboardUtils.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/utils/renderMeasuringCells.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/utils/selectedCellUtils.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/style/cell.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/utils/styleUtils.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/utils/index.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/cellRenderers/renderCheckbox.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/cellRenderers/renderToggleGroup.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/cellRenderers/renderValue.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/DataGridDefaultRenderersProvider.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/cellRenderers/SelectCellFormatter.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/hooks/useRowSelection.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/Columns.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/hooks/useCalculatedColumns.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/hooks/useLayoutEffect.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/hooks/useColumnWidths.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/hooks/useGridDimensions.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/hooks/useLatestFunc.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/hooks/useRovingTabIndex.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/hooks/useViewportColumns.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/hooks/useViewportRows.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/DragHandle.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/EditCell.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/GroupedColumnHeaderCell.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/renderHeaderCell.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/HeaderCell.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/style/row.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/HeaderRow.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/GroupedColumnHeaderRow.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/Cell.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/Row.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/ScrollToCell.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/sortStatus.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/style/core.ts","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/SummaryCell.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/SummaryRow.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/DataGrid.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/GroupCell.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/GroupRow.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/TreeDataGrid.tsx","file:///Users/vihuy/Downloads/Project/financial_advisor/nextjs-ai-chatbot-main/nextjs-ai-chatbot-main/node_modules/.pnpm/react-data-grid%407.0.0-beta.47_react-dom%4019.0.0-rc-45804af1-20241021_react%4019.0.0-rc-45804af1-_hi2zrjquh3lu7cay6ueq33dt3e/node_modules/react-data-grid/src/editors/textEditor.tsx"],"sourcesContent":["import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  const vKey = 86;\n  if (isCtrlKeyHeldDown(event) && event.keyCode !== vKey) return false;\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return (\n      target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select')\n        .length === 1\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n","import type {\n  CalculatedColumn,\n  CalculatedColumnParent,\n  CellNavigationMode,\n  Maybe,\n  Position\n} from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditableUtil(column, row);\n}\n\n// https://github.com/vercel/next.js/issues/56480\nexport function isCellEditableUtil<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  moveUp: boolean;\n  moveNext: boolean;\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  mainHeaderRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  mainHeaderRowIdx,\n  lastFrozenColumnIndex,\n  column\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'lastFrozenColumnIndex' | 'mainHeaderRowIdx'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  if (rowIdx === mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (\n    topSummaryRows &&\n    rowIdx > mainHeaderRowIdx &&\n    rowIdx <= topSummaryRowsCount + mainHeaderRowIdx\n  ) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  moveUp,\n  moveNext,\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  mainHeaderRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx, rowIdx: currentRowIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n  const columnsCount = columns.length;\n\n  const setColSpan = (moveNext: boolean) => {\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveNext ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  const getParentRowIdx = (parent: CalculatedColumnParent<R, SR>) => {\n    return parent.level + mainHeaderRowIdx;\n  };\n\n  const setHeaderGroupColAndRowSpan = () => {\n    if (moveNext) {\n      // find the parent at the same row level\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx === parentRowIdx) {\n          nextIdx = parent.idx + parent.colSpan;\n          break;\n        }\n        parent = parent.parent;\n      }\n    } else if (moveUp) {\n      // find the first reachable parent\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      let found = false;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx >= parentRowIdx) {\n          nextIdx = parent.idx;\n          nextRowIdx = parentRowIdx;\n          found = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n\n      // keep the current position if there is no parent matching the new row position\n      if (!found) {\n        nextIdx = currentIdx;\n        nextRowIdx = currentRowIdx;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(moveNext);\n\n    if (nextRowIdx < mainHeaderRowIdx) {\n      setHeaderGroupColAndRowSpan();\n    }\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  if (nextRowIdx < mainHeaderRowIdx) {\n    // Find the last reachable parent for the new rowIdx\n    // This check is needed when navigating to a column\n    // that does not have a parent matching the new rowIdx\n    const nextColumn = columns[nextIdx];\n    let parent = nextColumn.parent;\n    const nextParentRowIdx = nextRowIdx;\n    nextRowIdx = mainHeaderRowIdx;\n    while (parent !== undefined) {\n      const parentRowIdx = getParentRowIdx(parent);\n      if (parentRowIdx >= nextParentRowIdx) {\n        nextRowIdx = parentRowIdx;\n        nextIdx = parent.idx;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning,\n     * layout/paint/style containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    align-content: center;\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n\n    /* Add box-shadow on the last frozen cell */\n    &:nth-last-child(1 of &) {\n      box-shadow: var(--rdg-cell-frozen-box-shadow);\n    }\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\nimport { cellClassname, cellFrozenClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number): CSSProperties {\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getHeaderCellStyle<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number,\n  rowSpan: number\n): React.CSSProperties {\n  const gridRowEnd = rowIdx + 1;\n  const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n\n  if (column.parent === undefined) {\n    return {\n      insetBlockStart: 0,\n      gridRowStart: 1,\n      gridRowEnd,\n      paddingBlockStart\n    };\n  }\n\n  return {\n    insetBlockStart: `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,\n    gridRowStart: gridRowEnd - rowSpan,\n    gridRowEnd,\n    paddingBlockStart\n  };\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan = 1\n): React.CSSProperties {\n  const index = column.idx + 1;\n  return {\n    gridColumnStart: index,\n    gridColumnEnd: index + colSpan,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n\nexport function getHeaderCellRowSpan<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number\n) {\n  return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkbox = css`\n  @layer rdg.CheckboxInput {\n    display: block;\n    margin: auto;\n    inline-size: 20px;\n    block-size: 20px;\n\n    &:focus-visible {\n      outline: 2px solid var(--rdg-checkbox-focus-color);\n      outline-offset: -3px;\n    }\n\n    &:enabled {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox-input ${checkbox}`;\n\nexport function renderCheckbox({ onChange, indeterminate, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <input\n      ref={(el) => {\n        if (el) {\n          el.indeterminate = indeterminate === true;\n        }\n      }}\n      type=\"checkbox\"\n      className={checkboxClassname}\n      onChange={handleChange}\n      {...props}\n    />\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderGroupCellProps } from '../types';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function renderToggleGroup<R, SR>(props: RenderGroupCellProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}: RenderGroupCellProps<R, SR>) {\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span className={groupCellContentClassname} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersProvider';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby' | 'indeterminate' | 'onChange'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  indeterminate,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    indeterminate,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n","import { createContext, useContext } from 'react';\n\nimport type { SelectHeaderRowEvent, SelectRowEvent } from '../types';\n\nexport interface RowSelectionContextValue {\n  readonly isRowSelected: boolean;\n  readonly isRowSelectionDisabled: boolean;\n}\n\nconst RowSelectionContext = createContext<RowSelectionContextValue | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection() {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return {\n    isRowSelectionDisabled: rowSelectionContext.isRowSelectionDisabled,\n    isRowSelected: rowSelectionContext.isRowSelected,\n    onRowSelectionChange: rowSelectionChangeContext\n  };\n}\n\nexport interface HeaderRowSelectionContextValue {\n  readonly isRowSelected: boolean;\n  readonly isIndeterminate: boolean;\n}\n\nconst HeaderRowSelectionContext = createContext<HeaderRowSelectionContextValue | undefined>(\n  undefined\n);\n\nexport const HeaderRowSelectionProvider = HeaderRowSelectionContext.Provider;\n\nconst HeaderRowSelectionChangeContext = createContext<\n  ((selectRowEvent: SelectHeaderRowEvent) => void) | undefined\n>(undefined);\n\nexport const HeaderRowSelectionChangeProvider = HeaderRowSelectionChangeContext.Provider;\n\nexport function useHeaderRowSelection() {\n  const headerRowSelectionContext = useContext(HeaderRowSelectionContext);\n  const headerRowSelectionChangeContext = useContext(HeaderRowSelectionChangeContext);\n\n  if (headerRowSelectionContext === undefined || headerRowSelectionChangeContext === undefined) {\n    throw new Error('useHeaderRowSelection must be used within DataGrid cells');\n  }\n\n  return {\n    isIndeterminate: headerRowSelectionContext.isIndeterminate,\n    isRowSelected: headerRowSelectionContext.isRowSelected,\n    onRowSelectionChange: headerRowSelectionChangeContext\n  };\n}\n","import { useHeaderRowSelection, useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'rdg-select-column';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const { isIndeterminate, isRowSelected, onRowSelectionChange } = useHeaderRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      indeterminate={isIndeterminate}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ checked: isIndeterminate ? false : checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const { isRowSelectionDisabled, isRowSelected, onRowSelectionChange } = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      disabled={isRowSelectionDisabled}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const { isRowSelected, onRowSelectionChange } = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, CalculatedColumnParent, ColumnOrColumnGroup, Omit } from '../types';\nimport { renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer V> ? Mutable<V>[] : T[P];\n};\n\ninterface WithParent<R, SR> {\n  readonly parent: MutableCalculatedColumnParent<R, SR> | undefined;\n}\n\ntype MutableCalculatedColumnParent<R, SR> = Omit<Mutable<CalculatedColumnParent<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\ntype MutableCalculatedColumn<R, SR> = Omit<Mutable<CalculatedColumn<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> {\n  rawColumns: readonly ColumnOrColumnGroup<R, SR>[];\n  defaultColumnOptions: DataGridProps<R, SR>['defaultColumnOptions'];\n  viewportWidth: number;\n  scrollLeft: number;\n  getColumnWidth: (column: CalculatedColumn<R, SR>) => string | number;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  defaultColumnOptions,\n  getColumnWidth,\n  viewportWidth,\n  scrollLeft,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultCellRenderer = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const defaultDraggable = defaultColumnOptions?.draggable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount } = useMemo((): {\n    readonly columns: readonly CalculatedColumn<R, SR>[];\n    readonly colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    readonly lastFrozenColumnIndex: number;\n    readonly headerRowsCount: number;\n  } => {\n    let lastFrozenColumnIndex = -1;\n    let headerRowsCount = 1;\n    const columns: MutableCalculatedColumn<R, SR>[] = [];\n\n    collectColumns(rawColumns, 1);\n\n    function collectColumns(\n      rawColumns: readonly ColumnOrColumnGroup<R, SR>[],\n      level: number,\n      parent?: MutableCalculatedColumnParent<R, SR>\n    ) {\n      for (const rawColumn of rawColumns) {\n        if ('children' in rawColumn) {\n          const calculatedColumnParent: MutableCalculatedColumnParent<R, SR> = {\n            name: rawColumn.name,\n            parent,\n            idx: -1,\n            colSpan: 0,\n            level: 0,\n            headerCellClass: rawColumn.headerCellClass\n          };\n\n          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n          continue;\n        }\n\n        const frozen = rawColumn.frozen ?? false;\n\n        const column: MutableCalculatedColumn<R, SR> = {\n          ...rawColumn,\n          parent,\n          idx: 0,\n          level: 0,\n          frozen,\n          width: rawColumn.width ?? defaultWidth,\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n          sortable: rawColumn.sortable ?? defaultSortable,\n          resizable: rawColumn.resizable ?? defaultResizable,\n          draggable: rawColumn.draggable ?? defaultDraggable,\n          renderCell: rawColumn.renderCell ?? defaultCellRenderer\n        };\n\n        columns.push(column);\n\n        if (frozen) {\n          lastFrozenColumnIndex++;\n        }\n\n        if (level > headerRowsCount) {\n          headerRowsCount = level;\n        }\n      }\n    }\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort frozen columns second:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // TODO: sort columns to keep them grouped if they have a parent\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      updateColumnParent(column, idx, 0);\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      headerRowsCount\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultCellRenderer,\n    defaultResizable,\n    defaultSortable,\n    defaultDraggable\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = getColumnWidth(column);\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [getColumnWidth, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    headerRowsCount,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\n\nfunction updateColumnParent<R, SR>(\n  column: MutableCalculatedColumn<R, SR> | MutableCalculatedColumnParent<R, SR>,\n  index: number,\n  level: number\n) {\n  if (level < column.level) {\n    column.level = level;\n  }\n\n  if (column.parent !== undefined) {\n    const { parent } = column;\n    if (parent.idx === -1) {\n      parent.idx = index;\n    }\n    parent.colSpan += 1;\n    updateColumnParent(parent, index, level - 1);\n  }\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, StateSetter } from '../types';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement | null>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n\n  function updateMeasuredWidths(columnsToMeasure: readonly string[]) {\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: number | 'max-content') {\n    const { key: resizingKey } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure: string[] = [];\n\n    for (const { key, idx, width } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n\n    gridRef.current!.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth =\n      typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey)!;\n\n    // TODO: remove\n    // need flushSync to keep frozen column offsets in sync\n    // we may be able to use `startTransition` or even `requestIdleCallback` instead\n    flushSync(() => {\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement | null>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current?.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n","import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [horizontalScrollbarHeight, setHorizontalScrollbarHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialHorizontalScrollbarHeight = offsetHeight - clientHeight;\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - initialHorizontalScrollbarHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setHorizontalScrollbarHeight(initialHorizontalScrollbarHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      const { clientHeight, offsetHeight } = gridRef.current!;\n\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n        setHorizontalScrollbarHeight(offsetHeight - clientHeight);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, horizontalScrollbarHeight] as const;\n}\n","import { useCallback, useEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\n\ninterface ViewportRowsArgs<R> {\n  rows: readonly R[];\n  rowHeight: number | ((row: R) => number);\n  clientHeight: number;\n  scrollTop: number;\n  enableVirtualization: boolean;\n}\n\nexport function useViewportRows<R>({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row) => {\n      const currentRowHeight = rowHeight(row);\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getCellStyle } from './utils';\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    --rdg-drag-handle-size: 8px;\n    z-index: 0;\n    cursor: move;\n    inline-size: var(--rdg-drag-handle-size);\n    block-size: var(--rdg-drag-handle-size);\n    background-color: var(--rdg-selection-color);\n    place-self: end;\n\n    &:hover {\n      --rdg-drag-handle-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleFrozenClassname = css`\n  @layer rdg.DragHandle {\n    z-index: 1;\n    position: sticky;\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  gridRowStart: number;\n  column: CalculatedColumn<R, SR>;\n  columnWidth: number | string;\n  maxColIdx: number;\n  isLastRow: boolean;\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onClick: () => void;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  gridRowStart,\n  rows,\n  column,\n  columnWidth,\n  maxColIdx,\n  isLastRow,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  onClick,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  const { idx, rowIdx } = selectedPosition;\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    // keep the focus on the cell\n    event.preventDefault();\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  function getStyle(): React.CSSProperties {\n    const colSpan = column.colSpan?.({ type: 'ROW', row: rows[rowIdx] }) ?? 1;\n    const { insetInlineStart, ...style } = getCellStyle(column, colSpan);\n    const marginEnd = 'calc(var(--rdg-drag-handle-size) * -0.5 + 1px)';\n    const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n\n    return {\n      ...style,\n      gridRowStart,\n      marginInlineEnd: isLastColumn ? undefined : marginEnd,\n      marginBlockEnd: isLastRow ? undefined : marginEnd,\n      insetInlineStart: insetInlineStart\n        ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)`\n        : undefined\n    };\n  }\n\n  return (\n    <div\n      style={getStyle()}\n      className={clsx(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname)}\n      onClick={onClick}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>(undefined);\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            rowIdx,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              rowIdx,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getHeaderCellRowSpan, getHeaderCellStyle } from './utils';\nimport type { CalculatedColumnParent } from './types';\nimport type { GroupedColumnHeaderRowProps } from './GroupedColumnHeaderRow';\nimport { cellClassname } from './style/cell';\n\ntype SharedGroupedColumnHeaderRowProps<R, SR> = Pick<\n  GroupedColumnHeaderRowProps<R, SR>,\n  'rowIdx' | 'selectCell'\n>;\n\ninterface GroupedColumnHeaderCellProps<R, SR> extends SharedGroupedColumnHeaderRowProps<R, SR> {\n  column: CalculatedColumnParent<R, SR>;\n  isCellSelected: boolean;\n}\n\nexport default function GroupedColumnHeaderCell<R, SR>({\n  column,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: GroupedColumnHeaderCellProps<R, SR>) {\n  const { tabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { colSpan } = column;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const index = column.idx + 1;\n\n  function onClick() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={index}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={clsx(cellClassname, column.headerCellClass)}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        gridColumnStart: index,\n        gridColumnEnd: index + colSpan\n      }}\n      onFocus={onFocus}\n      onClick={onClick}\n    >\n      {column.name}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\n\nconst headerSortCellClassname = css`\n  @layer rdg.SortableHeaderCell {\n    display: flex;\n  }\n`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell sortDirection={sortDirection} priority={priority}>\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'priority'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  sortDirection,\n  priority,\n  children\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  return (\n    <span className={headerSortCellClassname}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { useState } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport {\n  clampColumnWidth,\n  getCellClassname,\n  getCellStyle,\n  getHeaderCellRowSpan,\n  getHeaderCellStyle,\n  stopPropagation\n} from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultRenderHeaderCell from './renderHeaderCell';\n\nconst cellSortableClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: pointer;\n  }\n`;\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nexport const resizeHandleClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst cellDraggableClassname = 'rdg-cell-draggable';\n\nconst cellDragging = css`\n  opacity: 0.5;\n`;\n\nconst cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;\n\nconst cellOver = css`\n  background-color: var(--rdg-header-draggable-background-color);\n`;\n\nconst cellOverClassname = `rdg-cell-drag-over ${cellOver}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n  | 'onColumnsReorder'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  rowIdx: number;\n  isCellSelected: boolean;\n  dragDropKey: string;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  rowIdx,\n  isCellSelected,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction,\n  dragDropKey\n}: HeaderCellProps<R, SR>) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isOver, setIsOver] = useState(false);\n  const isRtl = direction === 'rtl';\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n  const { sortable, resizable, draggable } = column;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellSortableClassname]: sortable,\n    [cellResizableClassname]: resizable,\n    [cellDraggableClassname]: draggable,\n    [cellDraggingClassname]: isDragging,\n    [cellOverClassname]: isOver\n  });\n\n  const renderHeaderCell = column.renderHeaderCell ?? defaultRenderHeaderCell;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    // Fix column resizing on a draggable column in FF\n    event.preventDefault();\n\n    const { currentTarget, pointerId } = event;\n    const headerCell = currentTarget.parentElement!;\n    const { right, left } = headerCell.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n    let hasDoubleClicked = false;\n\n    function onPointerMove(event: PointerEvent) {\n      const { width, right, left } = headerCell.getBoundingClientRect();\n      let newWidth = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      newWidth = clampColumnWidth(newWidth, column);\n      if (width > 0 && newWidth !== width) {\n        onColumnResize(column, newWidth);\n      }\n    }\n\n    function onDoubleClick() {\n      hasDoubleClicked = true;\n      onColumnResize(column, 'max-content');\n    }\n\n    function onLostPointerCapture(event: PointerEvent) {\n      // Handle final pointer position that may have been skipped by coalesced pointer move events.\n      // Skip move pointer handling if the user double-clicked.\n      if (!hasDoubleClicked) {\n        onPointerMove(event);\n      }\n\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('dblclick', onDoubleClick);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('dblclick', onDoubleClick);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick(event: React.MouseEvent<HTMLSpanElement>) {\n    selectCell({ idx: column.idx, rowIdx });\n\n    if (sortable) {\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell({ idx: 0, rowIdx });\n    }\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function onDragStart(event: React.DragEvent<HTMLDivElement>) {\n    event.dataTransfer.setData(dragDropKey, column.key);\n    event.dataTransfer.dropEffect = 'move';\n    setIsDragging(true);\n  }\n\n  function onDragEnd() {\n    setIsDragging(false);\n  }\n\n  function onDragOver(event: React.DragEvent<HTMLDivElement>) {\n    // prevent default to allow drop\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDrop(event: React.DragEvent<HTMLDivElement>) {\n    setIsOver(false);\n    // The dragDropKey is derived from the useId() hook, which can sometimes generate keys with uppercase letters.\n    // When setting data using event.dataTransfer.setData(), the key is automatically converted to lowercase in some browsers.\n    // To ensure consistent comparison, we normalize the dragDropKey to lowercase before checking its presence in the event's dataTransfer types.\n    // https://html.spec.whatwg.org/multipage/dnd.html#the-datatransfer-interface\n    if (event.dataTransfer.types.includes(dragDropKey.toLowerCase())) {\n      const sourceKey = event.dataTransfer.getData(dragDropKey.toLowerCase());\n      if (sourceKey !== column.key) {\n        event.preventDefault();\n        onColumnsReorder?.(sourceKey, column.key);\n      }\n    }\n  }\n\n  function onDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n\n  function onDragLeave(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n\n  let draggableProps: React.HTMLAttributes<HTMLDivElement> | undefined;\n  if (draggable) {\n    draggableProps = {\n      draggable: true,\n      /* events fired on the draggable target */\n      onDragStart,\n      onDragEnd,\n      /* events fired on the drop targets */\n      onDragOver,\n      onDragEnter,\n      onDragLeave,\n      onDrop\n    };\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        ...getCellStyle(column, colSpan)\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onKeyDown={sortable ? onKeyDown : undefined}\n      {...draggableProps}\n    >\n      {renderHeaderCell({\n        column,\n        sortDirection,\n        priority,\n        tabIndex: childTabIndex\n      })}\n\n      {resizable && (\n        <div\n          className={resizeHandleClassname}\n          onClick={stopPropagation}\n          onPointerDown={onPointerDown}\n        />\n      )}\n    </div>\n  );\n}\n\n// only accept pertinent drag events:\n// - ignore drag events going from the container to an element inside the container\n// - ignore drag events going from an element inside the container to the container\nfunction isEventPertinent(event: React.DragEvent) {\n  const relatedTarget = event.relatedTarget as HTMLElement | null;\n\n  return !event.currentTarget.contains(relatedTarget);\n}\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      block-size: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n\nexport const topSummaryRowClassname = 'rdg-top-summary-row';\n\nexport const bottomSummaryRowClassname = 'rdg-bottom-summary-row';\n","import { memo, useId } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan } from './utils';\nimport type { CalculatedColumn, Direction, Position } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange' | 'onColumnsReorder'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  rowIdx: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (position: Position) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 1 to show up above regular cells and the focus sink */\n      z-index: 2;\n      position: sticky;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  rowIdx,\n  columns,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const dragDropKey = useId();\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        rowIdx={rowIdx}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onColumnsReorder={onColumnsReorder}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n        dragDropKey={dragDropKey}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => React.JSX.Element;\n","import { memo } from 'react';\n\nimport type { CalculatedColumn, CalculatedColumnParent, Position } from './types';\nimport GroupedColumnHeaderCell from './GroupedColumnHeaderCell';\nimport { headerRowClassname } from './HeaderRow';\n\nexport interface GroupedColumnHeaderRowProps<R, SR> {\n  rowIdx: number;\n  level: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectCell: (position: Position) => void;\n  selectedCellIdx: number | undefined;\n}\n\nfunction GroupedColumnHeaderRow<R, SR>({\n  rowIdx,\n  level,\n  columns,\n  selectedCellIdx,\n  selectCell\n}: GroupedColumnHeaderRowProps<R, SR>) {\n  const cells = [];\n  const renderedParents = new Set<CalculatedColumnParent<R, SR>>();\n\n  for (const column of columns) {\n    let { parent } = column;\n\n    if (parent === undefined) continue;\n\n    while (parent.level > level) {\n      if (parent.parent === undefined) break;\n      parent = parent.parent;\n    }\n\n    if (parent.level === level && !renderedParents.has(parent)) {\n      renderedParents.add(parent);\n      const { idx } = parent;\n      cells.push(\n        <GroupedColumnHeaderCell<R, SR>\n          key={idx}\n          column={parent}\n          rowIdx={rowIdx}\n          isCellSelected={selectedCellIdx === idx}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(GroupedColumnHeaderRow) as <R, SR>(\n  props: GroupedColumnHeaderRowProps<R, SR>\n) => React.JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditableUtil } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n  const isEditable = isCellEditableUtil(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {column.renderCell({\n        column,\n        row,\n        rowIdx,\n        isCellEditable: isEditable,\n        tabIndex: childTabIndex,\n        onRowChange: handleRowChange\n      })}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => React.JSX.Element;\n","import { forwardRef, memo, useMemo, type RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider, useLatestFunc, type RowSelectionContextValue } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport Cell from './Cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    selectedCellIdx,\n    isRowSelectionDisabled,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RenderRowProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          rowIdx={rowIdx}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          onClick={onCellClick}\n          onDoubleClick={onCellDoubleClick}\n          onContextMenu={onCellContextMenu}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  const selectionValue = useMemo(\n    (): RowSelectionContextValue => ({ isRowSelected, isRowSelectionDisabled }),\n    [isRowSelectionDisabled, isRowSelected]\n  );\n\n  return (\n    <RowSelectionProvider value={selectionValue}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RenderRowProps<R, SR> & RefAttributes<HTMLDivElement>\n) => React.JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { useRef } from 'react';\n\nimport { useLayoutEffect } from './hooks';\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridElement,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridElement: HTMLDivElement;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n","import { css } from '@linaria/core';\n\nimport { cell } from './cell';\nimport { bottomSummaryRowClassname, row, topSummaryRowClassname } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 90.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 17.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n`;\n\nconst root = css`\n  @layer rdg.Defaults {\n    *,\n    *::before,\n    *::after {\n      box-sizing: inherit;\n    }\n  }\n\n  @layer rdg.Root {\n    ${lightTheme}\n    --rdg-selection-color: #66afe9;\n    --rdg-font-size: 14px;\n    --rdg-cell-frozen-box-shadow: 2px 0 5px -2px rgba(136, 136, 136, 0.3);\n\n    &:dir(rtl) {\n      --rdg-cell-frozen-box-shadow: -2px 0 5px -2px rgba(136, 136, 136, 0.3);\n    }\n\n    display: grid;\n\n    color-scheme: var(--rdg-color-scheme, light dark);\n    accent-color: light-dark(hsl(207deg 100% 29%), hsl(207deg 100% 79%));\n\n    /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n    /* We set a stacking context so internal elements don't render on top of external elements. */\n    /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n    contain: content;\n    content-visibility: auto;\n    block-size: 350px;\n    border: 1px solid var(--rdg-border-color);\n    box-sizing: border-box;\n    overflow: auto;\n    background-color: var(--rdg-background-color);\n    color: var(--rdg-color);\n    font-size: var(--rdg-font-size);\n\n    /* needed on Firefox to fix scrollbars */\n    &::before {\n      content: '';\n      grid-column: 1/-1;\n      grid-row: 1/-1;\n    }\n\n    &.rdg-dark {\n      --rdg-color-scheme: dark;\n      ${darkTheme}\n    }\n\n    &.rdg-light {\n      --rdg-color-scheme: light;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      &:not(.rdg-light) {\n        ${darkTheme}\n      }\n    }\n\n    > :nth-last-child(1 of .${topSummaryRowClassname}) {\n      > .${cell} {\n        border-block-end: 2px solid var(--rdg-summary-border-color);\n      }\n    }\n\n    > :nth-child(1 of .${bottomSummaryRowClassname}) {\n      > .${cell} {\n        border-block-start: 2px solid var(--rdg-summary-border-color);\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 1 to show up above regular frozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const focusSinkHeaderAndSummaryClassname = css`\n  @layer rdg.FocusSink {\n    /* Should have a higher value than 3 to show up above header and summary rows */\n    z-index: 3;\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => React.JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport {\n  bottomSummaryRowClassname,\n  rowClassname,\n  rowSelectedClassname,\n  topSummaryRowClassname\n} from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 2;\n    }\n\n    > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [`${topSummaryRowClassname} ${topSummaryRow}`]: isTop,\n          [bottomSummaryRowClassname]: !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => React.JSX.Element;\n","import { forwardRef, useCallback, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport type { Key, KeyboardEvent, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  HeaderRowSelectionChangeProvider,\n  HeaderRowSelectionProvider,\n  RowSelectionChangeProvider,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useLayoutEffect,\n  useViewportColumns,\n  useViewportRows,\n  type HeaderRowSelectionContextValue\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getColSpan,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClickArgs,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEvent,\n  CellNavigationMode,\n  CellSelectArgs,\n  Column,\n  ColumnOrColumnGroup,\n  CopyEvent,\n  Direction,\n  FillEvent,\n  Maybe,\n  PasteEvent,\n  Position,\n  Renderers,\n  RowsChangeData,\n  SelectHeaderRowEvent,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersProvider,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersProvider';\nimport DragHandle from './DragHandle';\nimport EditCell from './EditCell';\nimport GroupedColumnHeaderRow from './GroupedColumnHeaderRow';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport {\n  focusSinkClassname,\n  focusSinkHeaderAndSummaryClassname,\n  rootClassname,\n  viewportDraggingClassname\n} from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'renderCell' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable' | 'draggable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  | 'role'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'aria-rowcount'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly ColumnOrColumnGroup<NoInfer<R>, NoInfer<SR>>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: NoInfer<R>) => K>;\n  onRowsChange?: Maybe<(rows: NoInfer<R>[], data: RowsChangeData<NoInfer<R>, NoInfer<SR>>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((row: NoInfer<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Determines if row selection is disabled, per row */\n  isRowSelectionDisabled?: Maybe<(row: NoInfer<R>) => boolean>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<NoInfer<K>>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<NoInfer<R>, NoInfer<SR>>>;\n  onFill?: Maybe<(event: FillEvent<NoInfer<R>>) => NoInfer<R>>;\n  onCopy?: Maybe<(event: CopyEvent<NoInfer<R>>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<NoInfer<R>>) => NoInfer<R>>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  onCellKeyDown?: Maybe<\n    (args: CellKeyDownArgs<NoInfer<R>, NoInfer<SR>>, event: CellKeyboardEvent) => void\n  >;\n  /** Function called whenever cell selection is changed */\n  onSelectedCellChange?: Maybe<(args: CellSelectArgs<NoInfer<R>, NoInfer<SR>>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n  /** Called when a column is reordered */\n  onColumnsReorder?: Maybe<(sourceColumnKey: string, targetColumnKey: string) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<NoInfer<R>, NoInfer<SR>>>;\n  rowClass?: Maybe<(row: NoInfer<R>, rowIdx: number) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    isRowSelectionDisabled,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onSelectedCellChange,\n    onScroll,\n    onColumnResize,\n    onColumnsReorder,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n\n  const getColumnWidth = useCallback(\n    (column: CalculatedColumn<R, SR>) => {\n      return (\n        resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width\n      );\n    },\n    [measuredColumnWidths, resizedColumnWidths]\n  );\n\n  const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    defaultColumnOptions,\n    getColumnWidth,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    enableVirtualization\n  });\n\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const shouldFocusCellRef = useRef(false);\n\n  /**\n   * computed values\n   */\n  const isTreeGrid = role === 'treegrid';\n  const headerRowsHeight = headerRowsCount * headerRowHeight;\n  const summaryRowsHeight = summaryRowsCount * summaryRowHeight;\n  const clientHeight = gridHeight - headerRowsHeight - summaryRowsHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus\n    }),\n    [renderCheckbox, renderSortStatus]\n  );\n\n  const headerSelectionValue = useMemo((): HeaderRowSelectionContextValue => {\n    // no rows to select = explicitely unchecked\n    let hasSelectedRow = false;\n    let hasUnselectedRow = false;\n\n    if (rowKeyGetter != null && selectedRows != null && selectedRows.size > 0) {\n      for (const row of rows) {\n        if (selectedRows.has(rowKeyGetter(row))) {\n          hasSelectedRow = true;\n        } else {\n          hasUnselectedRow = true;\n        }\n\n        if (hasSelectedRow && hasUnselectedRow) break;\n      }\n    }\n\n    return {\n      isRowSelected: hasSelectedRow && !hasUnselectedRow,\n      isIndeterminate: hasSelectedRow && hasUnselectedRow\n    };\n  }, [rows, selectedRows, rowKeyGetter]);\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n  const scrollHeight =\n    headerRowHeight + totalRowHeight + summaryRowsHeight + horizontalScrollbarHeight;\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectHeaderRowLatest = useLatestFunc(selectHeaderRow);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc(({ idx, rowIdx }: Position) => {\n    selectCell({ rowIdx: minRowIdx + rowIdx - 1, idx });\n  });\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      focusSinkRef.current!.focus({ preventScroll: true });\n      scrollIntoView(focusSinkRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    focusCellOrCellContent();\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectHeaderRow(args: SelectHeaderRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    const newSelectedRows = new Set(selectedRows);\n    for (const row of rows) {\n      if (isRowSelectionDisabled?.(row) === true) continue;\n      const rowKey = rowKeyGetter(row);\n      if (args.checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const { row, checked, isShiftClick } = args;\n    if (isRowSelectionDisabled?.(row) === true) return;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    const previousRowIdx = lastSelectedRowIdx.current;\n    const rowIdx = rows.indexOf(row);\n    lastSelectedRowIdx.current = rowIdx;\n\n    if (checked) {\n      newSelectedRows.add(rowKey);\n    } else {\n      newSelectedRows.delete(rowKey);\n    }\n\n    if (\n      isShiftClick &&\n      previousRowIdx !== -1 &&\n      previousRowIdx !== rowIdx &&\n      previousRowIdx < rows.length\n    ) {\n      const step = sign(rowIdx - previousRowIdx);\n      for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n        const row = rows[i];\n        if (isRowSelectionDisabled?.(row) === true) continue;\n        if (checked) {\n          newSelectedRows.add(rowKeyGetter(row));\n        } else {\n          newSelectedRows.delete(rowKeyGetter(row));\n        }\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { keyCode } = event;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event)\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        // copy highlighted text only\n        if (window.getSelection()?.isCollapsed === false) return;\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = [...rows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rows[rowIdx];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rows[rowIdx];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinEditBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinEditBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    const row = rows[position.rowIdx];\n    const samePosition = isSamePosition(selectedPosition, position);\n\n    if (enableEditor && isCellEditable(position)) {\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (samePosition) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n\n    if (onSelectedCellChange && !samePosition) {\n      onSelectedCellChange({\n        rowIdx: position.rowIdx,\n        row,\n        column: columns[position.idx]\n      });\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: minRowIdx };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: maxRowIdx };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // Do not allow focus to leave and prevent scrolling\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      moveUp: key === 'ArrowUp',\n      moveNext: key === rightKey || (key === 'Tab' && !shiftKey),\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      mainHeaderRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function focusCellOrCellContent() {\n    const cell = getCellToScroll(gridRef.current!);\n    if (cell === null) return;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  }\n\n  function renderDragHandle() {\n    if (\n      onFill == null ||\n      selectedPosition.mode === 'EDIT' ||\n      !isCellWithinViewportBounds(selectedPosition)\n    ) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    if (column.renderEditCell == null || column.editable === false) {\n      return;\n    }\n\n    const columnWidth = getColumnWidth(column);\n\n    return (\n      <DragHandle\n        gridRowStart={headerAndTopSummaryRowsCount + rowIdx + 1}\n        rows={rows}\n        column={column}\n        columnWidth={columnWidth}\n        maxColIdx={maxColIdx}\n        isLastRow={rowIdx === maxRowIdx}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onClick={focusCellOrCellContent}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    // idx can be -1 if grouping is enabled\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key: K | number = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelectionDisabled: isRowSelectionDisabled?.(row) ?? false,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `repeat(${headerRowsCount}, ${headerRowHeight}px)`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={role}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={ariaRowCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-scroll-height': `${scrollHeight}px`,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      <DataGridDefaultRenderersProvider value={defaultGridComponents}>\n        <HeaderRowSelectionChangeProvider value={selectHeaderRowLatest}>\n          <HeaderRowSelectionProvider value={headerSelectionValue}>\n            {Array.from({ length: groupedColumnHeaderRowsCount }, (_, index) => (\n              <GroupedColumnHeaderRow\n                key={index}\n                rowIdx={index + 1}\n                level={-groupedColumnHeaderRowsCount + index}\n                columns={getRowViewportColumns(minRowIdx + index)}\n                selectedCellIdx={\n                  selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined\n                }\n                selectCell={selectHeaderCellLatest}\n              />\n            ))}\n            <HeaderRow\n              rowIdx={headerRowsCount}\n              columns={getRowViewportColumns(mainHeaderRowIdx)}\n              onColumnResize={handleColumnResizeLatest}\n              onColumnsReorder={onColumnsReorderLastest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </HeaderRowSelectionProvider>\n        </HeaderRowSelectionChangeProvider>\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            {topSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + 1 + rowIdx;\n              const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top = headerRowsHeight + summaryRowHeight * rowIdx;\n\n              return (\n                <SummaryRow\n                  key={rowIdx}\n                  aria-rowindex={gridRowStart}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={undefined}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n            <RowSelectionChangeProvider value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeProvider>\n            {bottomSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = rows.length + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={ariaRowCount - bottomSummaryRowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop={false}\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n      </DataGridDefaultRenderersProvider>\n\n      {renderDragHandle()}\n\n      {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n      {renderMeasuringCells(viewportColumns)}\n\n      {/* extra div is needed for row navigation in a treegrid */}\n      {isTreeGrid && (\n        <div\n          ref={focusSinkRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [focusSinkHeaderAndSummaryClassname]: !isRowIdxWithinViewportBounds(\n              selectedPosition.rowIdx\n            ),\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridElement={gridRef.current!}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  return gridEl.querySelector<HTMLDivElement>(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => React.JSX.Element;\n","import { memo } from 'react';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\n\ninterface GroupCellProps<R, SR> {\n  id: string;\n  groupKey: unknown;\n  childRows: readonly R[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n  isExpanded: boolean;\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n  isGroupByColumn: boolean;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  isGroupByColumn,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!isGroupByColumn || isLevelMatching) &&\n        column.renderGroupCell?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          tabIndex: childTabIndex,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => React.JSX.Element;\n","import { memo, useMemo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider, type RowSelectionContextValue } from './hooks';\nimport { getRowStyle } from './utils';\nimport type { BaseRenderRowProps, GroupRow } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child, .${cellFrozen}),\n    > :nth-last-child(n + 2 of .${cellFrozen}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\ninterface GroupRowRendererProps<R, SR> extends BaseRenderRowProps<R, SR> {\n  row: GroupRow<R>;\n  groupBy: readonly string[];\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  className,\n  row,\n  rowIdx,\n  viewportColumns,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  gridRowStart,\n  groupBy,\n  toggleGroup,\n  isRowSelectionDisabled,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row.level + 1 : row.level;\n\n  function handleSelectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  const selectionValue = useMemo(\n    (): RowSelectionContextValue => ({ isRowSelectionDisabled: false, isRowSelected }),\n    [isRowSelected]\n  );\n\n  return (\n    <RowSelectionProvider value={selectionValue}>\n      <div\n        role=\"row\"\n        aria-level={row.level + 1} // aria-level is 1-based\n        aria-setsize={row.setSize}\n        aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n        aria-expanded={row.isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          selectedCellIdx === -1 && rowSelectedClassname,\n          className\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={row.id}\n            groupKey={row.groupKey}\n            childRows={row.childRows}\n            isExpanded={row.isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n            isGroupByColumn={groupBy.includes(column.key)}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(\n  props: GroupRowRendererProps<R, SR>\n) => React.JSX.Element;\n","import { forwardRef, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\n\nimport { useLatestFunc } from './hooks';\nimport { assertIsValidKeyGetter, isCtrlKeyHeldDown } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  Column,\n  GroupRow,\n  Maybe,\n  Omit,\n  RenderRowProps,\n  RowHeightArgs,\n  RowsChangeData\n} from './types';\nimport { renderToggleGroup } from './cellRenderers';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport DataGrid from './DataGrid';\nimport type { DataGridHandle, DataGridProps } from './DataGrid';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\nimport GroupedRow from './GroupRow';\nimport { defaultRenderRow } from './Row';\n\nexport interface TreeDataGridProps<R, SR = unknown, K extends Key = Key>\n  extends Omit<\n    DataGridProps<R, SR, K>,\n    'columns' | 'role' | 'aria-rowcount' | 'rowHeight' | 'onFill' | 'isRowSelectionDisabled'\n  > {\n  columns: readonly Column<NoInfer<R>, NoInfer<SR>>[];\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<NoInfer<R>>) => number)>;\n  groupBy: readonly string[];\n  rowGrouper: (\n    rows: readonly NoInfer<R>[],\n    columnKey: string\n  ) => Record<string, readonly NoInfer<R>[]>;\n  expandedGroupIds: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange: (expandedGroupIds: Set<unknown>) => void;\n}\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\nfunction TreeDataGrid<R, SR, K extends Key>(\n  {\n    columns: rawColumns,\n    rows: rawRows,\n    rowHeight: rawRowHeight,\n    rowKeyGetter: rawRowKeyGetter,\n    onCellKeyDown: rawOnCellKeyDown,\n    onRowsChange,\n    selectedRows: rawSelectedRows,\n    onSelectedRowsChange: rawOnSelectedRowsChange,\n    renderers,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    ...props\n  }: TreeDataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const rawRenderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const headerAndTopSummaryRowsCount = 1 + (props.topSummaryRows?.length ?? 0);\n  const isRtl = props.direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  const { columns, groupBy } = useMemo(() => {\n    const columns = [...rawColumns].sort(({ key: aKey }, { key: bKey }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy.includes(bKey)) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const groupBy: string[] = [];\n    for (const [index, column] of columns.entries()) {\n      if (rawGroupBy.includes(column.key)) {\n        groupBy.push(column.key);\n        columns[index] = {\n          ...column,\n          frozen: true,\n          renderCell: () => null,\n          renderGroupCell: column.renderGroupCell ?? renderToggleGroup,\n          editable: false\n        };\n      }\n    }\n\n    return { columns, groupBy };\n  }, [rawColumns, rawGroupBy]);\n\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds.has(id);\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const rowHeight = useMemo(() => {\n    if (typeof rawRowHeight === 'function') {\n      return (row: R | GroupRow<R>): number => {\n        if (isGroupRow(row)) {\n          return rawRowHeight({ type: 'GROUP', row });\n        }\n        return rawRowHeight({ type: 'ROW', row });\n      };\n    }\n\n    return rawRowHeight;\n  }, [isGroupRow, rawRowHeight]);\n\n  const getParentRowAndIndex = useCallback(\n    (row: R | GroupRow<R>) => {\n      const rowIdx = rows.indexOf(row);\n      for (let i = rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && (!isGroupRow(row) || row.parentId === parentRow.id)) {\n          return [parentRow, i] as const;\n        }\n      }\n\n      return undefined;\n    },\n    [isGroupRow, rows]\n  );\n\n  const rowKeyGetter = useCallback(\n    (row: R | GroupRow<R>) => {\n      if (isGroupRow(row)) {\n        return row.id;\n      }\n\n      if (typeof rawRowKeyGetter === 'function') {\n        return rawRowKeyGetter(row);\n      }\n\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        const { startRowIndex, childRows } = parentRowAndIndex[0];\n        const groupIndex = childRows.indexOf(row);\n        return startRowIndex + groupIndex + 1;\n      }\n\n      return rows.indexOf(row);\n    },\n    [getParentRowAndIndex, isGroupRow, rawRowKeyGetter, rows]\n  );\n\n  const selectedRows = useMemo((): Maybe<ReadonlySet<Key>> => {\n    if (rawSelectedRows == null) return null;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const selectedRows = new Set<Key>(rawSelectedRows);\n    for (const row of rows) {\n      if (isGroupRow(row)) {\n        // select parent row if all the children are selected\n        const isGroupRowSelected = row.childRows.every((cr) =>\n          rawSelectedRows.has(rawRowKeyGetter(cr))\n        );\n        if (isGroupRowSelected) {\n          selectedRows.add(row.id);\n        }\n      }\n    }\n\n    return selectedRows;\n  }, [isGroupRow, rawRowKeyGetter, rawSelectedRows, rows]);\n\n  function onSelectedRowsChange(newSelectedRows: Set<Key>) {\n    if (!rawOnSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rawRowKeyGetter);\n\n    const newRawSelectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      const key = rowKeyGetter(row);\n      if (selectedRows?.has(key) && !newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // select all children if the parent row is selected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.delete(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.delete(key as K);\n        }\n      } else if (!selectedRows?.has(key) && newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          // unselect all children if the parent row is unselected\n          for (const cr of row.childRows) {\n            newRawSelectedRows.add(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.add(key as K);\n        }\n      }\n    }\n\n    rawOnSelectedRowsChange(newRawSelectedRows);\n  }\n\n  function handleKeyDown(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) {\n    rawOnCellKeyDown?.(args, event);\n    if (event.isGridDefaultPrevented()) return;\n\n    if (args.mode === 'EDIT') return;\n    const { column, rowIdx, selectCell } = args;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const idx = column?.idx ?? -1;\n    const row = rows[rowIdx];\n\n    if (!isGroupRow(row)) return;\n    if (\n      idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((event.key === leftKey && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (event.key === rightKey && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      event.preventGridDefault();\n      toggleGroup(row.id);\n    }\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (idx === -1 && event.key === leftKey && !row.isExpanded && row.level !== 0) {\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        event.preventGridDefault();\n        selectCell({ idx, rowIdx: parentRowAndIndex[1] });\n      }\n    }\n\n    // Prevent copy/paste on group rows\n    if (isCtrlKeyHeldDown(event) && (event.keyCode === 67 || event.keyCode === 86)) {\n      event.preventGridDefault();\n    }\n  }\n\n  function handleRowsChange(updatedRows: R[], { indexes, column }: RowsChangeData<R, SR>) {\n    if (!onRowsChange) return;\n    const updatedRawRows = [...rawRows];\n    const rawIndexes: number[] = [];\n    for (const index of indexes) {\n      const rawIndex = rawRows.indexOf(rows[index] as R);\n      updatedRawRows[rawIndex] = updatedRows[index];\n      rawIndexes.push(rawIndex);\n    }\n    onRowsChange(updatedRawRows, {\n      indexes: rawIndexes,\n      column\n    });\n  }\n\n  function toggleGroup(groupId: unknown) {\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(groupId)) {\n      newExpandedGroupIds.delete(groupId);\n    } else {\n      newExpandedGroupIds.add(groupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function renderRow(\n    key: Key,\n    {\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor,\n      ...rowProps\n    }: RenderRowProps<R, SR>\n  ) {\n    if (isGroupRow(row)) {\n      const { startRowIndex } = row;\n      return (\n        <GroupedRow\n          key={key}\n          {...rowProps}\n          aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1}\n          row={row}\n          groupBy={groupBy}\n          toggleGroup={toggleGroupLatest}\n        />\n      );\n    }\n\n    let ariaRowIndex = rowProps['aria-rowindex'];\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const { startRowIndex, childRows } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;\n    }\n\n    return rawRenderRow(key, {\n      ...rowProps,\n      'aria-rowindex': ariaRowIndex,\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor\n    });\n  }\n\n  return (\n    <DataGrid<R, SR, Key>\n      {...props}\n      role=\"treegrid\"\n      aria-rowcount={\n        rowsCount + 1 + (props.topSummaryRows?.length ?? 0) + (props.bottomSummaryRows?.length ?? 0)\n      }\n      ref={ref}\n      columns={columns}\n      rows={rows as R[]} // TODO: check types\n      rowHeight={rowHeight}\n      rowKeyGetter={rowKeyGetter}\n      onRowsChange={handleRowsChange}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={onSelectedRowsChange}\n      onCellKeyDown={handleKeyDown}\n      renderers={{\n        ...renderers,\n        renderRow\n      }}\n    />\n  );\n}\n\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport default forwardRef(TreeDataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: TreeDataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => React.JSX.Element;\n","import { css } from '@linaria/core';\n\nimport type { RenderEditCellProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: RenderEditCellProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true, false)}\n    />\n  );\n}\n"],"names":["getColSpan","column","lastFrozenColumnIndex","args","colSpan","Number","isInteger","frozen","idx","undefined","stopPropagation","event","scrollIntoView","element","inline","block","createCellEvent","defaultPrevented","cellEvent","preventGridDefault","isGridDefaultPrevented","Object","setPrototypeOf","getPrototypeOf","nonInputKeys","Set","isCtrlKeyHeldDown","e","ctrlKey","metaKey","key","isDefaultCellInput","vKey","keyCode","has","onEditorNavigation","target","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","closest","querySelectorAll","length","measuringCellClassname","renderMeasuringCells","viewportColumns","map","minWidth","maxWidth","_jsx","className","style","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","row","rowIdx","isCellEditableUtil","renderEditCell","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","mainHeaderRowIdx","topSummaryRowsCount","type","getNextSelectedCellPosition","moveUp","moveNext","cellNavigationMode","colSpanColumns","minRowIdx","maxRowIdx","currentPosition","currentIdx","currentRowIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","columnsCount","setColSpan","colIdx","getParentRowIdx","parent","level","setHeaderGroupColAndRowSpan","nextColumn","parentRowIdx","found","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","nextParentRowIdx","canExitGrid","maxColIdx","shiftKey","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","cell","cellClassname","cellFrozen","cellFrozenClassname","getRowStyle","getHeaderCellStyle","rowSpan","gridRowEnd","paddingBlockStart","insetBlockStart","gridRowStart","getCellStyle","index","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","clsx","min","max","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","Error","clampColumnWidth","width","getHeaderCellRowSpan","checkbox","checkboxClassname","renderCheckbox","onChange","indeterminate","props","handleChange","checked","nativeEvent","ref","el","groupCellContent","groupCellContentClassname","caret","caretClassname","renderToggleGroup","ToggleGroup","groupKey","isExpanded","tabIndex","toggleGroup","handleKeyDown","d","_jsxs","onKeyDown","children","viewBox","height","renderValue","DataGridDefaultRenderersContext","createContext","DataGridDefaultRenderersProvider","Provider","useDefaultRenderers","useContext","SelectCellFormatter","value","disabled","ariaLabel","ariaLabelledBy","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","isRowSelectionDisabled","isRowSelected","onRowSelectionChange","HeaderRowSelectionContext","HeaderRowSelectionProvider","HeaderRowSelectionChangeContext","HeaderRowSelectionChangeProvider","useHeaderRowSelection","headerRowSelectionContext","headerRowSelectionChangeContext","isIndeterminate","SELECT_COLUMN_KEY","HeaderRenderer","SelectFormatter","isShiftClick","SelectGroupFormatter","SelectColumn","name","resizable","sortable","renderHeaderCell","renderCell","renderGroupCell","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","defaultColumnOptions","getColumnWidth","viewportWidth","scrollLeft","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultCellRenderer","defaultSortable","defaultResizable","defaultDraggable","draggable","headerRowsCount","useMemo","collectColumns","rawColumn","calculatedColumnParent","headerCellClass","push","sort","aKey","frozenA","bKey","frozenB","forEach","updateColumnParent","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","set","columnMetric","get","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useColumnWidths","gridRef","gridWidth","resizedColumnWidths","measuredColumnWidths","setResizedColumnWidths","setMeasuredColumnWidths","onColumnResize","prevGridWidthRef","useRef","columnsCanFlex","ignorePreviouslyMeasuredColumns","current","newTemplateColumns","columnsToMeasure","gridTemplateColumns","join","updateMeasuredWidths","newMeasuredColumnWidths","hasChanges","measuredWidth","measureColumnWidth","delete","handleColumnResize","nextWidth","resizingKey","flushSync","newResizedColumnWidths","selector","CSS","escape","measuringCell","querySelector","getBoundingClientRect","useGridDimensions","inlineSize","setInlineSize","useState","blockSize","setBlockSize","horizontalScrollbarHeight","setHorizontalScrollbarHeight","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","initialHorizontalScrollbarHeight","initialWidth","initialHeight","resizeObserver","entries","size","contentBoxSize","observe","disconnect","useLatestFunc","fn","callbackFn","useCallback","useRovingTabIndex","isSelected","isChildFocused","setIsChildFocused","onFocus","currentTarget","isFocusable","childTabIndex","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","useViewportRows","rowHeight","scrollTop","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","cellDragHandle","cellDragHandleFrozenClassname","cellDragHandleClassname","DragHandle","columnWidth","latestDraggedOverRowIdx","isCellEditable","onRowsChange","onFill","onClick","setDragging","setDraggedOverRowIdx","handleMouseDown","preventDefault","buttons","addEventListener","onMouseOver","onMouseUp","removeEventListener","handleDragEnd","overRowIdx","startRowIndex","endRowIndex","updateRows","handleDoubleClick","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","columnKey","targetRow","getStyle","marginEnd","isLastColumn","marginInlineEnd","marginBlockEnd","onMouseDown","onDoubleClick","cellEditing","EditCell","onRowChange","closeEditor","navigate","frameRequestRef","commitOnOutsideClick","editorOptions","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","mode","commitChanges","shouldFocusCell","onEditorRowChange","commitChangesAndFocus","cellClass","displayCellContent","role","onMouseDownCapture","_Fragment","GroupedColumnHeaderCell","isCellSelected","selectCell","headerSortCellClassname","headerSortName","headerSortNameClassname","sortDirection","priority","SortableHeaderCell","renderSortStatus","cellSortableClassname","cellResizable","cellResizableClassname","resizeHandleClassname","cellDraggableClassname","cellDragging","cellDraggingClassname","cellOver","cellOverClassname","HeaderCell","onColumnsReorder","sortColumns","onSortColumnsChange","shouldFocusGrid","direction","dragDropKey","isDragging","setIsDragging","isOver","setIsOver","isRtl","sortIndex","findIndex","sortColumn","ariaSort","defaultRenderHeaderCell","onPointerDown","pointerType","pointerId","headerCell","parentElement","right","clientX","hasDoubleClicked","onPointerMove","newWidth","onLostPointerCapture","setPointerCapture","onSort","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","handleFocus","onDragStart","dataTransfer","setData","dropEffect","onDragEnd","onDragOver","onDrop","types","includes","toLowerCase","sourceKey","getData","onDragEnter","isEventPertinent","onDragLeave","draggableProps","relatedTarget","contains","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","topSummaryRowClassname","bottomSummaryRowClassname","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","useId","cells","memo","GroupedColumnHeaderRow","renderedParents","add","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","onContextMenu","isEditable","selectCellWrapper","openEditor","handleClick","handleContextMenu","handleRowChange","newRow","Row","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","onCellClick","onCellDoubleClick","onCellContextMenu","rowClass","onMouseEnter","handleDragEnter","selectionValue","RowComponent","forwardRef","defaultRenderRow","ScrollToCell","scrollToPosition","gridElement","setScrollToCellPosition","removeScrollToCell","observer","IntersectionObserver","root","threshold","gridColumn","gridRow","arrow","arrowClassname","renderSortIcon","renderSortPriority","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","focusSinkHeaderAndSummaryClassname","summaryCellClassname","SummaryCell","summaryCellClass","renderSummaryCell","summaryRow","topSummaryRow","summaryRowClassname","SummaryRow","bottom","isTop","ariaRowIndex","DataGrid","rowKeyGetter","rawRowHeight","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onCellKeyDown","onSelectedCellChange","onScroll","onCopy","onPaste","rawEnableVirtualization","renderers","rawDirection","rawRole","ariaDescribedBy","rawAriaRowCount","testId","defaultRenderers","renderRow","defaultRenderSortStatus","defaultRenderCheckbox","noRowsFallback","setScrollTop","setScrollLeft","copiedCell","setCopiedCell","draggedOverRowIdx","setOverRowIdx","setScrollToPosition","gridHeight","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","groupedColumnHeaderRowsCount","setSelectedPosition","prevSelectedPosition","lastSelectedRowIdx","focusSinkRef","shouldFocusCellRef","isTreeGrid","headerRowsHeight","summaryRowsHeight","isSelectable","leftKey","rightKey","ariaRowCount","defaultGridComponents","headerSelectionValue","hasSelectedRow","hasUnselectedRow","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","scrollHeight","handleColumnResizeLatest","onColumnsReorderLastest","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectHeaderRowLatest","selectHeaderRow","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectHeaderCellLatest","isSamePosition","focus","preventScroll","focusCellOrCellContent","useImperativeHandle","scrollToCell","scrollToIdx","scrollToRowIdx","isRowIdxWithinViewportBounds","newSelectedRows","rowKey","previousRowIdx","indexOf","step","Element","isCellEvent","isRowEvent","cKey","getSelection","isCollapsed","handleCopy","handlePaste","handleCellInput","handleScroll","commitEditorChanges","sourceColumnKey","targetColumn","updatedTargetRow","targetColumnKey","originalRow","isColIdxWithinSelectionBounds","isCellWithinEditBounds","enableEditor","samePosition","getCellToScroll","getNextPosition","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","elementToFocus","renderDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","c","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","dir","Array","from","_","summaryRowIdx","isSummaryRowSelected","gridEl","p1","p2","GroupCell","id","childRows","groupColumnIndex","isGroupByColumn","toggleGroupWrapper","isLevelMatching","cursor","groupRow","groupRowClassname","GroupedRow","groupBy","handleSelectGroup","setSize","posInSet","TreeDataGrid","rawRows","rawRowKeyGetter","rawOnCellKeyDown","rawSelectedRows","rawOnSelectedRowsChange","rawGroupBy","rowGrouper","expandedGroupIds","onExpandedGroupIdsChange","rawRenderRow","toggleGroupLatest","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","groupRowsCount","groups","childGroups","childRowsCount","isGroupRow","allGroupRows","flattenedRows","expandGroup","parentId","isReadonlyArray","keys","getParentRowAndIndex","parentRow","parentRowAndIndex","groupIndex","isGroupRowSelected","every","cr","newRawSelectedRows","handleRowsChange","updatedRawRows","rawIndexes","rawIndex","groupId","newExpandedGroupIds","rowProps","arr","isArray","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","select","textEditor","onBlur"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"debugId":null}}]
}